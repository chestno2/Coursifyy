%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1404.i029.070.S.m005.c10.flat design science 2.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Даша
%%CreationDate: 4/4/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 35155 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C450C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C06060605060606050606060506060605060606050606
%060506060605060606050606060506060605060606050606060506060605
%060606050606060506060605060606050606060506060605060606050606
%060506060605060606050606060506060605060606050606060506060605
%06060605060606050606060506060605FD05060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%06050606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060506060605060606050606060506060605
%060606050606060506060605060606050606060506060605060606050606
%060506060605060606050606060506060605060606050606060506060605
%060606050606060506060605060606050606060506060605060606050606
%060506060605060606050606060506060605060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C060606050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%06050605060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060506060605060606050606060506060605
%060606050606060506060605060606050606060506060605060606050606
%060506060605060606050606060506060605060606050605060506060605
%060606050606060506060605060606050606060506060605060606050606
%060506060605060606050606060506060605FD05060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060CFD040605FD05065175060606
%520606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C06050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060051
%270606514A06065174060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C05064B9F06065175060674520606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C060606050606060506060605060606050606060506
%060605060606050606060506060605060606050606060506060605060606
%050606060506060605060606050605067451062727060599050606752706
%060605060606050606060506060605060606050606060506060605060606
%0506060605060606050606060506060605060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060CFD040605994B06062E272E51765151
%2706069F9806060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060005279850
%06065198C1C2C9A7A0055174060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%0605060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%FD0706750675C0C1C0C0BAC9FFC927FD04062E0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C060606050606060506060605060606050606060506060605060606
%050606060506060605060606050606060506060605060606050606060506
%06060006060600FD04062EBAC098C098C0BAC9FF7B052E519F5106060605
%060606050606060506060605060606050606060506060605060606050606
%06050606060506060605FD05060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C060605060605050606757475510675C0C0C098FD04C0FFC92D757B27
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C06050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%05060506050605060506050500060505000605274A51059898C098C098C0
%C0C0C9CF2706000605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C06060506050605060506050606
%0698C0C0C9C9C8C0C0C0CECA51062E0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C060606050606060506060605060606050606060506060605060606
%050606060506060605060606050606060506060605060606050606060005
%050605050506052E0599BA7B7CC2C9CFC0C0C9C90551749F510605060606
%050606060506060605060606050606060506060605060606050606060506
%0606050606060506060605060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060CFD0706
%0C050605060506052E759F740651C0579FBAC0A7C7C0FF7B06062E275206
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%05060506050605060506000600060506055105060151BA5898C09E3498C9
%C82705060606050605060506050605060506050605060506050605060506
%0506050605060506050605060506050605060506050605060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C06060C35343B5F602E06050C0606060C0606057527
%C157C1C05E7BC8C852069F7506062E0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%060605060606050606060506060605060606050606060506060605060606
%05060606050606060506060605060606050C123B125F5F8AAEFF842E0506
%06060506279851527557BA7C57C0752806060575982D0506060605060606
%050606060506060605060606050606060506060605060606050606060506
%06060506060605FD05060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C062E343B345F5F665F
%6684FFCF9F500C0606062E270D5F5F7C9F58C05106059F06060652270606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060551
%7B3B123B5F603B605F5F84FFA89E9828060605060635355F3B8351512706
%747506060506050605060506050605060506050605060506050605060506
%05060506050605060506050605060506050605060506050606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C06060675C05F133B5F665F6660665F66AFFF59C09806060C062E34
%35356066367575062E9E2E060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060506060605060606050606060506060605060606050606060506
%0606050606060506060605060651C07C133534665F605F665F603B8AFF85
%51C0270605060C341235343506515106052E050605060506052E0C0C0506
%060605060606050606060506060605060606050606060506060605060606
%050606060506060605060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606050C0606062EC0C1123B343B5F665F
%665F665F6660FFAF7CC05106060535353B343B0606052E06060506060C0C
%3535605F8A5F0C050C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C060606050605060506050605060506
%0506050605060506050605060506050605060506000500050006050627C0
%7435123535603B605F603B603B60AFFF9EC0924B060605353B3B0C060506
%0506062E2E5F5F605F663B3B35660C060506050605060506050605060506
%05060506050605060506050605060506050605060506050605060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606050605
%06050605060675C0C1343B343B5F6660665F66606660CFC1C0BABAB46F06
%0C062E0606062F2EFD045F605F5F353B345F353B6635050C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%060606050606060506060605060606050606060506060605060606050606
%0605060605000606060506050527C0C07B123B12603B663C663B665EA6BA
%C0C0BBB5BCBB28050605062E5F5F5F355F343412351235123B83A8126635
%060506060605060606050606060506060605060606050606060506060605
%0606060506060605FD05060C0606060C0606060C0606060C0606060C0606
%060C0606060CFD04060506060C06060506050674C0C09F575E5E835F8382
%A69EFD04C0BBBBBCBBCA76FD04065F3B3B343412353434343B343B125F84
%3B3B660606060C0606050C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0605060506050605060506050605060506
%050605060506050605060506050605050506050605060506000674C0C0C0
%BAC0C0C0BAC0BAC0BAC09F9AB5BBB5BBC3A105060506355F0C3412341234
%1234123512848435123B5F2E050605060505000605060506050605060506
%0506050605060506050605060506050605060506050606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C05060506050605
%06060605064B9FFD08C0C1C9AEA7B5BCBBBCB5FFA70C060C06595F353435
%34353435123B3B3BA85F343B358A2F06060C060605060506060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C060606050606
%060506060605060606050606060506060605060606050606060505050600
%060606050606060506002D57827B7B7BA7A8AF8B6075BBB5BCB5C2FF7D0C
%0605062E5FFD04341234125935FF83845F8412355F350506050605060506
%050605060606050606060506060605060606050606060506060605060606
%05060C0606060C0606060C0606060C0606060C0606060C0606060CFD0406
%050605FD05060506050CFD040600060C3B133B3B607C7C123B7CBCB5BCFF
%CA51350606052F5F3B34351234123483FFAEFFA8AE353B34603506060605
%060506060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C060606050605060506050605060506050605060506050605060506
%050605060006060600060506000500050006050600060505000C0C0C054B
%B476121934A0CAFF763412060506055F3434128334345959A8FF5F5F1235
%12353B600506000505060006050605060506050605060506050605060506
%05060506050605060506050605060C0606060C0606060C0606060C060606
%0C0606060C0606060C060605FD05060506050C0606050606060506060C06
%0605FD04066FB4A0593B196058353B350606060C355F34A8845F59CF5984
%5F3B343B343B345F60350506050C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060506060605060606050606
%060506060605060606050606060506050505060606000605050506050500
%2E27050006060600050506050606276F9A5234123B122E0506060605355F
%347DA8593459353435123B1235345F34662E060505000606060506060605
%060606050606060506060605060606050606060506060605FD05060C0606
%060C0606060C0606060C0606060C0606060CFD04060506060C0506050605
%0605060527C0C07406060C0505050C0606060C06060528060C060C060606
%0C06062E603435A8A859343435343B1284FFFFA83B6059050C0606050606
%524B764B28FD05060C0606060C0606060C0606060C0606060C0606060C06
%050605060506050605060506050605060506050605060506050605050005
%0506060500060505000598C0BAC098280005000605060506050605060506
%0506050605060506050C353B1259593412340C34123583AF84605F662E06
%050605060599B5BBB5BBB599050605060506050605060506050605060506
%050605060506050606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606050605060506060C060C06C1C0C1C0C0C0510506060C06
%06060CFD07060C0606060C0606065F3B3412343435345F3B605F665F6035
%592E06060C060606BCBBBBB5BCBBBCBBBC0606060C0606060C0606060C06
%06060C0606060C0606060C06060605060606050606060506060605060606
%0506060605060606050606060005000500060506050698FD06C051060605
%060606053535350C0605060506060605060506345F343434FD065F590C2E
%06060006050605060699B5BB93BBB5BBB5BBB57606060506060605060606
%05060606050606060506060605060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C060605060506050605056FCABCFD06C09F
%0606060C062E5F605F5F35350606060C0606060C06355F665F5F35592E52
%99BC4B0605FD04060C0606062EB5BBB5BB939AB5BCBBBCB52E0606060C06
%06060C0606060C0606060C0606060C060606050605060506050605060506
%05060506050605060506050605060506050600060506050600064BC3FFFF
%BCC09EFD04C09F05060506065F35FD055F060605060506050605342E2E06
%06050605BBB5760606050605060506050627BB93BB9328054CB5BBB5BB27
%06050605060506050605060506050605060506050605060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606050CFD040627
%C3FD04FFBBC1C0C0C0C1C0C1060C060635605F5F5F605F5F2E2E3435060C
%FD07060C060693BC990C27520606060C06060652BBBBB5BC060606BCBBBC
%BB520606060C0606060C0606060C0606060C0606060C0606060506060605
%060606050606060506060605060606050606060506060605060505050605
%0500BCFD04FFC2BBB5BBFD04C09E0605060535FD045F355F5F5F3435340C
%050606060506060605060599BAC198C0C02E06060506060627BBB5BBB576
%2776B5BCB5BB270606060506060605060606050606060506060605FD0506
%0C0606060C0606060C0606060C0606060C0606060C0606060CFD04060505
%0006059ACAFFFFFFC3BBBBBCB5BBC0C0C052FD05065F5F60FD065F343BFD
%09065198C1FD06C051FD04060C062893BCB5BBB5BCBBBCB5BC9906060C06
%06060C0606060C0606060C0606060C0606060C0605060506050605060506
%0506050605060506050605060506050605060506050605060576CAFFFFFF
%CABBB5BBB5BBB59951510506050605062E5F587D595F3B5F5F3B120C0506
%05282728050627C0BAC098C07475272805060506050674BB93BB93BBB5BB
%B5BBB54C0506050605060506050605060506050605060506050605060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%060676BCFFFFFFCFBCB5BCBBBCBBBC2806060C0606062E6FBCB5BCB5BC99
%7D5F5F3B3B06286FBCB5BBB5BB6F76747B512E060C0606060C060C050C98
%C0BABBB5BCBBBCBBBCBB760606060C0606060C0606060C0606060C060606
%0C0606060C06060605060606050606060506060605060606050606060506
%060605060606050606064BBBBBCAFFC2B5BBB5BCB5BB270606060506064C
%93BBB5BB93BBB5B5B59A5F3B1276B5BCC2CACACAC2BCB599050606060506
%0606007DA85974C098C0504C93BBB5BB934C050606060506060605060606
%05060606050606060506060605060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0628B5BBBBC2B5BCBBBCB5BC6F
%06060C06060676BBBBB5BCB5BBB5BCB5BBB5A03B7CB5BCC3CAC9FD04FFCA
%BB9AFD05060C062EA8FFCFCFC2C151120C2E98C0C02E0606060C0606060C
%0606060C0606060C0606060C0606060C0606060506050605060506050605
%060506050605060506050605060506050605060506050699FF9ABBB5BBB5
%BBB5BB6F0605060506054CB5BB93BB93BB93BB93BB93BB939A93BBB5BBB5
%B5B5BCCAFFFFCAB59305060506050653FFA8CFA8FFA87D123B0C9EC0C005
%0605060506050605060506050605060506050605060506050605060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060CFD04066F
%CFFFFFBCBBBBBCBBBC932E0606060C062893BCBBBBB5BCBBBBB5BCBBBBB5
%BCB5BCBBBCBBBCBBBCB5BBC3FFFFCAB5520606060C062FA7FFFFFFCAFF83
%343559C0C0C02E0606060C0606060C0606060C0606060C0606060C060606
%0C0606060506060605060606050606060506060605060606050606060506
%0606050606064BCAFFFFC3BB93BBB5BBB52805060606050627BB93BB93BB
%93BB93BB93BB93BB93BBB5BBB5BCB5BBB5BCB5BBC9FFFFBC6F0606060506
%4BC09EC9A8FFA835125FFFFFC8C105060606050606060506060605060606
%050606060506060605FD05060C0606060C0606060C0606060C0606060C06
%06060C0606060CFD04064BC9FFFFCABB93BBB5A0BC7C0606060C06060676
%BBBBB5BCB5BBB5BCB5BBB5BCB5BBB5BCBBBCB5BCBBBCB5BCB5C2FFFFC399
%060C060651C0C0C0742E5383123BA8FD04FF84280C0606060C0606060C06
%06060C0606060C0606060C0606060C060506050605060506050605060506
%0506050605060506050605060506050605BBCAFFCABC93BBB4A03B603B2E
%0506050605064BBB93BB93BB93BB93BB93BB93BB93BBB5BBB5BBB5BBB5BB
%B5BBB5FFFFC99306050627C098C0740500050C3434FD07FF050605060506
%050605060506050605060506050605060506050606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C279AC3C3B5BBB5C25F
%66608A2F06060C06060676BBBBB5BCBBBBB5BCBBBBB5BCBBBBB5BCBBBCBB
%BCBBBCBBBCBBBCCAFFC3BB060651C0BAC098280606063B342E2EA8FD04FF
%7D050606060C0606060C0606060C0606060C0606060C0606060C06060605
%060606050606060506060605060606050606060506060605060606050C34
%99B5BBB593345F5F603B2F0506050606064BBB93BB93BB93BB93BB93BB93
%BB93BBB5BCB5BBB5BCB5BBB5BCB5CAFFC9930605C0BAC09827050605060C
%34050526C1C8FFFF2E000606060506060605060606050606060506060605
%06060605060C0606060C0606060C0606060C0606060C0606060C0606060C
%06060652C07B343B3576B5BB270C595F3B3B34350606060C0652B5BCB5BB
%B5BCB5BBB5BCB5BBB5BBBBBCB5BCBBBCB5BCBBBCB5BCCAFFC3990651BAC0
%C02700FD050605060651C0C075590605050C0606060C0606060C0606060C
%0606060C0606060C06060605060506050605060506050605060506050605
%0605060506050605064BC0C09F3413064C4B0605060C3412353435060605
%0627BB93BB93BB93BB93BB93BB93BB93BBB5BBB5BBB5BBB5BBB5BBB5CAFF
%C26F0674C0BA75000505060506000605064AC0C051000600050506050605
%060506050605060506050605060506050605060C0606060C0606060C0606
%060C0606060C0606060CFD04060506060C75C0C0C72D06060C0606063534
%353435353B0C0C062EB5BCBBBBB5BCBBBBB5BCBBBBB5BCBBBCBBBCBBBCBB
%BCBBBCBBBCFFFFBB76067BC0C10606050605060506060627BCBBBC6F2805
%06050C0606060C0606060C0606060C0606060C0606060C06060605060606
%05060606050606060506060605060606050605050005050605064BC0C0C0
%0506050606060C340C340C0C123B120C0599B5BB93BB93BB93BB93BB93BB
%93BBB5BBB5BCB5BBB5BCB5BBBBFFCABB27067DA705060505050605060506
%0699B5BCB5BB4B0600050506060605060606050606060506060605060606
%05FD05060C0606060C0606060C0606060C0606060CFD04060506050CFD04
%06279F982E0606060C062E342E2E3B06060C3B340D4BBBB5BCB5BBB5BCB5
%BBB5BCB5BBB5BCBBBCB5BCBBBCB5BCB5C3FFC39306067E06050506050605
%0606060528BBBC4B9ABB9A05060505050C0606060C0606060C0606060C06
%06060C0606060C0605060506050605060506050605060506050605060505
%00060506050605060506050605060506050606340C063434050606350C28
%93BB93BB93BB93BB93BB93BB93BBB5BBB5BBB5BBB5BBB5BBCAFFB5700506
%00050506050500060506000500BCB59993BB6F0500060505000605060506
%0506050605060506050605060506050606060C0606060C0606060C060606
%0C0606060C06060506060C06060506060C0606060C0606060C060C343506
%2E34350606062E069AB5BCBBBBB5BCBBBBB5BCBBBBB5BCBBBCBBBCBBBCBB
%BCBCFFC3BB06060506060C060C0506060C0506050699BCB5BCBB4C050606
%0605FD04060C0606060C0606060C0606060C0606060C0606060506060605
%060606050606060506060605060505000605050006060605060606050606
%06050606340C060534340C0506050627BB93BB93BB93BB93BB93BB93BBB5
%BCB5BBB5BCB5BBB5CAFFBB4B0605050006060605060006FD0405009EBAC1
%6F2800050506060600060606050606060506060605060606050606060506
%0C0606060C0606060C0606060C0606060C0606060C060605060506060CFD
%0C062E3406060C35FD06066FBB93BCB5BBB5BCB5BBB5BBBBBCB5BCBBBCB5
%BCBBBCFFC3B52806060505050C060605060506050605067CC7740605FD05
%060505050C0606060C0606060C0606060C0606060C060606050605060506
%0506050605060506050605060506050605050006050605060006060C0606
%05060506002E340C0506050605060506052893BB93BB93BB93BB93BB93BB
%B5BBB5BBB5BBB5BBC9CAB5520506050500050506050600050505000500A8
%530605050006050500050006050605060506050605060506050605060506
%05060C0606060C0606060C0606060C0606060C0606060C06060506050C06
%0605529AC3A17DA1CA590606060C34FD05060C0606060C0676B5BCBBBBB5
%BCBBBBB5BCBBBCBBBCBBBCBBBCC2FFBBBC0606060C060605060506060605
%0606060528530C0606050C050605060506060C0606060C0606060C060606
%0C0606060C06060605060606050606060506060605060606050606060506
%060600050505004CB5BBB5BBC0CFFFC928060506062E2E2F060605060606
%05060699B5BB93BB93BB93BB93BBB5BBB5BCB5BBB5CABCBB270606060506
%05050005000505060506062E05060506000600050000F806060605060606
%05060606050606060506060605FD05060C0606060C0606060C0606060C06
%06060C0606060C06060506052893BBBB9A6FC0C0C8C159052E2E5F3B3B35
%845906060CFD040628BBB5BCB5BBB5BCB5BBB5BCBBBCB5BCBBC3C2BB4C06
%060C0606052F595952595206000605064B2E05060506002E537D537D2EFD
%04060C0606060C0606060C0606060C0606060C0605060506050605060506
%0506050605060506050605060506050605064BBBB576060698C0C0C17D35
%343B12351235125F2E0605060506050627BB93BB93BB93BB93BBB5BBB5BB
%B5BBB5BB6F060506050605062EFFCAFFCAFF050500050075000500050005
%59FD04FFA80006050605060506050605060506050605060506050606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0676B5BC0606
%062E515152C2A713062E060C123B3560060C0606060C06064BBCBBBBB5BC
%B5BBB5BCBBBCBBBCBBBC930C0606060C06060559CFFFCAFFA82E060C0527
%74280506060C057EFD04FF7EFD04060C0606060C0606060C0606060C0606
%060C06060605060606050606060506060605060606050606060506060605
%066FBB760C050605060C3527BC530605060506343B592805060506050605
%06279993BB93BB6F4C6FBCB5BBB5BC4B0605060506050605062EFFCACFA8
%CF06060506279800060606050659FD04FFA8050606060506060605060606
%050606060506060605060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606069ABB76FD04063535060627C32F060651989F9EC1989F
%989F989F989F989F98C198C1989F749F98C1C0C1989F9E9F98C19E9F98BC
%98A0A8FFCAFFA82E060600519805050C0606057EFD04FF7E06060C060606
%0C0606060C0606060C0606060C0606060506050605060506050605060506
%05060506050605060506050605066FBB762E52767CA6757C7C7CBBC32E07
%51C0BAC098C0BAC098C0BAC098C0BAC098C098C098C0C0C0BAFD0BC0B5C0
%A0FFA8CFCACA050500054AC000050006050553FD04FFA805060506050605
%0605060506050605060506050605060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606069ABBC2999F7B7C51755175517CBBC8A0C1
%BAC0BAC1C0C0BAC1C0C0BAC1C0C0BAC1C0C0BAC1C0C0C0C1C0C0C0C1C0C0
%C0C1C0C0C0BCBAC2CAFFCAFFA8280506069F980600515106007EFD04FF84
%06060C0606060C0606060C0606060C0606060C0606060506060605060606
%05060606050606060506060605FD04062E75C198BB76060C35FD0606054C
%C22E74C098C1A7CFA7C198C098C098C098C098C098C098FD0FC0B5C09959
%345F595905060606989F0575C05100054BC3BCC2BC760506050606060506
%0606050606060506060605FD05060C0606060C0606060C0606060C060606
%0CFD05067CC0C12D52B5A1353506062E5F5F842F06059A5951BAC1CAFFCA
%FFCAC098C0C0C098C0C0C098C0C0C0BAFD0EC0BBBAA012341234120C0606
%27C098C1C0C005060676B5BBB5BB6FFD04060C0606060C0606060C060606
%0C0606060C0605060506050605060506050605060506050605060506059F
%C099050627B59A5905060C3BA8FFA8AE2E0627C375C09FFFA8CFA8FF9EC0
%98C098C098C098C098C098C098C0C0C098C0C0C098C0C0C098C0B5C07534
%1234123405060551BAC0BAC0980605064BBBB5BBB5760506050605060506
%050605060506050605060506050606060C0606060C0606060C0606060C06
%06060C0606067BC0C10606062893C253060C3B34AEFFFFFFAE06069AC8BA
%C8FFFFCAFFCAC1BAC1C0C0BAC1C0C0BAC1C0C0C0C1C0C0C0C1C0C0C0C1C0
%C0C0C1C0BCBAA03435343B340C060675FD04C07B060C0676BBBCBBBC6F0C
%0606060C0606060C0606060C0606060C0606060C06060605060606050606
%0605060606050606060506062898C0750605060699B57D063412343484A8
%FF5F2F004CBBC098C9A9FFA8C998C098C098C098C098C098C098FD0FC0BB
%C07535123412340606059FC09874C0510605064BBBB5BCBB760506060605
%06060605060606050606060506060605060C0606060C0606060C0606060C
%0606060CFD040627C0BAA00606060D7CBB9A2F0C343435123B343B2F0606
%C1C0C098C8C8C898C0C0C098C0C0C098C0C0C098FD10C0BCC0A012353434
%340C062E98750675C02E06060676BBBCB5BC6F06060C0606060C0606060C
%0606060C0606060C06060605060506050605060506050605060506050605
%06052898C09E5900062E5293BC2E0C343412341235342E053575C098C098
%C098C098C098C098C098C098C098C098C0C0C0BAC0C0C0BAC0C0C0BAC0C0
%C0B5C075341234123405060506050651C0050605064BBBB5BBB576050605
%060506050605060506050605060506050605060C0606060C0606060C0606
%060C0606060C0606060C0675C0C0C1590C590676B5A10C353435343B3535
%0635197CC0C1BAC1C0C1BAC1C0C198C1C0C198C1C0C198C1C0C1C0C1C0C1
%C0C1C0C1C0C1C0C1C0BCC0A034353435342E0606060C0675980C06060676
%BBBCBBBC6F06060C0606060C0606060C0606060C0606060C060606050606
%060506060605060606050606060506060605060699BAC0C1A72E0605B5BB
%2F05341234342E002E84A8A7CAA7CAA7CFA7CAA7CAA7CAA7CAA7CAA7CAA7
%CAA7CAA8CFA8FFA8CFA8FFA8CFA8FFA8CFA7FFA13412341234A82F050605
%067575FD04064BBCB5BBB576060605060606050606060506060605060606
%05FD05060C0606060C0606060C0606060C0606060CFD05067598C0C0C17C
%599ABC7DFD06060C35FFCAFFCAFFCAFFCAFFCAFFCAFFCFFFCAFFCFFFCAFF
%CFFFCAFD11FF3434343534FF2FFD04069F5106060C0676BBBCBBBC6FFD04
%060C0606060C0606060C0606060C0606060C060506050605060506050605
%06050605060506050605060506069998C098C0C0C19FC2765252522E587C
%82A7FFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8FD11FFA83412
%341234A85300060506502E0506050693BBB5BBB54C050605060506050605
%0605060506050605060506050606060C0606060C0606060C0606060C0606
%060C0606060C0652B5BCBBC175C1C0C0C0C1C0C1C0C1C0C0C0CFCFFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFD11FF58343435128453FD
%0406520606060C28BCBBBCBBBC280C0606060C0606060C0606060C060606
%0C0606060C06060605060606050606060506060605060606050606060506
%27BBB5BB9A06052E4BBBBAC1749F749F7575A7FFA8CAA8CFA8CAA8CFA8CA
%A8CFA8CAA8CFA8CAA8CFA8CFAFFFFFFFAFFFFFFFAFFFFFFFAFFD04FF8412
%341234342E05060606270606060576BBBBB5BC9306050606060506060605
%060606050606060506060605060C0606060C0606060C0606060C0606060C
%0606060C0606060C6FBB9952FD04064BBBBB8412350C06062F2E5F5F835F
%6059BC7CBC7C60FD0B5F605F8A60605F8A60605F8A60605F8A608A5FFD04
%343B2EFD040628060C062EB5BCBBBCBB760606060C0606060C0606060C06
%06060C0606060C0606060506050605060506050605060506050605060506
%05060506050634352E060006050C75B599830C0605060506345F355F355F
%937C937C3B5F355F355F355F3B5F35603B603B663B603B663B603B663B60
%3B663B663434123412342E0605060506054C93BBB5BBB5BB050605060506
%0506050605060506050605060506050605060C0606060C0606060C060606
%0C0606060C0606060C0606060C0635125F59592E59353599BBBC7DFD0506
%FD045F6059BB7CBC7C605F605F5F5F837C827C827C8382A7828382A78283
%82A7828382A78283828334353435343534342E524B9ABBBCBBBCBBBC6F0C
%0606060C0606060C0606060C0606060C0606060C06060605060606050606
%060506060605060606050606060506060605060C34123434351234122E93
%BBBBA12E0C062E595F5F5F3B83937C937C3B5F355F5F5F7BC0BAC0BAC0C0
%C0BAC0C0C0BAC0C0C0BAC0C0C0BAC0C0C09F5F123412343434123499BBB5
%BCB5BBB5BC9306050606060506060605060606050606060506060605FD05
%060C0606060C0606060C0606060C0606060C0606060CFD04060C34343B34
%340C2E062893BBB5BC9AC2BC833B5F5F5F58BC7CBB7C60FD045F3BA0BAC0
%C0C0BAC1C0C0C0C1C0C0C0C1C0C0C0C1C0C0C0C1C0A6605F343434353434
%12A0BBBCB5BCBBBC932E0606060C0606060C0606060C0606060C0606060C
%0606060C0605060506050605060506050605060506050605060506050605
%060506060C060C0506050605066FBBB5B5B4BB585F355F3B59937D937C3B
%5F355F355F585F585F585F5F835F5F5F835F5F5F835F5F5F835F5F5F835F
%605F2E34341234123475BBB5BBB5BB6F0605060506050605060506050605
%0605060506050605060506050606060C0606060C0606060C0606060C0606
%060C0606060C0606060CFD07060C0606060C289A93BC995F5F665F6659BC
%7CBB7C665F5F5F665F605F665F605F666666606666666066666660666666
%60666666608A0C2E2E35343B34C2BBBCBBBC4C06060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060506060605060606050606
%060506060605060606050606060506060605060606050606060506060605
%062E352E3534586F586F52343534352E3534352E3534FD1535340C050605
%2E0C2E4B764B280506060605060606050606060506060605060606050606
%060506060605060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060CFD060605FD04060C06060506
%060605060606050606060506060605060606050606060506060605FD0406
%0CFD0B060C0606060C0606060C0606060C0606060C0606060C0606060C06
%060605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C060606050606060506060605060606
%050606060506060605060606050606060506060605060606050606060506
%060605060606050606060506060605060606050606060506060605060606
%050606060506060605060606050606060506060605060606050606060506
%0606050606060506060605060606050606060506060605FD05060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%0506050605060506050606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C06060605060606050606060506
%060605060606050606060506060605060606050606060506060605060606
%050606060506060605060606050606060506060605060606050606060506
%060605060606050606060506060605060606050606060506060605060606
%05060606050606060506060605060606050606060506060605060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%0506050605060506050605060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060CFD07060CFD0F06
%0CFD0B060CFD0F060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C06060605060606050606060506060605060606
%050606060506060605060606050606060506060605060606050606515175
%5151052E5175512E51755175517527515175055174752775275151755106
%05757551502E065174752775270606060506060605060606050606060506
%06060506060605060606050606060506060605FD05060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060CFD
%040675FD04C0C175C0C0C051C6C0C0C0C6C07574C6C075FD05C09F98C0C0
%9F06C1C0C6C0C65175FD05C075060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C0606060C0606060C060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%05060506052EC0C0059FC05174C0510674C0272898C04B75C02E74C0982E
%51C0742EC0C00575C09E279FC07574C0982850C051060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%06060C0606060C0606060C0606060C0606060C0606060C0606060C060606
%0C0606060C0606060C0606060C27C0C07BC0C0279FC09F75C1C051067BC0
%C1C09F0675C0C09E9F512E28C0C02E9EC05107277B277BC0C09E9F512E06
%0C0606060C0606060C0606060C0606060C0606060C0606060C0606060C06
%06060C0606060C0606060506060605060606050606060506060605060606
%0506060605060606050606060506060605060606052EC0C0989F270674C0
%989F98C05106059FC0C00506057598C0C0C04B2EC0C027C0C075FD040605
%7598C0C0C027060506060605060606050606060506060605060606050606
%0605060606050606060506060605060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C060627C0
%C0FD04069FC075069FC052060651C67506069FC05151C0C09F27C1C02E98
%C09E2E279F279F985251C0C09F0606060C0606060C0606060C0606060C06
%06060C0606060C0606060C0606060C0606060C0606060506050605060506
%050605060506050605060506050605060506050605060506050605060506
%050605060575C0C051060551C0C09851C0C0980605C0C0C0270698FD05C0
%7475C0C0742DFD05C075FD06C05006050605060506050605060506050605
%06050605060506050605060506050605060506050605060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606519F755106062D9F757B2D9F759F062E759F752E067B7551
%749F750C519F75750652759F7452067B5176989F510C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060506060605060606050606060506060605060606050606060506060605
%060606050606060506060605FD0706050606060506060605FD0706050606
%0605FD130605060606050606060506060605060606050606060506060605
%060606050606060506060605FD05060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%FD0B060C0606060C0606060C0606060C0606060CFD0F060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%06050605060506050606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060506060605060606050606
%060506060605060606050606060506060605060606050606060506060605
%060606050606060506060605060606050606060506060605060606050606
%060506060605060606050606060506060605060606050606060506060605
%060606050606060506060605060606050606060506060605060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%0606060C0606060C0606060C0606060C0606060C0606060C0606060C0606
%060C0606060C0606060C0606060C0606060C0606060C0606060C0606060C
%060606050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%060506050605060506050605060506050605060506050605060506050605
%0605060506050605060506
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-04-04T16:04:56+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-04-04T16:04:56+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-04-04T16:04:56+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4hm/ebdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVWuxUbCpO2AlICstrdGxjvjERbSO0Sy9uagEr9xymOogZnHf&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:DFF06CDEF4BBE3118916C7DABCA38791</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:DFF06CDEF4BBE3118916C7DABCA38791</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:DCF06CDEF4BBE3118916C7DABCA38791</stRef:instanceID>
            <stRef:documentID>xmp.did:DCF06CDEF4BBE3118916C7DABCA38791</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0133668179BAE31182FCD901002658C0</stEvt:instanceID>
                  <stEvt:when>2014-04-02T23:18:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DCF06CDEF4BBE3118916C7DABCA38791</stEvt:instanceID>
                  <stEvt:when>2014-04-04T16:02:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DFF06CDEF4BBE3118916C7DABCA38791</stEvt:instanceID>
                  <stEvt:when>2014-04-04T16:04:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>56</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>101</xmpG:green>
                           <xmpG:blue>34</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
[1 0 0 1 0 0 ]ct
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 .227451 .360784 rgb
f
192.071 74.7349 mo
192.354 76.3257 192.813 78.7041 193.463 81.8687 cv
193.764 82.9282 194.071 83.9805 194.377 85.0239 cv
194.605 86.4233 194.246 87.3501 193.294 87.8018 cv
192.696 88.0898 192.124 88.1104 191.586 87.8682 cv
191.125 87.6636 190.783 87.3228 190.554 86.8457 cv
189.889 85.4409 189.371 83.5898 189.005 81.2837 cv
188.456 77.8335 188.136 75.9287 188.049 75.5664 cv
187.664 74.1133 187.287 72.6558 186.91 71.1963 cv
186.422 69.1743 186.261 67.75 186.425 66.9199 cv
186.592 66.0928 187.018 65.5151 187.709 65.186 cv
188.498 64.8066 189.27 64.9302 190.02 65.5518 cv
190.729 66.1392 191.837 67.5039 193.343 69.6436 cv
194.805 71.7241 196.534 73.8877 198.528 76.1372 cv
198.292 73.0952 197.861 69.8306 197.248 66.3491 cv
196.55 63.0146 li
196.428 61.5532 196.854 60.5874 197.833 60.1206 cv
198.776 59.6714 199.82 60.0547 200.967 61.2739 cv
201.432 61.7632 202.157 62.751 203.129 64.2324 cv
205.391 67.6836 207.528 70.5454 209.547 72.8159 cv
211.599 75.125 212.673 76.396 212.788 76.6304 cv
213.03 77.1436 213.028 77.6704 212.789 78.208 cv
212.559 78.6997 212.202 79.0635 211.723 79.2915 cv
210.777 79.7417 209.756 79.4004 208.654 78.2666 cv
206.421 75.4702 li
205.263 74.106 203.749 72.0815 201.87 69.3926 cv
202.033 70.7407 202.26 72.8716 202.543 75.7881 cv
202.9 78.5488 li
203.031 79.6484 203.066 80.584 203.01 81.3525 cv
202.938 82.3784 202.489 83.0903 201.665 83.48 cv
200.846 83.8662 199.998 83.6841 199.105 82.9297 cv
197.226 80.8613 li
195.492 78.9629 193.773 76.9209 192.071 74.7349 cv
cp
0 .156863 .25098 rgb
f
221.338 56.395 mo
220.56 56.7681 219.783 56.6333 219.018 55.9848 cv
218.665 55.6782 218.382 55.5274 218.167 55.5322 cv
218.008 55.5307 217.648 55.6641 217.094 55.9321 cv
216.002 56.4502 215.153 57.8999 214.529 60.2778 cv
213.662 63.6103 213.718 66.3081 214.706 68.3799 cv
215.155 69.3233 215.859 69.9819 216.808 70.3564 cv
217.768 70.7304 218.69 70.7065 219.569 70.289 cv
220.429 69.8765 221.189 69.2402 221.864 68.3662 cv
222.095 68.0537 222.551 67.313 223.229 66.1514 cv
223.689 65.3804 224.096 64.9082 224.441 64.7466 cv
224.963 64.4976 225.494 64.4756 226.041 64.6841 cv
226.547 64.8764 226.906 65.2037 227.129 65.6655 cv
227.369 66.1738 227.357 66.728 227.09 67.3237 cv
225.662 70.4702 223.716 72.6323 221.25 73.8071 cv
219.3 74.7383 217.318 74.814 215.297 74.0337 cv
213.358 73.2724 211.95 71.9688 211.065 70.1133 cv
209.68 67.21 209.54 63.6425 210.637 59.4097 cv
211.571 55.8116 213.167 53.4824 215.417 52.4097 cv
215.797 52.2275 216.152 52.0752 216.473 51.9541 cv
216.789 51.833 217.08 51.7402 217.34 51.6836 cv
217.542 51.1309 217.914 50.7246 218.449 50.4668 cv
219.333 50.0478 220.122 50.2959 220.81 51.209 cv
221.303 51.8657 221.787 52.6792 222.25 53.6499 cv
222.456 54.083 222.516 54.541 222.435 55.0147 cv
222.326 55.6411 221.964 56.0986 221.338 56.395 cv
f
231.586 46.3833 mo
231.449 46.4453 231.23 46.5235 230.92 46.6162 cv
230.615 46.7036 230.402 46.7778 230.275 46.8379 cv
227.881 47.9682 li
227.678 48.0669 227.379 48.2387 226.986 48.4932 cv
226.592 48.7432 226.289 48.9185 226.076 49.0195 cv
226.018 49.0459 225.923 49.0787 225.802 49.1123 cv
225.673 49.146 225.584 49.1758 225.525 49.2027 cv
225.035 49.4355 224.609 49.395 224.247 49.082 cv
224.019 48.8829 223.788 48.5219 223.535 48.0025 cv
223.048 46.9927 222.873 46.0322 222.999 45.1357 cv
223.093 44.4463 223.407 43.6504 223.927 42.7559 cv
224.43 41.9228 224.932 41.0943 225.431 40.2735 cv
225.99 39.2388 226.08 38.3276 225.703 37.5376 cv
225.604 37.3301 225.337 37.208 224.899 37.1684 cv
224.461 37.125 224.078 37.1856 223.754 37.336 cv
223.182 37.6123 222.69 38.1582 222.292 38.9785 cv
221.892 39.7969 221.575 40.2618 221.336 40.3735 cv
221.048 40.5126 220.762 40.5655 220.48 40.5239 cv
220.126 40.479 219.877 40.3022 219.73 39.9951 cv
219.571 39.664 219.573 39.3174 219.727 38.9487 cv
220.109 38.0551 220.477 37.3594 220.84 36.8574 cv
221.361 36.1397 221.999 35.5991 222.751 35.2412 cv
223.69 34.7915 224.655 34.6367 225.642 34.771 cv
226.777 34.9234 227.557 35.4556 227.99 36.3667 cv
228.432 37.2871 228.596 38.1718 228.48 39.0205 cv
228.395 39.6943 228.107 40.4424 227.625 41.2725 cv
227.15 42.0249 226.674 42.7739 226.197 43.5205 cv
225.486 44.6845 225.303 45.7144 225.64 46.6123 cv
225.917 46.4312 226.338 46.1792 226.891 45.8535 cv
228.018 45.2407 228.832 44.8208 229.334 44.5805 cv
229.799 44.3599 230.307 44.2407 230.859 44.2216 cv
231.543 44.2041 231.973 44.3896 232.164 44.7803 cv
232.297 45.0645 232.312 45.3565 232.215 45.6626 cv
232.109 45.9937 231.9 46.229 231.586 46.3833 cv
f
367.723 250.068 mo
366.123 249.394 364.252 249.397 362.582 250.238 cv
360.32 251.377 359.07 253.723 359.215 256.098 cv
358.76 256.316 358.291 256.529 357.812 256.738 cv
357.15 253.949 356.303 251.072 355.273 248.139 cv
358.424 242.801 360.82 237.529 362.385 232.623 cv
367.42 235.481 370.475 239.105 370.578 243.125 cv
370.637 245.559 369.617 247.906 367.723 250.068 cv
350.471 280.197 mo
349.965 280.453 349.434 280.647 348.889 280.795 cv
348.887 280.791 li
347.762 281.094 346.559 281.17 345.297 281.041 cv
345.248 281.035 li
344.957 281.004 344.66 280.959 344.361 280.906 cv
344.262 280.887 li
343.975 280.832 343.687 280.77 343.396 280.695 cv
343.25 280.658 li
342.969 280.582 342.687 280.498 342.402 280.408 cv
342.219 280.346 li
341.943 280.254 341.666 280.152 341.387 280.045 cv
341.17 279.957 li
340.898 279.846 340.625 279.728 340.35 279.603 cv
340.111 279.492 li
339.84 279.363 339.566 279.23 339.293 279.088 cv
339.039 278.953 li
338.768 278.809 338.496 278.658 338.221 278.498 cv
337.961 278.346 li
337.686 278.18 337.41 278.012 337.131 277.834 cv
336.891 277.676 li
336.605 277.488 336.318 277.299 336.031 277.098 cv
335.824 276.949 li
335.525 276.734 335.225 276.516 334.922 276.287 cv
334.783 276.18 li
334.457 275.93 334.131 275.674 333.803 275.406 cv
333.789 275.395 li
333.43 275.102 333.068 274.797 332.709 274.48 cv
333.441 273.895 334.176 273.285 334.908 272.654 cv
334.959 272.611 li
336.404 271.365 337.846 270.035 339.277 268.625 cv
339.498 268.406 li
340.193 267.715 340.887 267.012 341.576 266.285 cv
346.961 265.629 351.988 264.559 356.488 263.16 cv
357.041 271.496 355.066 277.883 350.471 280.197 cv
331.102 268.932 mo
330.336 269.541 329.572 270.123 328.809 270.674 cv
328.809 270.676 li
328.799 270.666 li
327.73 269.514 326.674 268.283 325.633 266.975 cv
325.627 266.965 li
325.666 266.965 li
326.578 266.998 327.498 267.016 328.424 267.023 cv
328.557 267.025 328.685 267.027 328.818 267.027 cv
329.795 267.029 330.779 267.025 331.771 267 cv
332.348 266.986 332.916 266.961 333.488 266.937 cv
332.734 267.598 331.98 268.227 331.227 268.828 cv
331.102 268.932 li
323.984 261.799 mo
323.236 261.75 322.492 261.695 321.758 261.627 cv
321.742 261.603 li
321.346 261.004 320.957 260.391 320.57 259.769 cv
320.447 259.572 320.328 259.369 320.205 259.17 cv
319.936 258.727 319.668 258.279 319.402 257.828 cv
319.27 257.6 319.137 257.369 319.004 257.141 cv
318.742 256.68 318.482 256.215 318.225 255.746 cv
318.111 255.537 317.994 255.33 317.881 255.117 cv
317.518 254.439 317.158 253.756 316.807 253.061 cv
316.508 252.469 316.219 251.877 315.939 251.287 cv
315.85 251.102 315.768 250.916 315.68 250.73 cv
315.492 250.328 315.303 249.924 315.121 249.52 cv
315.019 249.293 314.924 249.066 314.824 248.84 cv
314.666 248.479 314.506 248.117 314.355 247.756 cv
314.252 247.516 314.156 247.273 314.057 247.031 cv
313.914 246.688 313.773 246.346 313.637 246.002 cv
313.539 245.752 313.445 245.504 313.348 245.254 cv
313.221 244.922 313.094 244.588 312.971 244.258 cv
312.877 244.004 312.787 243.752 312.695 243.5 cv
312.58 243.176 312.465 242.85 312.354 242.525 cv
312.266 242.27 312.182 242.016 312.098 241.764 cv
311.992 241.445 311.889 241.129 311.789 240.812 cv
311.707 240.555 311.627 240.297 311.549 240.041 cv
311.455 239.732 311.363 239.424 311.273 239.119 cv
311.199 238.859 311.125 238.602 311.055 238.346 cv
310.971 238.045 310.889 237.744 310.811 237.443 cv
310.742 237.184 310.674 236.926 310.609 236.67 cv
310.537 236.377 310.467 236.086 310.398 235.797 cv
310.336 235.537 310.273 235.277 310.217 235.021 cv
310.154 234.738 310.094 234.457 310.037 234.176 cv
309.98 233.916 309.926 233.654 309.875 233.396 cv
309.822 233.127 309.775 232.859 309.725 232.59 cv
309.678 232.328 309.629 232.066 309.586 231.805 cv
309.543 231.547 309.504 231.293 309.465 231.035 cv
309.426 230.772 309.383 230.506 309.348 230.246 cv
309.314 230.004 309.287 229.766 309.258 229.525 cv
309.225 229.258 309.189 228.986 309.162 228.721 cv
309.139 228.51 309.123 228.299 309.102 228.088 cv
309.076 227.801 309.047 227.514 309.025 227.232 cv
309.016 227.096 309.012 226.963 309.002 226.828 cv
308.924 225.619 308.898 224.451 308.926 223.33 cv
308.93 223.115 li
308.939 222.791 308.961 222.475 308.978 222.158 cv
308.986 222.043 308.99 221.926 309 221.811 cv
309.021 221.512 309.051 221.221 309.08 220.93 cv
309.094 220.807 309.104 220.68 309.119 220.557 cv
309.15 220.273 309.191 220 309.232 219.725 cv
309.252 219.602 309.27 219.475 309.289 219.352 cv
309.334 219.086 309.385 218.824 309.438 218.563 cv
309.461 218.443 309.484 218.322 309.51 218.203 cv
309.566 217.947 309.627 217.697 309.691 217.451 cv
309.723 217.338 309.75 217.223 309.781 217.111 cv
309.85 216.865 309.924 216.627 310 216.393 cv
310.033 216.287 310.068 216.18 310.104 216.078 cv
310.184 215.844 310.27 215.615 310.357 215.393 cv
310.396 215.295 310.436 215.201 310.475 215.104 cv
310.568 214.883 310.666 214.666 310.768 214.455 cv
310.896 214.197 li
311.004 213.986 311.115 213.781 311.23 213.58 cv
311.365 213.357 li
311.488 213.156 311.613 212.961 311.746 212.772 cv
311.881 212.588 li
312.02 212.396 312.162 212.211 312.311 212.035 cv
312.437 211.893 li
312.598 211.711 312.76 211.535 312.93 211.367 cv
313.029 211.277 li
313.213 211.102 313.402 210.934 313.602 210.775 cv
314.045 210.424 314.518 210.113 315.025 209.855 cv
316.385 209.172 317.893 208.885 319.508 208.955 cv
319.527 209.838 319.732 210.73 320.156 211.572 cv
321.682 214.598 325.373 215.814 328.398 214.291 cv
328.953 214.012 329.443 213.658 329.871 213.252 cv
336.467 218.012 343.359 226.424 348.686 236.996 cv
349.838 239.281 350.861 241.564 351.764 243.824 cv
349.666 247.766 347.07 251.787 344 255.727 cv
342.424 257.748 340.793 259.652 339.135 261.435 cv
339.133 261.435 li
339.109 261.438 li
337.916 261.572 336.703 261.684 335.473 261.77 cv
335.375 261.773 li
334.148 261.859 332.906 261.92 331.648 261.949 cv
330.877 261.969 330.111 261.975 329.35 261.973 cv
329.086 261.973 328.824 261.969 328.562 261.967 cv
328.049 261.961 327.537 261.951 327.027 261.937 cv
326.758 261.93 326.488 261.922 326.217 261.91 cv
325.676 261.891 325.141 261.865 324.607 261.836 cv
324.4 261.822 324.191 261.813 323.984 261.799 cv
324.228 273.662 mo
322.363 274.734 320.541 275.605 318.791 276.262 cv
318.607 276.326 li
318.244 276.461 317.881 276.588 317.525 276.701 cv
317.42 276.736 317.318 276.764 317.215 276.795 cv
316.902 276.891 316.594 276.982 316.287 277.062 cv
316.16 277.096 316.035 277.125 315.91 277.156 cv
315.631 277.225 315.353 277.287 315.082 277.344 cv
314.941 277.373 314.805 277.396 314.666 277.422 cv
314.412 277.467 314.158 277.51 313.91 277.543 cv
313.764 277.563 313.619 277.58 313.473 277.598 cv
313.238 277.625 313.004 277.646 312.773 277.662 cv
312.625 277.672 312.477 277.68 312.33 277.686 cv
312.109 277.693 311.891 277.697 311.676 277.695 cv
311.527 277.693 311.379 277.691 311.232 277.686 cv
311.023 277.676 310.82 277.662 310.617 277.643 cv
310.473 277.629 310.326 277.617 310.184 277.6 cv
309.986 277.574 309.793 277.537 309.6 277.502 cv
309.461 277.477 309.32 277.453 309.184 277.424 cv
308.992 277.379 308.809 277.324 308.623 277.273 cv
308.492 277.234 308.361 277.201 308.234 277.158 cv
308.047 277.094 307.865 277.02 307.686 276.945 cv
307.57 276.898 307.449 276.853 307.336 276.801 cv
307.143 276.713 306.957 276.609 306.773 276.506 cv
306.68 276.453 306.584 276.41 306.492 276.354 cv
306.221 276.189 305.959 276.012 305.707 275.814 cv
305.35 275.535 305.023 275.228 304.719 274.896 cv
304.582 274.75 304.469 274.584 304.346 274.428 cv
304.187 274.232 304.027 274.043 303.887 273.832 cv
303.75 273.629 303.635 273.406 303.512 273.188 cv
303.408 273.004 303.299 272.82 303.207 272.627 cv
303.092 272.387 302.994 272.133 302.895 271.879 cv
302.842 271.742 302.789 271.605 302.74 271.465 cv
302.756 271.459 li
302.936 271.367 303.109 271.268 303.275 271.162 cv
303.447 271.045 li
303.551 270.973 303.656 270.9 303.756 270.824 cv
303.945 270.666 li
304.193 270.449 li
304.383 270.26 li
304.588 270.043 li
304.771 269.822 li
304.936 269.609 li
305.113 269.355 li
305.236 269.156 li
305.295 269.06 305.352 268.963 305.406 268.863 cv
305.49 268.693 li
305.545 268.58 305.6 268.465 305.65 268.35 cv
305.688 268.248 li
306.203 266.955 306.277 265.498 305.832 264.111 cv
305.863 264.119 li
306.82 264.381 307.803 264.625 308.803 264.855 cv
308.924 264.883 li
309.947 265.115 310.992 265.33 312.059 265.525 cv
312.1 265.531 li
314.268 265.93 316.52 266.254 318.844 266.496 cv
320.147 268.42 321.488 270.244 322.853 271.957 cv
322.871 271.98 li
323.309 272.529 323.75 273.066 324.191 273.592 cv
324.242 273.654 li
324.228 273.662 li
301.074 256.193 mo
300.916 256.107 li
300.605 255.943 300.299 255.779 300 255.609 cv
299.842 255.52 299.691 255.428 299.539 255.336 cv
299.34 255.219 299.141 255.1 298.947 254.98 cv
298.789 254.881 298.635 254.779 298.48 254.678 cv
298.305 254.561 298.129 254.445 297.957 254.326 cv
297.805 254.221 297.658 254.115 297.512 254.008 cv
297.348 253.889 297.188 253.77 297.031 253.648 cv
296.891 253.539 296.75 253.43 296.615 253.32 cv
296.463 253.197 296.316 253.072 296.17 252.945 cv
296.043 252.836 295.914 252.725 295.789 252.611 cv
295.645 252.478 295.506 252.344 295.365 252.209 cv
295.256 252.1 295.144 251.996 295.039 251.887 cv
294.871 251.717 294.717 251.541 294.563 251.367 cv
294.463 251.254 294.363 251.141 294.268 251.025 cv
294.098 250.82 293.932 250.613 293.777 250.402 cv
293.701 250.299 293.633 250.189 293.561 250.086 cv
293.455 249.93 293.35 249.775 293.25 249.617 cv
293.18 249.504 293.117 249.387 293.051 249.27 cv
292.965 249.119 292.881 248.967 292.803 248.814 cv
292.744 248.695 292.688 248.576 292.635 248.457 cv
292.562 248.303 292.498 248.147 292.438 247.99 cv
292.389 247.871 292.344 247.752 292.303 247.631 cv
292.246 247.469 292.197 247.305 292.15 247.139 cv
292.119 247.023 292.086 246.91 292.059 246.795 cv
292.014 246.611 291.982 246.426 291.951 246.24 cv
291.934 246.143 291.914 246.045 291.9 245.945 cv
291.863 245.66 291.838 245.373 291.83 245.084 cv
291.822 244.762 291.832 244.443 291.863 244.123 cv
291.9 243.865 li
291.93 243.635 291.957 243.402 292.006 243.176 cv
292.063 242.957 li
292.121 242.715 292.178 242.477 292.258 242.238 cv
292.357 241.977 li
292.438 241.754 292.516 241.531 292.613 241.313 cv
292.654 241.219 292.709 241.127 292.754 241.031 cv
292.855 240.822 292.953 240.611 293.072 240.404 cv
293.141 240.279 293.227 240.156 293.301 240.033 cv
293.41 239.859 293.512 239.684 293.629 239.51 cv
293.711 239.391 293.809 239.271 293.897 239.152 cv
294.023 238.98 294.145 238.807 294.283 238.635 cv
294.377 238.52 294.484 238.406 294.582 238.293 cv
294.729 238.119 294.871 237.947 295.031 237.777 cv
295.143 237.658 295.27 237.541 295.387 237.422 cv
295.545 237.26 295.699 237.098 295.869 236.939 cv
296 236.818 296.143 236.699 296.279 236.578 cv
296.451 236.426 296.615 236.273 296.795 236.123 cv
296.951 235.994 297.121 235.867 297.285 235.738 cv
297.457 235.604 297.625 235.465 297.805 235.332 cv
297.984 235.199 298.176 235.07 298.361 234.938 cv
298.541 234.812 298.713 234.686 298.898 234.563 cv
299.1 234.426 299.314 234.295 299.525 234.164 cv
299.707 234.049 299.881 233.93 300.068 233.816 cv
300.32 233.666 300.584 233.52 300.846 233.371 cv
301.002 233.281 301.152 233.189 301.314 233.102 cv
301.615 232.936 301.928 232.777 302.24 232.615 cv
302.373 232.549 302.5 232.479 302.635 232.412 cv
302.998 232.229 303.373 232.055 303.752 231.879 cv
303.842 231.838 303.926 231.795 304.018 231.754 cv
304.018 231.758 li
304.375 233.611 304.82 235.512 305.35 237.451 cv
305.367 237.512 li
305.9 239.455 306.518 241.434 307.223 243.439 cv
307.225 243.445 li
304.66 247.793 302.6 252.098 301.074 256.193 cv
308.064 245.74 mo
308.357 246.508 308.662 247.279 308.978 248.053 cv
309.025 248.166 li
309.312 248.867 309.613 249.57 309.92 250.277 cv
309.971 250.391 310.018 250.502 310.068 250.615 cv
310.348 251.246 310.637 251.877 310.932 252.51 cv
311.01 252.678 311.084 252.846 311.164 253.014 cv
311.529 253.785 311.906 254.559 312.295 255.332 cv
312.74 256.217 313.197 257.082 313.66 257.941 cv
313.727 258.064 313.795 258.186 313.863 258.309 cv
314.311 259.131 314.766 259.941 315.229 260.736 cv
315.203 260.734 li
314.674 260.637 314.154 260.537 313.639 260.43 cv
313.523 260.406 li
313.02 260.301 312.522 260.189 312.027 260.076 cv
311.902 260.045 li
311.412 259.93 310.93 259.811 310.453 259.686 cv
310.332 259.652 li
309.855 259.525 309.385 259.396 308.922 259.262 cv
308.816 259.229 li
308.35 259.092 307.889 258.951 307.437 258.803 cv
307.357 258.777 li
306.898 258.627 306.447 258.475 306.004 258.316 cv
305.957 258.299 li
305.504 258.137 305.059 257.967 304.623 257.795 cv
304.18 257.619 303.746 257.441 303.32 257.254 cv
303.471 256.723 303.635 256.186 303.809 255.645 cv
303.885 255.41 303.965 255.174 304.045 254.939 cv
304.238 254.373 304.439 253.807 304.656 253.232 cv
304.727 253.043 304.801 252.853 304.875 252.664 cv
305.094 252.102 305.326 251.537 305.568 250.967 cv
305.648 250.779 305.727 250.592 305.809 250.404 cv
306.1 249.74 306.406 249.068 306.729 248.395 cv
306.809 248.229 306.893 248.059 306.975 247.891 cv
307.322 247.178 307.682 246.461 308.064 245.74 cv
354.006 250.225 mo
354.768 252.748 355.361 255.205 355.785 257.562 cv
353.094 258.592 350.119 259.477 346.914 260.172 cv
347.272 259.727 347.629 259.285 347.982 258.83 cv
350.203 255.984 352.207 253.1 354.006 250.225 cv
354.135 213.691 mo
359.82 218.121 358.916 229.373 352.795 241.809 cv
351.996 239.957 351.135 238.096 350.197 236.236 cv
348.576 233.018 346.83 229.979 345.004 227.127 cv
349.463 227.797 353.533 228.834 357.064 230.158 cv
357.256 229.33 357.406 228.521 357.535 227.723 cv
353.342 226.52 348.67 225.613 343.66 225.09 cv
341.262 221.551 338.74 218.35 336.17 215.551 cv
343.463 211.498 350.078 210.525 354.135 213.691 cv
363.234 229.678 mo
365.66 220.281 364.787 212.559 360.033 208.854 cv
354.43 204.484 344.721 206.728 334.402 213.699 cv
333.408 212.695 332.41 211.75 331.412 210.873 cv
331.955 209.346 331.904 207.609 331.119 206.049 cv
329.594 203.023 325.9 201.805 322.877 203.33 cv
322.336 203.602 321.857 203.945 321.438 204.338 cv
317.252 202.596 313.367 202.36 310.176 203.969 cv
309.811 204.154 309.461 204.365 309.123 204.594 cv
309.014 204.664 308.914 204.746 308.809 204.822 cv
308.58 204.99 308.357 205.162 308.143 205.348 cv
308.031 205.445 307.924 205.545 307.814 205.646 cv
307.613 205.838 307.416 206.039 307.229 206.246 cv
307.133 206.352 307.037 206.455 306.945 206.564 cv
306.732 206.816 306.529 207.08 306.336 207.355 cv
306.168 207.584 li
305.916 207.955 305.678 208.346 305.455 208.754 cv
305.422 208.82 li
305.215 209.205 305.023 209.609 304.842 210.025 cv
304.799 210.125 304.76 210.225 304.721 210.324 cv
304.57 210.686 304.432 211.053 304.301 211.436 cv
304.266 211.543 304.228 211.65 304.195 211.76 cv
304.06 212.172 303.939 212.598 303.826 213.035 cv
303.77 213.25 li
303.371 214.865 303.113 216.633 302.992 218.531 cv
302.988 218.598 li
302.949 219.221 302.928 219.859 302.918 220.508 cv
302.918 220.557 li
302.885 223.246 303.107 226.156 303.58 229.23 cv
296.977 231.562 291.689 234.627 288.355 238.131 cv
288.244 238.258 li
287.918 238.607 287.605 238.957 287.32 239.313 cv
287.244 239.406 287.184 239.504 287.109 239.6 cv
286.873 239.904 286.639 240.213 286.432 240.525 cv
286.33 240.68 286.25 240.838 286.154 240.992 cv
286 241.25 285.836 241.504 285.701 241.764 cv
285.553 242.049 285.434 242.34 285.311 242.627 cv
285.254 242.762 285.182 242.893 285.129 243.027 cv
284.988 243.398 284.877 243.773 284.777 244.148 cv
284.725 244.314 li
284.619 244.744 284.543 245.176 284.494 245.611 cv
284.492 245.623 li
284.443 246.061 284.424 246.504 284.436 246.947 cv
284.443 247.301 284.473 247.652 284.52 247.998 cv
284.537 248.123 284.564 248.244 284.586 248.367 cv
284.625 248.592 284.662 248.813 284.715 249.031 cv
284.75 249.18 284.799 249.328 284.842 249.477 cv
284.898 249.666 284.951 249.857 285.018 250.045 cv
285.074 250.205 285.141 250.365 285.205 250.523 cv
285.275 250.695 285.346 250.869 285.424 251.039 cv
285.502 251.205 285.588 251.371 285.672 251.535 cv
285.756 251.695 285.84 251.853 285.932 252.012 cv
286.029 252.184 286.135 252.352 286.244 252.519 cv
286.338 252.668 286.434 252.814 286.535 252.961 cv
286.656 253.135 286.783 253.309 286.912 253.481 cv
287.016 253.615 287.121 253.75 287.232 253.885 cv
287.375 254.062 287.523 254.238 287.678 254.414 cv
287.787 254.537 287.9 254.658 288.016 254.783 cv
288.184 254.963 288.355 255.145 288.537 255.322 cv
288.648 255.432 288.764 255.539 288.877 255.646 cv
289.076 255.834 289.277 256.022 289.486 256.207 cv
289.592 256.295 289.699 256.383 289.805 256.473 cv
290.041 256.67 290.277 256.867 290.525 257.06 cv
290.768 257.242 li
291.055 257.461 291.344 257.678 291.648 257.889 cv
291.652 257.893 li
293.145 258.932 294.84 259.902 296.715 260.795 cv
296.588 260.875 296.469 260.961 296.352 261.049 cv
296.229 261.137 li
296.127 261.215 296.031 261.299 295.936 261.387 cv
295.781 261.52 li
295.533 261.775 li
295.377 261.941 li
295.162 262.205 li
295.018 262.395 li
294.953 262.484 294.895 262.574 294.834 262.668 cv
294.703 262.877 li
294.65 262.969 294.6 263.063 294.551 263.158 cv
294.437 263.385 li
294.395 263.48 294.354 263.574 294.314 263.67 cv
294.221 263.916 li
294.186 264.012 294.154 264.107 294.125 264.205 cv
294.053 264.465 li
294.027 264.561 294.004 264.656 293.986 264.756 cv
293.967 264.846 293.951 264.938 293.935 265.029 cv
293.922 265.125 293.906 265.219 293.897 265.316 cv
293.885 265.412 293.879 265.508 293.873 265.605 cv
293.867 265.699 293.861 265.793 293.859 265.889 cv
293.857 265.988 293.861 266.088 293.865 266.189 cv
293.867 266.279 293.869 266.371 293.877 266.465 cv
293.885 266.568 293.898 266.674 293.912 266.777 cv
293.949 267.041 li
293.969 267.152 293.996 267.264 294.021 267.373 cv
294.078 267.615 li
294.111 267.738 294.156 267.861 294.197 267.982 cv
294.266 268.184 li
294.338 268.371 294.42 268.559 294.512 268.74 cv
294.605 268.928 294.709 269.107 294.818 269.279 cv
294.98 269.51 li
295.168 269.773 li
295.25 269.877 295.34 269.975 295.428 270.074 cv
295.557 270.221 li
295.67 270.338 295.789 270.447 295.91 270.557 cv
295.979 270.621 li
296.123 270.746 296.271 270.859 296.426 270.971 cv
296.432 270.975 li
296.904 271.311 297.42 271.574 297.961 271.766 cv
297.961 271.768 li
297.988 272.965 298.098 274.102 298.291 275.168 cv
298.297 275.193 li
298.393 275.715 298.508 276.215 298.644 276.701 cv
298.678 276.812 li
298.811 277.268 298.959 277.711 299.129 278.137 cv
299.154 278.207 li
299.326 278.629 299.518 279.035 299.727 279.422 cv
299.842 279.627 li
300.043 279.984 300.256 280.328 300.49 280.654 cv
300.543 280.732 li
300.789 281.066 301.055 281.379 301.336 281.68 cv
301.537 281.887 li
301.828 282.18 302.131 282.461 302.459 282.717 cv
302.783 282.969 303.123 283.193 303.475 283.404 cv
303.584 283.467 303.699 283.523 303.811 283.586 cv
304.06 283.721 304.314 283.852 304.578 283.965 cv
304.709 284.025 304.844 284.078 304.98 284.131 cv
305.242 284.234 305.51 284.326 305.783 284.408 cv
305.916 284.449 306.047 284.49 306.182 284.527 cv
306.504 284.613 306.832 284.682 307.168 284.74 cv
307.258 284.758 307.346 284.779 307.437 284.793 cv
307.881 284.863 308.336 284.912 308.801 284.937 cv
308.873 284.939 li
309.311 284.961 309.756 284.963 310.211 284.949 cv
310.32 284.943 310.43 284.936 310.539 284.93 cv
310.924 284.912 311.313 284.879 311.709 284.834 cv
311.826 284.82 311.945 284.807 312.062 284.791 cv
312.484 284.736 312.914 284.666 313.348 284.582 cv
313.592 284.537 li
315.213 284.209 316.91 283.689 318.666 282.992 cv
318.779 282.947 li
319.338 282.723 319.902 282.48 320.473 282.221 cv
320.572 282.176 li
323.008 281.057 325.533 279.619 328.098 277.885 cv
328.1 277.883 li
328.143 277.924 li
330.301 280.096 332.477 281.979 334.625 283.535 cv
334.773 283.641 li
335.262 283.99 335.748 284.324 336.232 284.639 cv
336.381 284.738 li
337.961 285.756 339.518 286.59 341.035 287.223 cv
341.285 287.322 li
341.689 287.486 342.09 287.635 342.488 287.771 cv
342.604 287.811 342.721 287.848 342.836 287.885 cv
343.213 288.006 343.588 288.109 343.959 288.203 cv
344.064 288.23 344.174 288.26 344.279 288.285 cv
344.723 288.389 345.162 288.473 345.596 288.537 cv
345.664 288.549 li
346.127 288.613 346.582 288.654 347.031 288.672 cv
347.084 288.674 347.135 288.674 347.187 288.673 cv
347.226 288.673 347.265 288.673 347.305 288.674 cv
347.645 288.682 347.982 288.676 348.314 288.654 cv
348.453 288.646 348.59 288.631 348.728 288.617 cv
349.012 288.588 349.293 288.549 349.57 288.5 cv
349.713 288.475 349.855 288.447 349.996 288.416 cv
350.277 288.354 350.553 288.277 350.824 288.191 cv
350.945 288.154 351.068 288.121 351.189 288.078 cv
351.572 287.941 351.951 287.787 352.318 287.602 cv
358.668 284.402 360.809 274.67 358.916 262.355 cv
360.088 261.943 361.215 261.506 362.301 261.049 cv
364.027 262.029 366.195 262.158 368.103 261.197 cv
370.199 260.139 371.426 258.043 371.475 255.85 cv
375.744 252.521 378.158 248.674 378.059 244.623 cv
377.906 238.6 372.227 233.313 363.234 229.678 cv
f
327.021 255.674 mo
327.162 255.719 327.305 255.75 327.445 255.791 cv
327.662 255.854 327.877 255.922 328.098 255.971 cv
328.242 256.006 328.389 256.021 328.535 256.049 cv
328.756 256.092 328.975 256.139 329.197 256.168 cv
329.355 256.188 329.516 256.191 329.676 256.205 cv
329.889 256.223 330.102 256.248 330.316 256.256 cv
330.523 256.262 330.734 256.248 330.943 256.244 cv
331.111 256.24 331.277 256.246 331.443 256.234 cv
332.953 256.135 334.465 255.736 335.9 255.014 cv
341.633 252.125 343.939 245.135 341.051 239.398 cv
338.158 233.664 331.168 231.357 325.436 234.246 cv
324.002 234.969 322.781 235.949 321.803 237.1 cv
320.383 238.773 319.48 240.813 319.166 242.957 cv
319.129 243.164 li
319.107 243.338 319.102 243.514 319.086 243.689 cv
319.07 243.887 319.047 244.086 319.039 244.285 cv
319.043 244.471 li
319.033 245.16 319.076 245.852 319.191 246.543 cv
319.209 246.617 li
319.27 246.969 319.342 247.318 319.438 247.668 cv
319.523 247.986 319.633 248.305 319.748 248.621 cv
319.799 248.777 li
319.939 249.143 320.1 249.506 320.281 249.865 cv
321.363 252.016 323.023 253.684 324.979 254.775 cv
325.166 254.869 li
325.434 255.012 325.701 255.152 325.98 255.273 cv
326.076 255.316 326.174 255.346 326.27 255.385 cv
326.52 255.486 326.768 255.59 327.021 255.674 cv
cp
f
321.693 227.049 mo
321.775 226.961 li
324.658 226.582 327.662 226.338 330.76 226.262 cv
334.869 226.16 338.834 226.35 342.574 226.787 cv
342.115 226.125 341.652 225.488 341.184 224.863 cv
337.811 224.594 334.316 224.479 330.719 224.568 cv
328.346 224.627 326.025 224.777 323.754 224.99 cv
327.178 221.689 330.674 218.91 334.066 216.783 cv
333.475 216.225 332.885 215.699 332.289 215.191 cv
328.488 217.977 324.641 221.369 320.912 225.297 cv
319.891 225.422 318.883 225.563 317.889 225.715 cv
317.758 225.736 li
316.848 225.879 315.949 226.033 315.064 226.199 cv
314.934 226.225 314.805 226.248 314.674 226.271 cv
313.881 226.424 313.1 226.588 312.328 226.758 cv
312.145 226.799 311.957 226.836 311.773 226.877 cv
310.861 227.086 309.959 227.303 309.078 227.535 cv
309.139 228.244 309.221 228.975 309.313 229.707 cv
312.277 228.75 315.529 227.965 318.99 227.383 cv
317.467 229.082 315.969 230.865 314.508 232.736 cv
313.227 234.383 312.039 236.039 310.898 237.703 cv
311.088 238.408 311.311 239.131 311.527 239.848 cv
312.846 237.818 314.281 235.785 315.846 233.777 cv
316.441 233.012 317.051 232.271 317.662 231.539 cv
317.939 231.207 318.217 230.879 318.498 230.555 cv
318.768 230.24 319.041 229.936 319.313 229.629 cv
320.1 228.744 320.893 227.879 321.693 227.049 cv
cp
f
91.1586 231.551 mo
90.9409 231.73 90.6826 231.885 90.3906 232.016 cv
88.2129 232.967 86.2877 234.127 84.5997 235.488 cv
83.7773 236.154 82.9483 236.937 82.1045 237.828 cv
81.2647 238.727 80.4155 239.738 79.5684 240.867 cv
80.7476 242.328 82.4536 244.541 84.6826 247.5 cv
85.2607 246.959 87.25 245.023 90.6407 241.682 cv
92.5762 239.777 93.8218 238.598 94.3813 238.145 cv
95.0327 237.617 95.7559 237.373 96.5483 237.414 cv
97.3437 237.451 98.0195 237.813 98.5703 238.496 cv
99.6289 239.807 99.5268 241.115 98.2735 242.418 cv
97.4448 243.195 96.2236 244.365 94.5957 245.934 cv
93.1743 247.377 90.9932 249.486 88.0508 252.281 cv
89.1045 253.742 89.977 254.898 90.6689 255.76 cv
92.4121 257.916 93.5274 259.043 94.0175 259.131 cv
94.2573 259.178 95.0059 258.691 96.273 257.668 cv
96.9565 257.117 97.9727 256.268 99.3223 255.125 cv
100.667 253.979 101.68 253.135 102.364 252.584 cv
102.586 252.406 102.884 252.109 103.256 251.697 cv
103.634 251.285 103.927 250.994 104.137 250.822 cv
104.774 250.311 105.464 250.055 106.209 250.051 cv
107.057 250.037 107.78 250.402 108.372 251.139 cv
109.369 252.373 109.319 253.631 108.23 254.91 cv
107.297 256.01 105.1 257.955 101.632 260.756 cv
98.0444 263.654 95.3179 265.059 93.4434 264.971 cv
91.3843 264.871 88.9161 263.047 86.0488 259.492 cv
84.8526 258.016 83.1763 255.715 81.0024 252.588 cv
78.831 249.463 77.1552 247.166 75.9732 245.703 cv
75.6621 245.314 75.1445 244.795 74.4302 244.131 cv
73.71 243.459 73.1944 242.937 72.8833 242.555 cv
71.5361 240.881 71.6294 239.426 73.1695 238.18 cv
73.6508 237.789 74.2085 237.568 74.8378 237.512 cv
75.8554 236.162 76.8745 234.941 77.9013 233.853 cv
78.9155 232.764 79.939 231.811 80.9604 230.982 cv
83.7363 228.74 86.2105 227.271 88.3916 226.568 cv
89.7105 226.139 90.7813 226.422 91.5991 227.437 cv
92.062 228.01 92.272 228.676 92.2319 229.436 cv
92.2026 230.293 91.8432 231.004 91.1586 231.551 cv
f
338.203 132.752 mo
338.02 132.655 337.842 132.523 337.67 132.361 cv
336.412 131.147 335.082 130.165 333.682 129.399 cv
332.998 129.027 332.232 128.683 331.389 128.359 cv
330.543 128.041 329.615 127.748 328.609 127.489 cv
327.947 128.701 326.922 130.484 325.535 132.832 cv
326.066 133.073 327.941 133.881 331.168 135.249 cv
333.008 136.029 334.158 136.544 334.625 136.797 cv
335.166 137.093 335.535 137.516 335.73 138.067 cv
335.93 138.617 335.873 139.179 335.563 139.746 cv
334.969 140.834 334.051 141.132 332.813 140.647 cv
332.051 140.301 330.91 139.799 329.389 139.133 cv
328.008 138.572 325.959 137.682 323.23 136.467 cv
322.533 137.594 321.992 138.513 321.602 139.225 cv
320.625 141.016 320.172 142.092 320.25 142.45 cv
320.285 142.626 320.826 142.998 321.879 143.573 cv
322.445 143.883 323.309 144.334 324.465 144.932 cv
325.623 145.524 326.482 145.975 327.049 146.286 cv
327.232 146.387 327.518 146.506 327.902 146.644 cv
328.289 146.785 328.568 146.902 328.744 146.997 cv
329.271 147.286 329.641 147.683 329.852 148.188 cv
330.1 148.761 330.055 149.357 329.721 149.965 cv
329.16 150.99 328.291 151.312 327.115 150.929 cv
326.105 150.604 324.164 149.657 321.285 148.085 cv
318.307 146.46 316.584 145 316.117 143.702 cv
315.605 142.272 316.152 140.081 317.764 137.133 cv
318.432 135.903 319.525 134.116 321.041 131.758 cv
322.557 129.404 323.648 127.619 324.309 126.403 cv
324.486 126.082 324.693 125.584 324.945 124.912 cv
325.199 124.233 325.408 123.736 325.582 123.417 cv
326.342 122.03 327.357 121.685 328.639 122.382 cv
329.039 122.599 329.346 122.917 329.561 123.329 cv
330.766 123.642 331.881 123.992 332.91 124.384 cv
333.936 124.768 334.873 125.195 335.723 125.657 cv
338.029 126.914 339.723 128.185 340.814 129.47 cv
341.477 130.246 341.586 131.055 341.125 131.896 cv
340.865 132.371 340.471 132.702 339.943 132.887 cv
339.352 133.109 338.768 133.065 338.203 132.752 cv
cp
f
136.674 270.38 mo
136.014 269.707 135.356 269.074 134.691 268.462 cv
127.527 273.299 120.152 279.893 113.359 287.941 cv
111.804 289.786 110.357 291.647 108.964 293.52 cv
109.153 294.344 109.377 295.188 109.595 296.026 cv
111.21 293.738 112.959 291.456 114.858 289.205 cv
121.805 280.97 129.48 274.513 136.674 270.38 cv
1 1 1 rgb
f
135.636 271.34 mo
134.976 270.669 134.317 270.035 133.653 269.423 cv
126.489 274.26 119.114 280.853 112.322 288.901 cv
110.766 290.747 109.319 292.608 107.926 294.48 cv
108.115 295.304 108.34 296.147 108.558 296.986 cv
110.172 294.698 111.922 292.415 113.819 290.165 cv
120.766 281.93 128.443 275.473 135.636 271.34 cv
.172549 .670588 .513726 rgb
f
167.037 262.379 mo
160.753 257.075 149.425 259.238 137.184 266.843 cv
137.833 267.552 138.476 268.314 139.118 269.071 cv
147.746 264.695 155.45 263.858 160.005 267.705 cv
168.718 275.056 162.632 296.6 146.411 315.828 cv
130.191 335.053 109.977 344.68 101.261 337.328 cv
94.5566 331.67 96.643 317.602 105.344 302.657 cv
105.036 301.744 104.77 300.847 104.49 299.95 cv
92.1245 319.157 88.6323 337.93 97.1987 345.16 cv
107.555 353.899 131.587 342.456 150.875 319.594 cv
170.161 296.736 177.395 271.119 167.037 262.379 cv
1 1 1 rgb
f
166 263.339 mo
159.716 258.036 148.387 260.198 136.145 267.803 cv
136.795 268.511 137.438 269.274 138.081 270.032 cv
146.708 265.656 154.413 264.82 158.967 268.665 cv
167.68 276.016 161.595 297.561 145.373 316.788 cv
129.153 336.013 108.938 345.639 100.223 338.289 cv
93.5186 332.63 95.6049 318.563 104.307 303.618 cv
103.998 302.704 103.732 301.807 103.452 300.91 cv
91.086 320.118 87.5942 338.891 96.1611 346.12 cv
106.516 354.86 130.549 343.418 149.837 320.555 cv
169.124 297.697 176.357 272.079 166 263.339 cv
.172549 .670588 .513726 rgb
f
152.795 344.397 mo
142.421 349.13 125.546 334.414 115.105 311.53 cv
104.664 288.647 104.607 266.258 114.979 261.522 cv
125.351 256.793 142.224 271.509 152.664 294.393 cv
163.107 317.275 163.164 339.666 152.795 344.397 cv
109.64 254.503 mo
97.3086 260.13 97.3755 286.749 109.791 313.954 cv
122.205 341.164 142.269 358.662 154.598 353.036 cv
166.928 347.41 166.86 320.788 154.445 293.581 cv
142.031 266.374 121.97 248.875 109.64 254.503 cv
1 1 1 rgb
f
151.757 345.359 mo
141.383 350.09 124.508 335.374 114.067 312.49 cv
103.625 289.608 103.568 267.219 113.941 262.482 cv
124.312 257.752 141.187 272.472 151.626 295.354 cv
162.07 318.236 162.126 340.626 151.757 345.359 cv
108.602 255.462 mo
96.2705 261.09 96.337 287.709 108.752 314.915 cv
121.166 342.124 141.23 359.623 153.56 353.997 cv
165.891 348.37 165.821 321.749 153.407 294.543 cv
140.992 267.334 120.932 249.836 108.602 255.462 cv
1 .34902 .266667 rgb
f
167.933 290.022 mo
173.642 293.553 177.751 297.796 177.689 302.456 cv
177.53 313.856 157.011 322.814 131.86 322.468 cv
106.704 322.117 86.4458 312.596 86.5981 301.196 cv
86.6807 295.235 91.2026 290.453 100.162 286.807 cv
100.012 285.82 99.8926 284.714 99.7827 283.753 cv
86.0176 288.017 78.0816 294.794 77.9693 303.019 cv
77.7831 316.571 101.872 327.894 131.776 328.309 cv
161.684 328.724 186.078 318.072 186.265 304.52 cv
186.362 297.546 179.358 290.992 169.108 286.387 cv
168.777 287.493 168.349 288.884 167.933 290.022 cv
1 1 1 rgb
f
147.326 280.397 mo
147.822 281.193 148.328 281.986 148.811 282.814 cv
153.951 283.789 157.838 285.142 161.867 286.837 cv
162.126 285.887 162.325 284.839 162.508 283.922 cv
157.7 282.337 153.117 281.228 147.326 280.397 cv
f
144.276 282.061 mo
143.777 281.276 143.264 280.579 142.748 279.836 cv
138.865 279.376 136.619 279.283 132.456 279.229 cv
123.394 279.103 114.851 280.009 107.317 281.689 cv
107.355 282.509 107.416 283.359 107.488 284.209 cv
114.679 282.186 123.24 281.058 132.428 281.186 cv
137.183 281.25 139.974 281.388 144.276 282.061 cv
f
146.288 281.357 mo
146.784 282.156 147.29 282.947 147.774 283.775 cv
152.913 284.75 157.583 286.133 161.613 287.826 cv
161.872 286.877 162.083 285.949 162.267 285.033 cv
157.458 283.448 152.079 282.189 146.288 281.357 cv
.992157 .580392 .0196078 rgb
f
101.555 322.762 mo
103.183 326.328 101.609 330.537 98.0449 332.162 cv
94.4775 333.792 90.2671 332.22 88.6402 328.654 cv
87.0141 325.091 88.5859 320.88 92.1543 319.252 cv
95.7178 317.624 99.9278 319.197 101.555 322.762 cv
1 1 1 rgb
f
133.748 257.844 mo
135.375 261.407 133.801 265.618 130.237 267.246 cv
126.672 268.874 122.458 267.3 120.833 263.735 cv
119.206 260.171 120.777 255.96 124.345 254.333 cv
127.908 252.706 132.121 254.277 133.748 257.844 cv
cp
f
100.516 323.723 mo
102.145 327.289 100.571 331.498 97.0074 333.122 cv
93.439 334.752 89.23 333.18 87.6021 329.613 cv
85.9756 326.051 87.5473 321.84 91.1162 320.213 cv
94.6802 318.586 98.8901 320.156 100.516 323.723 cv
1 .34902 .266667 rgb
f
167.625 290.893 mo
173.333 294.426 176.714 298.756 176.651 303.416 cv
176.493 314.817 155.974 323.776 130.822 323.428 cv
105.666 323.078 85.4082 313.557 85.561 302.157 cv
85.6435 296.197 91.3198 290.926 100.279 287.28 cv
100.128 286.292 99.9828 285.313 99.8721 284.353 cv
86.1084 288.617 77.0435 295.755 76.9316 303.978 cv
76.7446 317.531 100.833 328.854 130.738 329.269 cv
160.645 329.684 185.04 319.032 185.227 305.481 cv
185.324 298.506 178.981 292.135 168.732 287.53 cv
168.399 288.635 168.041 289.754 167.625 290.893 cv
.992157 .580392 .0196078 rgb
f
145.021 283.281 mo
144.522 282.497 144.115 281.743 143.599 280.999 cv
139.715 280.538 135.58 280.244 131.418 280.188 cv
122.355 280.064 114.822 280.751 107.288 282.431 cv
107.327 283.252 107.439 284.031 107.512 284.881 cv
114.702 282.858 122.202 282.018 131.391 282.148 cv
136.145 282.212 140.719 282.608 145.021 283.281 cv
f
177.532 313.829 mo
179.158 317.393 177.585 321.601 174.021 323.227 cv
170.451 324.856 166.244 323.288 164.617 319.721 cv
162.991 316.156 164.562 311.945 168.131 310.316 cv
171.694 308.691 175.904 310.265 177.532 313.829 cv
1 1 1 rgb
f
176.493 314.789 mo
178.121 318.353 176.547 322.562 172.984 324.189 cv
169.413 325.816 165.207 324.247 163.579 320.682 cv
161.953 317.119 163.524 312.905 167.094 311.277 cv
170.656 309.651 174.868 311.225 176.493 314.789 cv
.172549 .670588 .513726 rgb
f
132.709 258.805 mo
134.336 262.367 132.763 266.579 129.199 268.206 cv
125.633 269.834 121.421 268.262 119.795 264.696 cv
118.168 261.133 119.74 256.92 123.307 255.294 cv
126.871 253.667 131.083 255.238 132.709 258.805 cv
cp
.992157 .580392 .0196078 rgb
f
129.066 306.955 mo
125.921 308.389 122.21 307.004 120.776 303.862 cv
119.343 300.718 120.729 297.008 123.873 295.571 cv
127.015 294.138 130.726 295.522 132.161 298.668 cv
133.593 301.81 132.208 305.519 129.066 306.955 cv
143.734 296.825 mo
140.65 290.07 132.674 287.095 125.919 290.175 cv
119.16 293.261 116.18 301.235 119.263 307.995 cv
122.346 314.749 130.322 317.725 137.083 314.643 cv
143.838 311.559 146.816 303.584 143.734 296.825 cv
1 1 1 rgb
f
142.697 297.789 mo
139.611 291.03 131.636 288.055 124.881 291.135 cv
118.122 294.221 115.141 302.195 118.225 308.955 cv
121.308 315.711 129.284 318.686 136.046 315.603 cv
142.8 312.519 145.778 304.545 142.697 297.789 cv
.172549 .670588 .513726 rgb
f
141.398 300.021 mo
140.409 302.161 136.473 302.445 132.608 300.654 cv
128.745 298.865 126.414 295.679 127.408 293.541 cv
128.398 291.404 132.333 291.12 136.196 292.909 cv
140.061 294.699 142.392 297.885 141.398 300.021 cv
1 1 1 rgb
f
130.467 316.82 mo
125.362 316.82 120.482 313.901 118.225 308.955 cv
117.4 307.146 117.009 305.251 117.008 303.385 cv
117.007 298.278 119.931 293.395 124.881 291.135 cv
136.046 315.603 li
134.234 316.429 132.336 316.82 130.467 316.82 cv
.164706 .603922 .439216 rgb
f
152.896 354.275 mo
152.898 354.274 152.898 354.274 152.899 354.274 cv
152.898 354.274 152.897 354.274 152.896 354.275 cv
152.914 354.268 mo
153.132 354.184 153.347 354.094 153.56 353.997 cv
153.56 353.997 li
153.56 353.997 li
153.347 354.094 153.132 354.184 152.914 354.268 cv
153.584 353.986 mo
153.586 353.985 153.588 353.984 153.589 353.983 cv
153.588 353.984 153.586 353.985 153.584 353.986 cv
96.7552 346.589 mo
96.7548 346.588 li
96.7552 346.589 li
96.7265 346.567 mo
96.5339 346.425 96.3452 346.275 96.1611 346.12 cv
96.1541 346.114 96.147 346.108 96.14 346.102 cv
96.1468 346.108 96.1543 346.114 96.1611 346.12 cv
96.345 346.275 96.5341 346.425 96.7265 346.567 cv
96.1266 346.091 mo
96.1244 346.089 96.1222 346.087 96.12 346.085 cv
96.1221 346.087 96.1245 346.089 96.1266 346.091 cv
148.579 345.283 mo
143.778 345.283 138.174 342.305 132.632 337.105 cv
132.634 337.103 li
138.174 342.302 143.779 345.281 148.579 345.281 cv
149.283 345.281 149.969 345.217 150.636 345.087 cv
150.636 345.088 li
149.97 345.218 149.283 345.283 148.579 345.283 cv
108.823 339.796 mo
105.828 339.796 103.246 339.003 101.261 337.328 cv
103.244 339 105.822 339.792 108.813 339.792 cv
112.521 339.792 116.863 338.575 121.49 336.31 cv
121.491 336.311 121.494 336.314 121.495 336.316 cv
116.869 338.581 112.53 339.796 108.823 339.796 cv
101.242 337.312 mo
101.24 337.311 101.239 337.31 101.237 337.308 cv
101.239 337.31 101.24 337.311 101.242 337.312 cv
101.224 337.297 mo
101.221 337.295 101.219 337.293 101.217 337.291 cv
101.219 337.293 101.221 337.295 101.224 337.297 cv
101.205 337.281 mo
101.203 337.279 101.201 337.277 101.198 337.274 cv
101.2 337.277 101.203 337.279 101.205 337.281 cv
101.187 337.265 mo
101.184 337.263 101.182 337.261 101.179 337.259 cv
101.182 337.261 101.184 337.263 101.187 337.265 cv
101.168 337.249 mo
101.166 337.247 101.163 337.245 101.161 337.243 cv
101.163 337.245 101.166 337.247 101.168 337.249 cv
101.15 337.233 mo
101.148 337.231 101.145 337.229 101.142 337.227 cv
101.145 337.229 101.147 337.231 101.15 337.233 cv
101.132 337.217 mo
101.126 337.212 101.12 337.207 101.115 337.202 cv
101.12 337.207 101.126 337.212 101.132 337.217 cv
101.107 337.196 mo
101.104 337.193 101.1 337.189 101.096 337.186 cv
101.1 337.189 101.104 337.193 101.107 337.196 cv
101.09 337.18 mo
101.086 337.177 101.082 337.173 101.078 337.17 cv
101.082 337.173 101.086 337.177 101.09 337.18 cv
101.072 337.165 mo
101.068 337.161 101.064 337.157 101.06 337.154 cv
101.064 337.157 101.068 337.161 101.072 337.165 cv
101.055 337.15 mo
101.051 337.146 101.046 337.141 101.042 337.137 cv
101.046 337.141 101.051 337.146 101.055 337.15 cv
101.039 337.135 mo
99.6915 335.925 98.7199 334.358 98.1047 332.5 cv
98.1049 332.5 98.105 332.5 98.1051 332.5 cv
98.7205 334.356 99.6916 335.925 101.039 337.135 cv
128.185 332.433 mo
127.274 331.372 126.371 330.253 125.481 329.082 cv
125.482 329.082 125.485 329.083 125.487 329.083 cv
126.376 330.252 127.277 331.365 128.186 332.425 cv
129.629 331.462 131.08 330.414 132.535 329.281 cv
132.537 329.281 132.542 329.281 132.544 329.281 cv
131.086 330.417 129.631 331.468 128.185 332.433 cv
0 .203922 .309804 rgb
f
107.784 340.756 mo
104.788 340.756 102.208 339.963 100.223 338.289 cv
98.6805 336.987 97.6036 335.241 96.9653 333.141 cv
96.9793 333.135 96.9934 333.128 97.0074 333.122 cv
97.3975 332.944 97.7638 332.735 98.1047 332.5 cv
98.7199 334.358 99.6915 335.925 101.039 337.135 cv
101.04 337.136 101.041 337.137 101.042 337.137 cv
101.046 337.141 101.051 337.146 101.055 337.15 cv
101.057 337.151 101.058 337.152 101.06 337.154 cv
101.064 337.157 101.068 337.161 101.072 337.165 cv
101.074 337.166 101.076 337.168 101.078 337.17 cv
101.082 337.173 101.086 337.177 101.09 337.18 cv
101.092 337.182 101.094 337.184 101.096 337.186 cv
101.1 337.189 101.104 337.193 101.107 337.196 cv
101.11 337.198 101.112 337.2 101.115 337.202 cv
101.12 337.207 101.126 337.212 101.132 337.217 cv
101.135 337.22 101.139 337.223 101.142 337.227 cv
101.145 337.229 101.148 337.231 101.15 337.233 cv
101.154 337.236 101.157 337.239 101.161 337.243 cv
101.163 337.245 101.166 337.247 101.168 337.249 cv
101.172 337.252 101.176 337.255 101.179 337.259 cv
101.182 337.261 101.184 337.263 101.187 337.265 cv
101.191 337.268 101.194 337.271 101.198 337.274 cv
101.201 337.277 101.203 337.279 101.205 337.281 cv
101.209 337.284 101.213 337.288 101.217 337.291 cv
101.219 337.293 101.221 337.295 101.224 337.297 cv
101.228 337.301 101.233 337.304 101.237 337.308 cv
101.239 337.31 101.24 337.311 101.242 337.312 cv
101.248 337.318 101.255 337.323 101.261 337.328 cv
101.261 337.328 li
103.246 339.003 105.828 339.796 108.823 339.796 cv
112.53 339.796 116.869 338.581 121.495 336.316 cv
121.575 336.419 121.655 336.523 121.736 336.626 cv
116.632 339.307 111.83 340.756 107.784 340.756 cv
128.321 332.591 mo
128.276 332.539 128.23 332.486 128.185 332.433 cv
129.631 331.468 131.086 330.417 132.544 329.281 cv
132.602 329.281 132.657 329.281 132.714 329.281 cv
131.248 330.469 129.78 331.574 128.321 332.591 cv
140.915 330.028 mo
141.31 329.653 141.708 329.271 142.101 328.886 cv
142.113 328.885 142.124 328.884 142.136 328.883 cv
141.729 329.27 141.323 329.651 140.915 330.028 cv
.94902 .898039 .854902 rgb
f
105.139 349.052 mo
101.875 349.052 99.0234 348.257 96.7552 346.589 cv
96.7548 346.588 li
96.7452 346.581 96.7361 346.574 96.7265 346.567 cv
96.5341 346.425 96.345 346.275 96.1611 346.12 cv
96.1543 346.114 96.1468 346.108 96.14 346.102 cv
96.1356 346.098 96.131 346.095 96.1266 346.091 cv
96.1245 346.089 96.1221 346.087 96.12 346.085 cv
92.8509 343.299 91.3599 338.815 91.4541 333.269 cv
92.2788 333.594 93.1638 333.766 94.0618 333.766 cv
95.0338 333.766 96.0216 333.565 96.9653 333.141 cv
97.6036 335.241 98.6805 336.987 100.223 338.289 cv
102.208 339.963 104.788 340.756 107.784 340.756 cv
111.83 340.756 116.632 339.307 121.736 336.626 cv
123.138 338.427 124.563 340.115 126.003 341.685 cv
118.354 346.435 111.065 349.052 105.139 349.052 cv
132.632 337.105 mo
131.186 335.747 129.744 334.238 128.321 332.591 cv
129.78 331.574 131.248 330.469 132.714 329.281 cv
135.92 329.273 139.058 329.138 142.101 328.886 cv
141.708 329.271 141.31 329.653 140.915 330.028 cv
140.853 330.086 140.79 330.143 140.728 330.201 cv
138.048 332.729 135.335 335.036 132.631 337.101 cv
132.632 337.102 132.633 337.102 132.634 337.103 cv
132.632 337.105 li
.164706 .603922 .439216 rgb
f
147.543 346.244 mo
140.4 346.244 131.478 339.652 123.636 328.962 cv
124.247 329.006 124.863 329.047 125.481 329.082 cv
126.371 330.253 127.274 331.372 128.185 332.433 cv
128.23 332.486 128.276 332.539 128.321 332.591 cv
129.744 334.238 131.186 335.747 132.632 337.105 cv
138.174 342.305 143.778 345.283 148.579 345.283 cv
149.283 345.283 149.97 345.218 150.636 345.088 cv
150.91 345.698 li
149.845 346.065 148.717 346.244 147.543 346.244 cv
.94902 .898039 .854902 rgb
f
148.556 355.048 mo
141.81 355.048 133.725 350.091 126.009 341.681 cv
126.007 341.682 126.005 341.683 126.003 341.685 cv
124.563 340.115 123.138 338.427 121.736 336.626 cv
121.655 336.523 121.575 336.419 121.495 336.316 cv
121.494 336.314 121.491 336.311 121.49 336.31 cv
121.493 336.309 121.495 336.308 121.497 336.307 cv
119.549 333.782 117.649 331.046 115.826 328.118 cv
118.357 328.482 120.965 328.766 123.636 328.962 cv
131.478 339.652 140.4 346.244 147.543 346.244 cv
148.717 346.244 149.845 346.065 150.91 345.698 cv
154.434 353.543 li
154.159 353.7 153.879 353.85 153.589 353.983 cv
153.588 353.984 153.586 353.985 153.584 353.986 cv
153.576 353.99 153.568 353.993 153.56 353.997 cv
153.56 353.997 li
153.347 354.094 153.132 354.184 152.914 354.268 cv
152.909 354.27 152.904 354.272 152.899 354.274 cv
152.898 354.274 152.898 354.274 152.896 354.275 cv
151.53 354.796 150.078 355.048 148.556 355.048 cv
.94902 .313725 .227451 rgb
f
88.0555 330.454 mo
87.888 330.188 87.7362 329.907 87.6021 329.613 cv
87.5991 329.607 87.596 329.6 87.593 329.593 cv
87.596 329.6 87.5991 329.607 87.6021 329.613 cv
87.7363 329.907 87.888 330.188 88.0555 330.454 cv
87.5908 329.589 mo
87.5886 329.584 87.5863 329.578 87.5841 329.574 cv
87.5863 329.579 87.5886 329.584 87.5908 329.589 cv
87.5815 329.568 mo
87.5794 329.563 87.5771 329.558 87.575 329.553 cv
87.5771 329.558 87.5793 329.563 87.5815 329.568 cv
87.5726 329.548 mo
87.5702 329.542 87.568 329.537 87.5656 329.532 cv
87.568 329.537 87.5702 329.543 87.5726 329.548 cv
87.5639 329.528 mo
87.5612 329.522 87.5586 329.516 87.5559 329.51 cv
87.5586 329.516 87.5612 329.522 87.5639 329.528 cv
87.5551 329.508 mo
87.5431 329.481 87.5311 329.453 87.5194 329.425 cv
87.5311 329.453 87.5431 329.481 87.5551 329.508 cv
87.5191 329.424 mo
87.5163 329.418 87.5133 329.411 87.5105 329.404 cv
87.5134 329.411 87.5162 329.418 87.5191 329.424 cv
87.5103 329.404 mo
87.4752 329.32 87.4419 329.236 87.4102 329.151 cv
87.4419 329.236 87.4752 329.32 87.5103 329.404 cv
130.822 329.271 mo
130.794 329.27 130.766 329.27 130.738 329.269 cv
130.738 329.269 li
130.738 329.269 li
130.765 329.27 130.794 329.27 130.822 329.271 cv
130.69 329.269 mo
130.583 329.267 130.475 329.266 130.368 329.264 cv
130.475 329.266 130.583 329.267 130.69 329.269 cv
130.329 329.263 mo
130.326 329.263 130.323 329.263 130.32 329.263 cv
130.322 329.263 130.327 329.263 130.329 329.263 cv
87.4098 329.15 mo
87.4073 329.143 87.4049 329.137 87.4024 329.13 cv
87.4049 329.137 87.4073 329.144 87.4098 329.15 cv
87.4019 329.129 mo
87.3995 329.122 87.3969 329.115 87.3944 329.109 cv
87.3969 329.115 87.3994 329.122 87.4019 329.129 cv
87.3943 329.108 mo
87.3866 329.087 87.379 329.066 87.3716 329.046 cv
87.3791 329.067 87.3866 329.087 87.3943 329.108 cv
87.3703 329.042 mo
87.3684 329.037 87.3664 329.031 87.3645 329.026 cv
87.3664 329.031 87.3683 329.036 87.3703 329.042 cv
87.3625 329.02 mo
87.3608 329.015 87.3591 329.01 87.3575 329.006 cv
87.3592 329.011 87.3608 329.015 87.3625 329.02 cv
87.3551 328.999 mo
87.3535 328.994 87.3521 328.99 87.3505 328.986 cv
87.352 328.99 87.3536 328.995 87.3551 328.999 cv
87.348 328.979 mo
87.3465 328.974 87.3451 328.97 87.3436 328.966 cv
87.345 328.97 87.3465 328.974 87.348 328.979 cv
87.341 328.958 mo
87.3394 328.953 87.3377 328.948 87.3361 328.944 cv
87.3377 328.949 87.3394 328.953 87.341 328.958 cv
87.3309 328.928 mo
87.3299 328.925 87.329 328.923 87.3279 328.92 cv
87.3289 328.923 87.3299 328.926 87.3309 328.928 cv
87.3233 328.906 mo
87.3227 328.904 87.3221 328.902 87.3215 328.9 cv
87.3221 328.902 87.3228 328.904 87.3233 328.906 cv
87.3168 328.886 mo
87.3162 328.885 87.3157 328.883 87.3152 328.881 cv
87.3157 328.883 87.3162 328.885 87.3168 328.886 cv
87.3103 328.867 mo
87.3099 328.865 87.3095 328.864 87.3091 328.863 cv
87.3095 328.864 87.3099 328.865 87.3103 328.867 cv
87.3038 328.847 mo
87.3038 328.846 87.3036 328.846 87.3036 328.846 cv
87.3036 328.846 87.3037 328.846 87.3038 328.847 cv
133.271 322.477 mo
132.83 322.477 132.389 322.475 131.945 322.469 cv
132.368 322.474 132.789 322.477 133.209 322.477 cv
135.645 322.477 138.033 322.386 140.362 322.22 cv
140.365 322.226 li
138.056 322.392 135.686 322.477 133.271 322.477 cv
131.86 322.468 mo
131.835 322.467 131.81 322.467 131.785 322.467 cv
131.81 322.467 131.835 322.467 131.86 322.468 cv
127.458 322.311 mo
125.059 322.173 122.718 321.952 120.445 321.654 cv
118.54 318.51 116.743 315.12 115.105 311.53 cv
116.744 315.12 118.54 318.51 120.445 321.653 cv
122.717 321.952 125.06 322.173 127.458 322.311 cv
111.18 319.927 mo
106.751 318.836 102.749 317.429 99.3219 315.777 cv
100.529 312.094 102.26 308.184 104.472 304.192 cv
104.473 304.195 li
102.262 308.184 100.534 312.092 99.3271 315.773 cv
102.752 317.424 106.751 318.828 111.176 319.92 cv
111.178 319.923 111.178 319.924 111.18 319.927 cv
96.2796 314.157 mo
90.2656 310.613 86.6622 306.202 86.5981 301.453 cv
86.6626 306.199 90.2732 310.606 96.2826 314.15 cv
96.2816 314.153 96.2806 314.155 96.2796 314.157 cv
115.105 311.53 mo
112.654 306.157 110.775 300.812 109.469 295.716 cv
109.48 295.701 109.491 295.685 109.502 295.67 cv
109.505 295.679 109.507 295.688 109.509 295.697 cv
109.48 295.734 li
110.786 300.826 112.657 306.163 115.105 311.53 cv
86.5981 301.451 mo
86.598 301.441 86.5979 301.434 86.5978 301.425 cv
86.5979 301.433 86.598 301.442 86.5981 301.451 cv
86.5978 301.421 mo
86.5977 301.413 86.5976 301.404 86.5975 301.395 cv
86.5976 301.404 86.5977 301.413 86.5978 301.421 cv
86.5975 301.393 mo
86.5975 301.385 86.5974 301.377 86.5974 301.37 cv
86.5974 301.378 86.5975 301.385 86.5975 301.393 cv
86.5974 301.365 mo
86.5973 301.357 86.5973 301.349 86.5973 301.341 cv
86.5973 301.349 86.5973 301.357 86.5974 301.365 cv
86.5973 301.335 mo
86.5973 301.327 86.5973 301.319 86.5973 301.312 cv
86.5973 301.319 86.5973 301.327 86.5973 301.335 cv
86.5973 301.306 mo
86.5973 301.298 86.5973 301.292 86.5974 301.284 cv
86.5973 301.292 86.5973 301.299 86.5973 301.306 cv
86.5974 301.28 mo
86.5974 301.273 86.5975 301.264 86.5975 301.256 cv
86.5975 301.264 86.5974 301.273 86.5974 301.28 cv
86.5975 301.25 mo
86.5976 301.243 86.5977 301.234 86.5978 301.227 cv
86.5977 301.235 86.5976 301.242 86.5975 301.25 cv
86.5978 301.222 mo
86.5979 301.213 86.598 301.205 86.5981 301.196 cv
86.5981 301.196 li
86.5981 301.196 li
86.598 301.205 86.5979 301.213 86.5978 301.222 cv
86.5985 301.169 mo
86.6354 298.882 87.3263 296.769 88.6713 294.828 cv
91.2139 291.916 95.2051 289.35 100.235 287.298 cv
100.235 287.299 li
95.2342 289.34 91.2612 291.887 88.7163 294.777 cv
87.3481 296.734 86.6365 298.862 86.5985 301.169 cv
109.595 296.026 mo
109.595 296.026 li
109.595 296.026 li
111.21 293.738 112.959 291.456 114.858 289.205 cv
116.882 286.805 118.969 284.556 121.087 282.472 cv
121.541 282.433 121.998 282.398 122.459 282.367 cv
122.466 282.382 li
122.011 282.414 121.552 282.441 121.104 282.479 cv
118.981 284.567 116.887 286.801 114.858 289.205 cv
112.959 291.456 111.21 293.738 109.595 296.026 cv
108.871 293.224 mo
108.168 290.072 107.691 287.034 107.442 284.164 cv
107.465 284.387 107.488 284.613 107.508 284.843 cv
107.505 284.816 li
107.512 284.881 li
107.513 284.881 li
107.513 284.881 li
110.84 283.945 114.236 283.262 117.833 282.811 cv
117.83 282.815 117.825 282.82 117.821 282.824 cv
114.231 283.275 110.834 283.946 107.513 284.881 cv
107.776 287.536 108.23 290.331 108.875 293.219 cv
108.874 293.221 108.872 293.222 108.871 293.224 cv
112.293 288.936 mo
112.303 288.924 112.313 288.913 112.322 288.901 cv
112.313 288.913 112.303 288.924 112.293 288.936 cv
112.322 288.901 mo
112.415 288.792 112.507 288.683 112.6 288.574 cv
112.507 288.683 112.415 288.792 112.322 288.901 cv
112.603 288.57 mo
112.611 288.561 112.619 288.552 112.626 288.542 cv
112.619 288.552 112.611 288.561 112.603 288.57 cv
107.318 282.424 mo
106.856 274.157 108.377 267.459 111.883 263.758 cv
112.417 263.327 112.989 262.955 113.6 262.647 cv
113.607 262.664 li
113.005 262.97 112.435 263.328 111.905 263.754 cv
108.389 267.45 106.864 274.147 107.324 282.423 cv
107.322 282.423 107.32 282.424 107.318 282.424 cv
109.607 254.518 mo
109.608 254.517 109.61 254.517 109.611 254.516 cv
109.61 254.517 109.608 254.517 109.607 254.518 cv
0 .203922 .309804 rgb
f
109.595 296.026 mo
109.595 296.026 li
109.566 295.914 109.541 295.804 109.512 295.693 cv
109.509 295.697 li
109.507 295.688 109.505 295.679 109.502 295.67 cv
110.849 293.823 112.286 291.983 113.819 290.165 cv
116.157 287.394 118.577 284.824 121.034 282.476 cv
121.052 282.475 121.069 282.473 121.087 282.472 cv
118.969 284.556 116.882 286.805 114.858 289.205 cv
112.959 291.456 111.21 293.738 109.595 296.026 cv
.94902 .898039 .854902 rgb
f
109.469 295.716 mo
109.254 294.879 109.055 294.047 108.871 293.224 cv
108.872 293.222 108.874 293.221 108.875 293.219 cv
108.876 293.224 108.877 293.228 108.878 293.233 cv
109.973 291.793 111.095 290.359 112.293 288.936 cv
112.303 288.924 112.313 288.913 112.322 288.901 cv
112.322 288.901 li
112.322 288.901 li
112.415 288.792 112.507 288.683 112.6 288.574 cv
112.601 288.572 112.602 288.571 112.603 288.57 cv
112.611 288.561 112.619 288.552 112.626 288.542 cv
114.329 286.541 116.069 284.638 117.831 282.823 cv
117.827 282.824 117.824 282.824 117.821 282.824 cv
117.825 282.82 117.83 282.815 117.833 282.811 cv
118.882 282.68 119.948 282.568 121.034 282.476 cv
118.577 284.824 116.157 287.394 113.819 290.165 cv
112.286 291.983 110.849 293.823 109.502 295.67 cv
109.491 295.685 109.48 295.701 109.469 295.716 cv
.164706 .603922 .439216 rgb
f
99.3219 315.777 mo
99.1177 315.679 98.9141 315.579 98.7141 315.478 cv
100.055 311.702 101.928 307.708 104.288 303.65 cv
104.349 303.831 104.41 304.011 104.472 304.192 cv
102.26 308.184 100.529 312.094 99.3219 315.777 cv
.94902 .898039 .854902 rgb
f
98.7141 315.478 mo
97.8644 315.053 97.0522 314.612 96.2796 314.157 cv
96.2806 314.155 96.2816 314.153 96.2826 314.15 cv
96.2844 314.151 96.2857 314.152 96.2876 314.153 cv
98.1595 309.871 100.546 305.429 103.42 300.96 cv
103.695 301.852 103.984 302.749 104.288 303.65 cv
101.928 307.708 100.055 311.702 98.7141 315.478 cv
.164706 .603922 .439216 rgb
f
120.445 321.654 mo
119.855 321.577 119.268 321.494 118.687 321.406 cv
117.048 318.606 115.498 315.626 114.067 312.49 cv
104.37 291.24 103.63 270.413 111.883 263.758 cv
108.377 267.459 106.856 274.157 107.318 282.424 cv
107.308 282.426 107.298 282.429 107.288 282.431 cv
107.316 283.016 107.381 283.581 107.442 284.164 cv
107.691 287.034 108.168 290.072 108.871 293.224 cv
109.055 294.047 109.254 294.879 109.469 295.716 cv
110.775 300.812 112.654 306.157 115.105 311.53 cv
115.105 311.53 li
115.105 311.53 li
116.743 315.12 118.54 318.51 120.445 321.654 cv
106.164 256.97 mo
107.179 255.942 108.321 255.11 109.607 254.518 cv
109.608 254.517 109.61 254.517 109.611 254.516 cv
109.621 254.512 109.63 254.507 109.64 254.503 cv
109.897 254.404 li
110.118 254.897 li
109.601 255.049 109.095 255.237 108.602 255.462 cv
107.726 255.861 106.914 256.366 106.164 256.97 cv
.94902 .898039 .854902 rgb
f
118.687 321.406 mo
116.076 321.012 113.567 320.516 111.18 319.927 cv
111.178 319.924 111.178 319.923 111.176 319.92 cv
111.176 319.92 111.176 319.92 111.176 319.92 cv
110.341 318.291 109.532 316.623 108.752 314.915 cv
108.752 314.915 li
108.752 314.915 li
107.109 311.313 105.688 307.722 104.477 304.187 cv
104.476 304.19 104.474 304.192 104.473 304.195 cv
104.472 304.192 li
104.41 304.011 104.349 303.831 104.288 303.65 cv
103.984 302.749 103.695 301.852 103.42 300.96 cv
103.422 300.957 103.424 300.954 103.425 300.951 cv
101.969 296.229 100.906 291.639 100.241 287.297 cv
100.239 287.298 100.237 287.298 100.235 287.299 cv
100.235 287.298 li
100.25 287.292 100.264 287.286 100.279 287.28 cv
100.128 286.292 99.9828 285.313 99.8721 284.353 cv
99.8654 284.356 99.8583 284.358 99.8516 284.36 cv
99.8281 284.153 99.8052 283.95 99.7827 283.753 cv
99.781 283.753 99.7799 283.754 99.7782 283.754 cv
98.4717 271.463 100.568 261.594 106.067 257.068 cv
106.099 257.035 106.131 257.003 106.164 256.97 cv
106.914 256.366 107.726 255.861 108.602 255.462 cv
109.095 255.237 109.601 255.049 110.118 254.897 cv
113.6 262.647 li
112.989 262.955 112.417 263.327 111.883 263.758 cv
103.63 270.413 104.37 291.24 114.067 312.49 cv
115.498 315.626 117.048 318.606 118.687 321.406 cv
.94902 .313725 .227451 rgb
f
132.24 323.438 mo
131.769 323.438 131.297 323.434 130.822 323.428 cv
105.666 323.078 85.4082 313.557 85.561 302.157 cv
85.597 299.557 86.6977 297.088 88.6713 294.828 cv
87.3263 296.769 86.6354 298.882 86.5985 301.169 cv
86.5984 301.178 86.5983 301.187 86.5981 301.196 cv
86.5981 301.196 li
86.598 301.205 86.5979 301.213 86.5978 301.222 cv
86.5978 301.223 86.5978 301.225 86.5978 301.227 cv
86.5977 301.234 86.5976 301.243 86.5975 301.25 cv
86.5975 301.253 86.5975 301.254 86.5975 301.256 cv
86.5975 301.264 86.5974 301.273 86.5974 301.28 cv
86.5974 301.282 86.5974 301.283 86.5974 301.284 cv
86.5973 301.292 86.5973 301.298 86.5973 301.306 cv
86.5973 301.308 86.5973 301.31 86.5973 301.312 cv
86.5973 301.319 86.5973 301.327 86.5973 301.335 cv
86.5973 301.337 86.5973 301.339 86.5973 301.341 cv
86.5973 301.349 86.5973 301.357 86.5974 301.365 cv
86.5974 301.366 86.5974 301.368 86.5974 301.37 cv
86.5974 301.377 86.5975 301.385 86.5975 301.393 cv
86.5975 301.394 86.5975 301.395 86.5975 301.395 cv
86.5976 301.404 86.5977 301.413 86.5978 301.421 cv
86.5978 301.423 86.5978 301.423 86.5978 301.425 cv
86.5979 301.434 86.598 301.441 86.5981 301.451 cv
86.5981 301.451 86.5981 301.452 86.5981 301.453 cv
86.6622 306.202 90.2656 310.613 96.2796 314.157 cv
97.0522 314.612 97.8644 315.053 98.7141 315.478 cv
98.9141 315.579 99.1177 315.679 99.3219 315.777 cv
102.749 317.429 106.751 318.836 111.18 319.927 cv
113.567 320.516 116.076 321.012 118.687 321.406 cv
119.268 321.494 119.855 321.577 120.445 321.654 cv
122.718 321.952 125.059 322.173 127.458 322.311 cv
128.882 322.393 130.325 322.445 131.785 322.467 cv
131.81 322.467 131.835 322.467 131.86 322.468 cv
131.86 322.468 li
131.888 322.468 131.917 322.469 131.945 322.469 cv
132.389 322.475 132.83 322.477 133.271 322.477 cv
135.686 322.477 138.056 322.392 140.365 322.226 cv
140.746 323.074 li
137.994 323.313 135.151 323.438 132.24 323.438 cv
80.9433 294.906 mo
84.4277 290.33 90.8729 286.513 99.7783 283.755 cv
99.7783 283.755 li
99.7799 283.754 99.781 283.753 99.7827 283.753 cv
99.8052 283.95 99.8281 284.153 99.8516 284.36 cv
91.4991 286.95 84.8794 290.598 80.9433 294.906 cv
.94902 .898039 .854902 rgb
f
76.9393 304.581 mo
76.9393 304.581 li
76.9393 304.581 li
76.9386 304.563 mo
76.9386 304.562 76.9386 304.563 76.9386 304.562 cv
76.9386 304.563 li
76.938 304.546 mo
76.9379 304.544 76.9379 304.543 76.9378 304.541 cv
76.9379 304.543 76.9379 304.545 76.938 304.546 cv
76.9373 304.528 mo
76.9373 304.526 76.9372 304.524 76.9371 304.522 cv
76.9372 304.524 76.9373 304.526 76.9373 304.528 cv
76.9367 304.51 mo
76.9366 304.507 76.9365 304.504 76.9364 304.501 cv
76.9365 304.504 76.9366 304.507 76.9367 304.51 cv
76.9361 304.492 mo
76.936 304.487 76.9359 304.483 76.9357 304.478 cv
76.9358 304.482 76.936 304.488 76.9361 304.492 cv
76.9356 304.473 mo
76.9348 304.447 76.9341 304.421 76.9335 304.395 cv
76.9341 304.421 76.9348 304.447 76.9356 304.473 cv
76.9335 304.394 mo
76.9333 304.388 76.9332 304.381 76.9331 304.375 cv
76.9332 304.382 76.9333 304.388 76.9335 304.394 cv
76.9331 304.375 mo
76.9329 304.368 76.9328 304.362 76.9327 304.356 cv
76.9328 304.362 76.9329 304.368 76.9331 304.375 cv
76.9326 304.354 mo
76.9311 304.276 76.9304 304.197 76.9305 304.118 cv
76.9304 304.197 76.9311 304.275 76.9326 304.354 cv
76.9305 304.117 mo
76.9305 304.111 76.9306 304.105 76.9306 304.099 cv
76.9306 304.105 76.9305 304.11 76.9305 304.117 cv
76.9306 304.096 mo
76.9306 304.091 76.9306 304.085 76.9307 304.079 cv
76.9306 304.085 76.9306 304.091 76.9306 304.096 cv
76.9307 304.077 mo
76.9307 304.071 76.9307 304.065 76.9308 304.059 cv
76.9307 304.065 76.9307 304.071 76.9307 304.077 cv
76.9308 304.057 mo
76.9308 304.051 76.9309 304.046 76.9309 304.04 cv
76.9309 304.046 76.9308 304.051 76.9308 304.057 cv
76.9309 304.037 mo
76.931 304.032 76.9311 304.026 76.9311 304.02 cv
76.9311 304.026 76.931 304.031 76.9309 304.037 cv
76.9311 304.018 mo
76.9312 304.012 76.9313 304.006 76.9313 304 cv
76.9313 304.006 76.9312 304.012 76.9311 304.018 cv
76.9314 303.998 mo
76.9314 303.992 76.9315 303.985 76.9316 303.978 cv
76.9315 303.985 76.9314 303.991 76.9314 303.998 cv
76.9316 303.978 mo
76.9317 303.971 76.9318 303.963 76.9319 303.955 cv
76.9318 303.963 76.9317 303.971 76.9316 303.978 cv
76.932 303.953 mo
76.9321 303.945 76.9322 303.938 76.9324 303.931 cv
76.9322 303.938 76.9321 303.945 76.932 303.953 cv
76.9324 303.93 mo
76.9328 303.906 76.9333 303.883 76.9339 303.859 cv
76.9333 303.883 76.9328 303.906 76.9324 303.93 cv
76.9339 303.857 mo
76.9341 303.85 76.9343 303.843 76.9345 303.836 cv
76.9343 303.843 76.9341 303.85 76.9339 303.857 cv
76.9345 303.833 mo
76.9347 303.825 76.9349 303.818 76.9352 303.81 cv
76.9349 303.818 76.9347 303.826 76.9345 303.833 cv
76.9352 303.81 mo
76.9354 303.803 76.9356 303.796 76.9358 303.789 cv
76.9356 303.796 76.9354 303.803 76.9352 303.81 cv
76.9361 303.78 mo
76.9362 303.776 76.9363 303.773 76.9364 303.77 cv
76.9363 303.773 76.9362 303.776 76.9361 303.78 cv
107.319 281.734 mo
107.318 281.719 107.318 281.704 107.317 281.689 cv
107.317 281.689 li
107.318 281.704 107.318 281.719 107.319 281.734 cv
107.317 281.689 mo
107.427 281.665 107.537 281.641 107.647 281.616 cv
107.536 281.641 107.427 281.665 107.317 281.689 cv
107.651 281.615 mo
107.675 281.61 107.698 281.605 107.722 281.6 cv
107.698 281.605 107.675 281.61 107.651 281.615 cv
107.764 281.591 mo
107.767 281.59 107.771 281.589 107.774 281.589 cv
107.771 281.589 107.767 281.59 107.764 281.591 cv
0 .203922 .309804 rgb
f
121.08 279.62 mo
121.182 279.524 li
121.22 279.608 li
121.173 279.612 121.126 279.616 121.08 279.62 cv
.164706 .603922 .439216 rgb
f
107.359 282.415 mo
107.346 282.188 107.33 281.958 107.319 281.734 cv
107.318 281.719 107.318 281.704 107.317 281.689 cv
107.317 281.689 li
107.427 281.665 107.536 281.641 107.647 281.616 cv
107.648 281.616 107.65 281.616 107.651 281.615 cv
107.675 281.61 107.698 281.605 107.722 281.6 cv
107.736 281.597 107.75 281.594 107.764 281.591 cv
107.767 281.59 107.771 281.589 107.774 281.589 cv
111.929 280.684 116.392 280.024 121.066 279.632 cv
121.08 279.62 li
121.126 279.616 121.173 279.612 121.22 279.608 cv
121.582 280.414 li
116.603 280.735 111.981 281.388 107.359 282.415 cv
.94902 .898039 .854902 rgb
f
99.3922 331.354 mo
100.943 329.589 101.551 327.117 100.902 324.779 cv
101.32 324.912 101.741 325.041 102.168 325.168 cv
102.35 327.543 101.319 329.891 99.3922 331.354 cv
89.8009 320.992 mo
89.9689 320.802 90.1456 320.62 90.336 320.447 cv
90.3895 320.476 90.4434 320.504 90.4972 320.532 cv
90.254 320.673 90.0214 320.827 89.8009 320.992 cv
f
94.0618 333.766 mo
93.1638 333.766 92.2788 333.594 91.4541 333.269 cv
91.4541 333.268 91.4541 333.266 91.4541 333.265 cv
90.0847 332.723 88.8792 331.762 88.0555 330.454 cv
87.888 330.188 87.7363 329.907 87.6021 329.613 cv
87.5991 329.607 87.596 329.6 87.593 329.593 cv
87.5923 329.592 87.5916 329.59 87.5908 329.589 cv
87.5886 329.584 87.5863 329.579 87.5841 329.574 cv
87.5832 329.572 87.5824 329.57 87.5815 329.568 cv
87.5793 329.563 87.5771 329.558 87.575 329.553 cv
87.5742 329.551 87.5734 329.55 87.5726 329.548 cv
87.5702 329.543 87.568 329.537 87.5656 329.532 cv
87.5651 329.531 87.5645 329.53 87.5639 329.528 cv
87.5612 329.522 87.5586 329.516 87.5559 329.51 cv
87.5557 329.51 87.5554 329.509 87.5551 329.508 cv
87.5431 329.481 87.5311 329.453 87.5194 329.425 cv
87.5192 329.425 87.5192 329.425 87.5191 329.424 cv
87.5162 329.418 87.5134 329.411 87.5105 329.404 cv
87.5105 329.404 87.5104 329.404 87.5103 329.404 cv
87.4752 329.32 87.4419 329.236 87.4102 329.151 cv
87.4101 329.151 87.41 329.151 87.4098 329.15 cv
87.4073 329.144 87.4049 329.137 87.4024 329.13 cv
87.4023 329.13 87.4021 329.129 87.4019 329.129 cv
87.3994 329.122 87.3969 329.115 87.3944 329.109 cv
87.3943 329.108 87.3943 329.108 87.3943 329.108 cv
87.3866 329.087 87.3791 329.067 87.3716 329.046 cv
87.3711 329.044 87.3708 329.043 87.3703 329.042 cv
87.3683 329.036 87.3664 329.031 87.3645 329.026 cv
87.3638 329.024 87.3632 329.022 87.3625 329.02 cv
87.3608 329.015 87.3592 329.011 87.3575 329.006 cv
87.3567 329.004 87.3559 329.001 87.3551 328.999 cv
87.3536 328.995 87.352 328.99 87.3505 328.986 cv
87.3497 328.983 87.3488 328.981 87.348 328.979 cv
87.3465 328.974 87.345 328.97 87.3436 328.966 cv
87.3427 328.963 87.3418 328.961 87.341 328.958 cv
87.3394 328.953 87.3377 328.949 87.3361 328.944 cv
87.3344 328.939 87.3326 328.934 87.3309 328.928 cv
87.3299 328.926 87.3289 328.923 87.3279 328.92 cv
87.3265 328.915 87.3248 328.91 87.3233 328.906 cv
87.3228 328.904 87.3221 328.902 87.3215 328.9 cv
87.3199 328.896 87.3183 328.891 87.3168 328.886 cv
87.3162 328.885 87.3157 328.883 87.3152 328.881 cv
87.3136 328.876 87.312 328.872 87.3103 328.867 cv
87.3099 328.865 87.3095 328.864 87.3091 328.863 cv
87.3073 328.857 87.3056 328.852 87.3038 328.847 cv
87.3037 328.846 87.3036 328.846 87.3036 328.846 cv
86.3683 325.957 87.3986 322.808 89.7866 321.008 cv
89.7914 321.002 89.7961 320.997 89.8009 320.992 cv
90.0214 320.827 90.254 320.673 90.4972 320.532 cv
93.5576 322.135 97.0537 323.564 100.902 324.779 cv
101.551 327.117 100.943 329.589 99.3922 331.354 cv
99.3858 331.359 99.3795 331.363 99.3731 331.368 cv
99.001 331.788 98.5766 332.166 98.103 332.493 cv
98.1037 332.495 98.1044 332.497 98.1051 332.5 cv
98.105 332.5 98.1049 332.5 98.1047 332.5 cv
97.7638 332.735 97.3975 332.944 97.0074 333.122 cv
96.9934 333.128 96.9793 333.135 96.9653 333.141 cv
96.0216 333.565 95.0338 333.766 94.0618 333.766 cv
.94902 .313725 .227451 rgb
f
132.535 329.281 mo
132.538 329.279 132.542 329.276 132.545 329.273 cv
132.246 329.274 131.947 329.275 131.648 329.275 cv
131.373 329.275 131.098 329.274 130.822 329.271 cv
130.794 329.27 130.765 329.27 130.738 329.269 cv
130.738 329.269 li
130.722 329.269 130.706 329.269 130.69 329.269 cv
130.583 329.267 130.475 329.266 130.368 329.264 cv
130.355 329.264 130.342 329.263 130.329 329.263 cv
130.327 329.263 130.322 329.263 130.32 329.263 cv
128.689 329.234 127.078 329.171 125.485 329.08 cv
125.486 329.081 125.487 329.082 125.487 329.083 cv
125.485 329.083 125.482 329.082 125.481 329.082 cv
124.863 329.047 124.247 329.006 123.636 328.962 cv
120.965 328.766 118.357 328.482 115.826 328.118 cv
115.824 328.115 115.822 328.112 115.82 328.109 cv
110.948 327.409 106.363 326.411 102.168 325.161 cv
102.168 325.163 102.168 325.166 102.168 325.168 cv
101.741 325.041 101.32 324.912 100.902 324.779 cv
97.0537 323.564 93.5576 322.135 90.4972 320.532 cv
90.4434 320.504 90.3895 320.476 90.336 320.447 cv
90.3378 320.446 90.3395 320.444 90.3413 320.442 cv
82.1946 316.137 77.176 310.595 76.9393 304.581 cv
76.9393 304.581 li
76.939 304.575 76.9388 304.569 76.9386 304.563 cv
76.9386 304.562 li
76.9384 304.557 76.9382 304.551 76.938 304.546 cv
76.9379 304.545 76.9379 304.543 76.9378 304.541 cv
76.9377 304.537 76.9375 304.533 76.9373 304.528 cv
76.9373 304.526 76.9372 304.524 76.9371 304.522 cv
76.937 304.518 76.9368 304.514 76.9367 304.51 cv
76.9366 304.507 76.9365 304.504 76.9364 304.501 cv
76.9363 304.498 76.9362 304.495 76.9361 304.492 cv
76.936 304.488 76.9358 304.482 76.9357 304.478 cv
76.9357 304.476 76.9356 304.475 76.9356 304.473 cv
76.9348 304.447 76.9341 304.421 76.9335 304.395 cv
76.9335 304.394 76.9335 304.395 76.9335 304.394 cv
76.9333 304.388 76.9332 304.382 76.9331 304.375 cv
76.9331 304.375 li
76.9329 304.368 76.9328 304.362 76.9327 304.356 cv
76.9327 304.355 76.9326 304.355 76.9326 304.354 cv
76.9311 304.275 76.9304 304.197 76.9305 304.118 cv
76.9305 304.117 76.9305 304.117 76.9305 304.117 cv
76.9305 304.11 76.9306 304.105 76.9306 304.099 cv
76.9306 304.098 76.9306 304.097 76.9306 304.096 cv
76.9306 304.091 76.9306 304.085 76.9307 304.079 cv
76.9307 304.078 76.9307 304.077 76.9307 304.077 cv
76.9307 304.071 76.9307 304.065 76.9308 304.059 cv
76.9308 304.058 76.9308 304.058 76.9308 304.057 cv
76.9308 304.051 76.9309 304.046 76.9309 304.04 cv
76.9309 304.039 76.9309 304.038 76.9309 304.037 cv
76.931 304.031 76.9311 304.026 76.9311 304.02 cv
76.9311 304.019 76.9311 304.019 76.9311 304.018 cv
76.9312 304.012 76.9313 304.006 76.9313 304 cv
76.9313 303.999 76.9313 303.999 76.9314 303.998 cv
76.9314 303.991 76.9315 303.985 76.9316 303.978 cv
76.9316 303.978 li
76.9316 303.978 li
76.9317 303.971 76.9318 303.963 76.9319 303.955 cv
76.932 303.955 76.932 303.953 76.932 303.953 cv
76.9321 303.945 76.9322 303.938 76.9324 303.931 cv
76.9324 303.931 76.9324 303.93 76.9324 303.93 cv
76.9328 303.906 76.9333 303.883 76.9339 303.859 cv
76.9339 303.858 76.9339 303.858 76.9339 303.857 cv
76.9341 303.85 76.9343 303.843 76.9345 303.836 cv
76.9345 303.835 76.9345 303.834 76.9345 303.833 cv
76.9347 303.826 76.9349 303.818 76.9352 303.81 cv
76.9352 303.81 li
76.9354 303.803 76.9356 303.796 76.9358 303.789 cv
76.9359 303.786 76.936 303.783 76.9361 303.78 cv
76.9362 303.776 76.9363 303.773 76.9364 303.77 cv
77.0365 300.663 78.4288 297.715 80.856 295.021 cv
80.8849 294.983 80.9139 294.944 80.9433 294.906 cv
84.8794 290.598 91.4991 286.95 99.8516 284.36 cv
99.8583 284.358 99.8654 284.356 99.8721 284.353 cv
99.9828 285.313 100.128 286.292 100.279 287.28 cv
100.264 287.286 100.25 287.292 100.235 287.298 cv
95.2051 289.35 91.2139 291.916 88.6713 294.828 cv
86.6977 297.088 85.597 299.557 85.561 302.157 cv
85.4082 313.557 105.666 323.078 130.822 323.428 cv
131.297 323.434 131.769 323.438 132.24 323.438 cv
135.151 323.438 137.994 323.313 140.746 323.074 cv
143.305 328.77 li
142.917 328.807 142.532 328.847 142.142 328.878 cv
142.14 328.88 142.138 328.882 142.136 328.883 cv
142.124 328.884 142.113 328.885 142.101 328.886 cv
139.058 329.138 135.92 329.273 132.714 329.281 cv
132.657 329.281 132.602 329.281 132.544 329.281 cv
132.542 329.281 132.537 329.281 132.535 329.281 cv
.941176 .521569 .0156863 rgb
f
107.513 284.881 mo
107.508 284.843 li
107.488 284.613 107.465 284.387 107.442 284.164 cv
107.381 283.581 107.316 283.016 107.288 282.431 cv
107.298 282.429 107.308 282.426 107.318 282.424 cv
107.32 282.424 107.322 282.423 107.324 282.423 cv
107.324 282.423 107.324 282.423 107.324 282.423 cv
107.359 282.415 li
107.359 282.415 107.359 282.415 107.359 282.415 cv
111.981 281.388 116.603 280.735 121.582 280.414 cv
122.459 282.367 li
121.998 282.398 121.541 282.433 121.087 282.472 cv
121.069 282.473 121.052 282.475 121.034 282.476 cv
119.948 282.568 118.882 282.68 117.833 282.811 cv
114.236 283.262 110.84 283.945 107.513 284.881 cv
f
174.809 315.577 mo
174.357 316.808 172.317 317.189 170.254 316.429 cv
168.191 315.669 166.885 314.055 167.34 312.825 cv
167.793 311.596 169.833 311.214 171.895 311.974 cv
173.958 312.734 175.264 314.348 174.809 315.577 cv
1 1 1 rgb
f
131.025 259.547 mo
130.573 260.777 128.533 261.159 126.47 260.398 cv
124.407 259.639 123.101 258.024 123.556 256.795 cv
124.009 255.565 126.048 255.184 128.111 255.943 cv
130.174 256.704 131.479 258.317 131.025 259.547 cv
cp
f
157.938 155.611 mo
157.352 153.146 156.602 150.599 155.691 148.003 cv
158.479 143.279 160.6 138.615 161.984 134.273 cv
166.439 136.803 169.143 140.01 169.232 143.568 cv
169.348 148.238 164.977 152.545 157.938 155.611 cv
cp
151.441 176.37 mo
147.27 178.472 141.508 176.362 135.725 171.313 cv
138.357 169.205 140.996 166.776 143.57 164.059 cv
148.336 163.479 152.783 162.532 156.766 161.295 cv
157.254 168.671 155.508 174.32 151.441 176.37 cv
cp
111.833 172.491 mo
109.026 170.302 108.056 166.22 108.675 161.136 cv
112.988 162.605 118 163.676 123.457 164.247 cv
125 166.523 126.601 168.642 128.234 170.579 cv
121.581 174.41 115.519 175.362 111.833 172.491 cv
cp
99.5547 145.301 mo
99.4414 140.749 103.613 136.558 110.338 133.505 cv
110.975 136.806 111.923 140.282 113.176 143.85 cv
110.907 147.698 109.084 151.505 107.735 155.131 cv
102.713 152.527 99.6509 149.109 99.5547 145.301 cv
cp
120.258 159.151 mo
116.304 158.433 112.737 157.383 109.721 156.069 cv
110.637 152.859 112.045 149.411 113.92 145.881 cv
114.985 148.681 116.229 151.523 117.663 154.369 cv
118.493 156.017 119.363 157.608 120.258 159.151 cv
cp
132.273 167.945 mo
131.325 166.922 130.384 165.826 129.458 164.66 cv
131.24 164.723 133.053 164.737 134.896 164.692 cv
135.405 164.68 135.909 164.657 136.414 164.637 cv
135.034 165.847 133.649 166.947 132.273 167.945 cv
cp
154.57 149.848 mo
155.244 152.08 155.77 154.256 156.145 156.341 cv
153.762 157.253 151.13 158.034 148.294 158.65 cv
148.61 158.258 148.928 157.865 149.24 157.464 cv
151.203 154.946 152.979 152.394 154.57 149.848 cv
cp
120.078 114.129 mo
127.867 110.205 141.203 120.958 149.862 138.144 cv
150.882 140.166 151.787 142.188 152.585 144.187 cv
150.73 147.672 148.432 151.232 145.716 154.717 cv
144.321 156.506 142.879 158.19 141.411 159.769 cv
139.269 160.01 137.057 160.167 134.787 160.223 cv
131.77 160.298 128.837 160.196 126.036 159.939 cv
124.487 157.591 123.013 155.054 121.654 152.357 cv
112.995 135.172 112.288 118.056 120.078 114.129 cv
cp
154.685 117.522 mo
159.714 121.442 158.914 131.398 153.498 142.402 cv
152.792 140.764 152.029 139.118 151.199 137.471 cv
149.766 134.624 148.221 131.934 146.604 129.411 cv
150.551 130.005 154.151 130.921 157.275 132.094 cv
157.444 131.36 157.578 130.645 157.691 129.939 cv
153.982 128.873 149.85 128.072 145.416 127.607 cv
143.293 124.477 141.063 121.645 138.788 119.168 cv
145.242 115.582 151.094 114.723 154.685 117.522 cv
cp
175.852 144.893 mo
175.718 139.563 170.691 134.884 162.734 131.668 cv
164.881 123.354 164.108 116.521 159.902 113.242 cv
154.945 109.377 146.354 111.362 137.225 117.529 cv
129.461 109.693 121.41 106.087 115.788 108.92 cv
110.166 111.754 108.272 120.37 109.951 131.272 cv
99.5645 134.94 92.8535 140.662 93.0107 146.949 cv
93.144 152.28 98.1743 156.966 106.133 160.188 cv
103.984 168.496 104.756 175.321 108.959 178.599 cv
113.921 182.467 122.515 180.496 131.648 174.32 cv
139.409 182.15 147.457 185.753 153.076 182.922 cv
158.695 180.089 160.588 171.479 158.913 160.582 cv
169.311 156.916 176.008 151.183 175.852 144.893 cv
cp
0 .156863 .25098 rgb
f
134 128.646 mo
137.638 128.555 141.146 128.723 144.455 129.11 cv
144.049 128.525 143.641 127.96 143.224 127.407 cv
140.24 127.17 137.147 127.067 133.964 127.148 cv
131.865 127.2 129.812 127.331 127.801 127.52 cv
130.832 124.6 133.925 122.142 136.928 120.259 cv
136.402 119.764 135.881 119.299 135.354 118.852 cv
131.992 121.315 128.587 124.317 125.288 127.791 cv
121.587 128.246 118.07 128.914 114.816 129.773 cv
114.87 130.399 114.942 131.046 115.022 131.695 cv
117.646 130.846 120.526 130.151 123.588 129.636 cv
122.24 131.14 120.914 132.718 119.622 134.375 cv
118.487 135.832 117.436 137.298 116.426 138.769 cv
116.595 139.395 116.791 140.032 116.983 140.667 cv
118.15 138.87 119.42 137.072 120.804 135.296 cv
122.495 133.126 124.258 131.121 126.05 129.266 cv
128.602 128.93 131.26 128.714 134 128.646 cv
cp
f
132.192 148.446 mo
129.831 149.637 126.953 148.688 125.764 146.328 cv
124.574 143.965 125.524 141.088 127.885 139.897 cv
130.245 138.708 133.123 139.656 134.313 142.02 cv
135.502 144.379 134.552 147.256 132.192 148.446 cv
cp
129.29 135.71 mo
124.214 138.27 122.171 144.455 124.729 149.531 cv
127.285 154.604 133.472 156.644 138.549 154.087 cv
143.622 151.529 145.663 145.344 143.107 140.27 cv
140.549 135.194 134.363 133.155 129.29 135.71 cv
cp
f
289.381 180.196 mo
280.895 182.026 li
274.998 154.681 li
283.484 152.851 li
289.381 180.196 li
1 .34902 .266667 rgb
f
311.416 148.805 mo
312.09 151.929 310.348 154.956 307.525 155.566 cv
254.213 167.059 li
251.389 167.667 248.555 165.627 247.881 162.504 cv
239.342 122.902 li
238.668 119.777 240.41 116.75 243.232 116.141 cv
296.547 104.647 li
299.371 104.039 302.203 106.077 302.877 109.203 cv
311.416 148.805 li
.392157 .858824 .717647 rgb
f
254.594 161.568 mo
253.797 161.74 252.992 161.162 252.803 160.28 cv
244.742 122.9 li
244.553 122.017 245.047 121.159 245.846 120.987 cv
296.164 110.137 li
296.961 109.964 297.766 110.543 297.955 111.426 cv
306.016 148.806 li
306.205 149.687 305.711 150.545 304.914 150.718 cv
254.594 161.568 li
.172549 .670588 .513726 rgb
f
261.016 140.929 mo
260.93 140.978 260.828 141.017 260.717 141.043 cv
259.893 141.245 259.143 141.533 258.463 141.905 cv
258.133 142.088 257.791 142.313 257.441 142.574 cv
257.088 142.836 256.727 143.139 256.357 143.484 cv
256.684 144.072 257.145 144.958 257.744 146.137 cv
257.982 145.982 258.803 145.424 260.203 144.46 cv
261.002 143.911 261.514 143.573 261.738 143.45 cv
262 143.304 262.27 143.263 262.547 143.328 cv
262.824 143.389 263.039 143.557 263.189 143.833 cv
263.48 144.36 263.363 144.815 262.84 145.195 cv
262.502 145.417 261.998 145.751 261.328 146.202 cv
260.74 146.621 259.84 147.227 258.633 148.028 cv
258.912 148.608 259.146 149.068 259.338 149.414 cv
259.816 150.28 260.137 150.747 260.305 150.807 cv
260.385 150.838 260.68 150.715 261.189 150.433 cv
261.463 150.282 261.873 150.046 262.42 149.729 cv
262.965 149.411 263.373 149.176 263.648 149.025 cv
263.736 148.976 263.861 148.89 264.016 148.767 cv
264.174 148.647 264.297 148.564 264.381 148.515 cv
264.637 148.376 264.897 148.328 265.158 148.374 cv
265.457 148.421 265.687 148.594 265.852 148.89 cv
266.125 149.386 266.029 149.827 265.566 150.208 cv
265.17 150.537 264.275 151.084 262.881 151.854 cv
261.439 152.65 260.393 152.973 259.74 152.827 cv
259.02 152.663 258.266 151.868 257.479 150.44 cv
257.15 149.845 256.703 148.931 256.133 147.695 cv
255.564 146.462 255.117 145.55 254.793 144.962 cv
254.709 144.806 254.559 144.592 254.348 144.312 cv
254.137 144.032 253.988 143.816 253.902 143.662 cv
253.533 142.99 253.656 142.483 254.275 142.14 cv
254.469 142.032 254.678 141.99 254.902 142.009 cv
255.346 141.598 255.779 141.232 256.209 140.913 cv
256.633 140.594 257.053 140.322 257.463 140.094 cv
258.58 139.479 259.541 139.115 260.352 139.003 cv
260.844 138.935 261.203 139.102 261.426 139.509 cv
261.553 139.74 261.586 139.986 261.525 140.25 cv
261.461 140.552 261.291 140.779 261.016 140.929 cv
1 1 1 rgb
f
271.838 143.649 mo
271.547 143.808 271.105 144.045 270.516 144.357 cv
269.926 144.666 269.484 144.903 269.193 145.065 cv
269.059 145.137 268.867 145.255 268.611 145.417 cv
268.355 145.577 268.164 145.694 268.029 145.768 cv
267.779 145.907 267.531 145.951 267.285 145.901 cv
267.043 145.849 266.857 145.71 266.728 145.481 cv
266.465 145.001 266.596 144.595 267.121 144.26 cv
267.568 143.973 267.977 143.73 268.344 143.526 cv
268.635 143.366 269.076 143.127 269.666 142.817 cv
270.256 142.505 270.695 142.269 270.988 142.108 cv
271.236 141.97 271.48 141.933 271.723 141.99 cv
271.965 142.046 272.148 142.185 272.27 142.406 cv
272.391 142.627 272.412 142.855 272.332 143.09 cv
272.252 143.326 272.086 143.51 271.838 143.649 cv
270.076 140.397 mo
267.063 142.061 li
266.963 142.112 266.82 142.2 266.631 142.315 cv
266.441 142.43 266.299 142.515 266.199 142.569 cv
265.959 142.703 265.719 142.736 265.482 142.672 cv
265.244 142.606 265.066 142.465 264.945 142.248 cv
264.65 141.713 264.93 141.211 265.779 140.741 cv
265.83 140.712 265.908 140.672 266.016 140.621 cv
266.215 140.512 li
269.225 138.857 li
269.469 138.725 269.707 138.687 269.943 138.748 cv
270.18 138.806 270.359 138.947 270.482 139.168 cv
270.605 139.389 270.627 139.615 270.551 139.847 cv
270.475 140.081 270.316 140.263 270.076 140.397 cv
f
275.75 137.058 mo
275.947 137.886 276.262 139.12 276.703 140.763 cv
276.897 141.31 277.09 141.853 277.281 142.393 cv
277.447 143.121 277.287 143.619 276.801 143.887 cv
276.494 144.055 276.195 144.083 275.904 143.975 cv
275.656 143.88 275.467 143.711 275.332 143.468 cv
274.937 142.752 274.607 141.794 274.344 140.595 cv
273.945 138.799 273.719 137.809 273.662 137.622 cv
273.414 136.869 273.17 136.116 272.928 135.359 cv
272.607 134.315 272.478 133.572 272.539 133.129 cv
272.6 132.689 272.807 132.372 273.158 132.178 cv
273.561 131.955 273.971 131.995 274.385 132.296 cv
274.775 132.583 275.4 133.267 276.26 134.344 cv
277.092 135.39 278.066 136.473 279.186 137.593 cv
278.965 136.001 278.639 134.299 278.205 132.491 cv
277.736 130.76 li
277.625 129.997 277.818 129.475 278.32 129.2 cv
278.801 128.934 279.361 129.103 280.002 129.707 cv
280.262 129.95 280.674 130.446 281.23 131.194 cv
282.527 132.937 283.74 134.373 284.871 135.503 cv
286.022 136.653 286.627 137.287 286.693 137.408 cv
286.836 137.667 286.852 137.946 286.742 138.236 cv
286.637 138.502 286.461 138.704 286.219 138.837 cv
285.734 139.103 285.188 138.957 284.572 138.396 cv
283.312 136.996 li
282.662 136.317 281.803 135.3 280.73 133.946 cv
280.857 134.647 281.043 135.761 281.283 137.285 cv
281.559 138.723 li
281.662 139.297 281.711 139.789 281.705 140.194 cv
281.699 140.734 281.484 141.123 281.064 141.355 cv
280.647 141.582 280.193 141.512 279.701 141.146 cv
278.648 140.116 li
277.678 139.172 276.711 138.153 275.75 137.058 cv
f
290.553 126.507 mo
290.156 126.726 289.744 126.678 289.322 126.365 cv
289.127 126.214 288.973 126.143 288.859 126.153 cv
288.777 126.159 288.592 126.239 288.311 126.397 cv
287.752 126.704 287.35 127.49 287.096 128.76 cv
286.744 130.538 286.859 131.955 287.443 133.011 cv
287.709 133.494 288.1 133.817 288.609 133.983 cv
289.125 134.151 289.609 134.11 290.059 133.862 cv
290.498 133.62 290.877 133.259 291.201 132.78 cv
291.314 132.609 291.531 132.205 291.852 131.573 cv
292.068 131.154 292.268 130.893 292.443 130.797 cv
292.709 130.65 292.988 130.623 293.281 130.714 cv
293.555 130.8 293.754 130.96 293.885 131.197 cv
294.027 131.456 294.039 131.749 293.916 132.068 cv
293.266 133.767 292.311 134.963 291.051 135.659 cv
290.057 136.208 289.016 136.31 287.93 135.964 cv
286.889 135.625 286.107 134.984 285.584 134.036 cv
284.766 132.556 284.58 130.685 285.025 128.425 cv
285.404 126.506 286.168 125.233 287.318 124.596 cv
287.512 124.49 287.693 124.399 287.857 124.327 cv
288.021 124.253 288.17 124.196 288.305 124.155 cv
288.395 123.86 288.576 123.635 288.85 123.483 cv
289.301 123.235 289.723 123.338 290.113 123.799 cv
290.393 124.128 290.672 124.542 290.945 125.037 cv
291.066 125.257 291.113 125.495 291.086 125.748 cv
291.049 126.079 290.871 126.331 290.553 126.507 cv
cp
f
295.625 120.925 mo
295.555 120.963 295.441 121.011 295.283 121.07 cv
295.125 121.125 295.014 121.169 294.949 121.205 cv
293.727 121.875 li
293.621 121.933 293.471 122.033 293.271 122.177 cv
293.072 122.321 292.92 122.424 292.811 122.483 cv
292.67 122.54 li
292.527 122.598 li
292.277 122.734 292.053 122.726 291.854 122.574 cv
291.727 122.477 291.592 122.294 291.445 122.031 cv
291.158 121.514 291.035 121.015 291.072 120.54 cv
291.102 120.175 291.24 119.748 291.488 119.26 cv
291.725 118.808 291.963 118.357 292.199 117.909 cv
292.461 117.347 292.48 116.867 292.256 116.462 cv
292.199 116.357 292.055 116.301 291.822 116.294 cv
291.59 116.285 291.391 116.328 291.225 116.418 cv
290.932 116.581 290.691 116.882 290.51 117.325 cv
290.326 117.768 290.174 118.024 290.051 118.091 cv
289.904 118.171 289.756 118.207 289.604 118.197 cv
289.418 118.183 289.281 118.098 289.195 117.941 cv
289.1 117.772 289.09 117.588 289.16 117.39 cv
289.332 116.909 289.504 116.532 289.68 116.258 cv
289.932 115.863 290.248 115.56 290.635 115.348 cv
291.113 115.083 291.615 114.971 292.139 115.011 cv
292.738 115.054 293.166 115.312 293.422 115.776 cv
293.682 116.246 293.795 116.707 293.762 117.156 cv
293.738 117.512 293.609 117.915 293.383 118.366 cv
293.156 118.776 292.93 119.184 292.703 119.59 cv
292.367 120.224 292.301 120.771 292.506 121.232 cv
292.646 121.128 292.861 120.984 293.141 120.795 cv
293.715 120.439 294.129 120.191 294.383 120.05 cv
294.621 119.919 294.885 119.84 295.174 119.815 cv
295.531 119.782 295.766 119.866 295.877 120.066 cv
295.955 120.209 295.973 120.363 295.932 120.528 cv
295.887 120.705 295.785 120.835 295.625 120.925 cv
cp
f
300.236 179.507 mo
270.719 185.872 li
268.889 177.383 li
298.406 171.019 li
300.236 179.507 li
.992157 .580392 .0196078 rgb
f
302.275 149.157 mo
302.484 150.131 301.303 151.214 299.639 151.574 cv
292.223 153.172 li
290.557 153.532 289.035 153.033 288.824 152.056 cv
288.674 151.35 li
288.461 150.373 289.643 149.292 291.311 148.932 cv
298.723 147.333 li
300.391 146.975 301.912 147.475 302.123 148.451 cv
302.275 149.157 li
cp
1 1 1 rgb
f
270.717 185.872 mo
268.889 177.385 li
268.889 177.385 li
270.719 185.871 li
270.717 185.872 li
279.404 175.116 mo
276.625 162.227 li
276.625 162.227 li
279.405 175.116 li
279.404 175.116 li
253.207 167.167 mo
250.745 167.167 248.473 165.256 247.881 162.504 cv
239.342 122.902 li
238.868 120.705 239.587 118.557 241.038 117.264 cv
239.588 118.558 238.868 120.705 239.342 122.902 cv
247.881 162.504 li
248.474 165.256 250.744 167.166 253.207 167.166 cv
253.54 167.166 253.877 167.131 254.213 167.059 cv
267.401 164.216 li
254.211 167.06 li
253.876 167.132 253.539 167.167 253.207 167.167 cv
0 .203922 .309804 rgb
f
279.405 175.116 mo
276.625 162.227 li
280.868 161.313 li
283.647 174.201 li
279.405 175.116 li
.94902 .313725 .227451 rgb
f
253.207 167.166 mo
250.744 167.166 248.474 165.256 247.881 162.504 cv
239.342 122.902 li
238.868 120.705 239.588 118.558 241.038 117.264 cv
241.65 116.717 242.394 116.323 243.232 116.142 cv
269.891 110.394 li
271.005 115.562 li
245.846 120.987 li
245.047 121.159 244.553 122.017 244.742 122.9 cv
252.803 160.28 li
252.97 161.057 253.614 161.598 254.31 161.598 cv
254.404 161.598 254.499 161.588 254.594 161.568 cv
279.754 156.143 li
280.868 161.313 li
276.625 162.227 li
276.625 162.227 li
276.625 162.227 li
267.401 164.216 li
254.213 167.059 li
253.877 167.131 253.54 167.166 253.207 167.166 cv
.372549 .772549 .611765 rgb
f
254.31 161.598 mo
253.614 161.598 252.97 161.057 252.803 160.28 cv
244.742 122.9 li
244.553 122.017 245.047 121.159 245.846 120.987 cv
271.005 115.562 li
274.663 132.531 li
274.56 132.435 274.467 132.357 274.385 132.296 cv
274.147 132.123 273.91 132.036 273.675 132.036 cv
273.501 132.036 273.329 132.083 273.158 132.178 cv
272.807 132.372 272.6 132.689 272.539 133.129 cv
272.478 133.572 272.607 134.315 272.928 135.359 cv
273.17 136.116 273.414 136.869 273.662 137.622 cv
273.719 137.809 273.945 138.799 274.344 140.595 cv
274.607 141.794 274.937 142.752 275.332 143.468 cv
275.467 143.711 275.656 143.88 275.904 143.975 cv
276.019 144.018 276.135 144.039 276.253 144.039 cv
276.432 144.039 276.615 143.989 276.801 143.887 cv
276.905 143.83 276.993 143.762 277.068 143.684 cv
279.754 156.143 li
254.594 161.568 li
254.499 161.588 254.404 161.598 254.31 161.598 cv
254.797 142.005 mo
254.612 142.005 254.438 142.049 254.275 142.14 cv
253.656 142.483 253.533 142.99 253.902 143.662 cv
253.988 143.816 254.137 144.032 254.348 144.312 cv
254.559 144.592 254.709 144.806 254.793 144.962 cv
255.117 145.55 255.564 146.462 256.133 147.695 cv
256.703 148.931 257.15 149.845 257.479 150.44 cv
258.266 151.868 259.02 152.663 259.74 152.827 cv
259.842 152.85 259.953 152.861 260.074 152.861 cv
260.728 152.861 261.664 152.526 262.881 151.854 cv
264.275 151.084 265.17 150.537 265.566 150.208 cv
266.029 149.827 266.125 149.386 265.852 148.89 cv
265.687 148.594 265.457 148.421 265.158 148.374 cv
265.094 148.362 265.031 148.357 264.967 148.357 cv
264.77 148.357 264.574 148.41 264.381 148.515 cv
264.297 148.564 264.174 148.647 264.016 148.767 cv
263.861 148.89 263.736 148.976 263.648 149.025 cv
263.373 149.176 262.965 149.411 262.42 149.729 cv
261.873 150.046 261.463 150.282 261.189 150.433 cv
260.731 150.687 260.447 150.812 260.336 150.812 cv
260.323 150.812 260.313 150.81 260.305 150.807 cv
260.137 150.747 259.816 150.28 259.338 149.414 cv
259.146 149.068 258.912 148.608 258.633 148.028 cv
259.84 147.227 260.74 146.621 261.328 146.202 cv
261.998 145.751 262.502 145.417 262.84 145.195 cv
263.363 144.815 263.48 144.36 263.189 143.833 cv
263.039 143.557 262.824 143.389 262.547 143.328 cv
262.462 143.308 262.378 143.298 262.295 143.298 cv
262.105 143.298 261.92 143.349 261.738 143.45 cv
261.514 143.573 261.002 143.911 260.203 144.46 cv
258.803 145.424 257.982 145.982 257.744 146.137 cv
257.145 144.958 256.684 144.072 256.357 143.484 cv
256.727 143.139 257.088 142.836 257.441 142.574 cv
257.791 142.313 258.133 142.088 258.463 141.905 cv
259.143 141.533 259.893 141.245 260.717 141.043 cv
260.828 141.017 260.93 140.978 261.016 140.929 cv
261.291 140.779 261.461 140.552 261.525 140.25 cv
261.586 139.986 261.553 139.74 261.426 139.509 cv
261.235 139.161 260.945 138.989 260.557 138.989 cv
260.492 138.989 260.423 138.993 260.352 139.003 cv
259.541 139.115 258.58 139.479 257.463 140.094 cv
257.053 140.322 256.633 140.594 256.209 140.913 cv
255.779 141.232 255.346 141.598 254.902 142.009 cv
254.867 142.006 254.832 142.005 254.797 142.005 cv
271.505 141.964 mo
271.334 141.964 271.162 142.011 270.988 142.108 cv
270.695 142.269 270.256 142.505 269.666 142.817 cv
269.076 143.127 268.635 143.366 268.344 143.526 cv
267.977 143.73 267.568 143.973 267.121 144.26 cv
266.596 144.595 266.465 145.001 266.728 145.481 cv
266.857 145.71 267.043 145.849 267.285 145.901 cv
267.35 145.914 267.416 145.921 267.481 145.921 cv
267.663 145.921 267.846 145.87 268.029 145.768 cv
268.164 145.694 268.355 145.577 268.611 145.417 cv
268.867 145.255 269.059 145.137 269.193 145.065 cv
269.484 144.903 269.926 144.666 270.516 144.357 cv
271.105 144.045 271.547 143.808 271.838 143.649 cv
272.086 143.51 272.252 143.326 272.332 143.09 cv
272.412 142.855 272.391 142.627 272.27 142.406 cv
272.148 142.185 271.965 142.046 271.723 141.99 cv
271.65 141.973 271.578 141.964 271.505 141.964 cv
269.723 138.72 mo
269.559 138.72 269.393 138.766 269.225 138.857 cv
266.215 140.512 li
266.016 140.621 li
265.908 140.672 265.83 140.712 265.779 140.741 cv
264.93 141.211 264.65 141.713 264.945 142.248 cv
265.066 142.465 265.244 142.606 265.482 142.672 cv
265.559 142.693 265.637 142.703 265.715 142.703 cv
265.875 142.703 266.037 142.659 266.199 142.569 cv
266.299 142.515 266.441 142.43 266.631 142.315 cv
266.82 142.2 266.963 142.112 267.063 142.061 cv
270.076 140.397 li
270.316 140.263 270.475 140.081 270.551 139.847 cv
270.627 139.615 270.605 139.389 270.482 139.168 cv
270.359 138.947 270.18 138.806 269.943 138.748 cv
269.87 138.729 269.797 138.72 269.723 138.72 cv
.164706 .603922 .439216 rgb
f
260.074 152.861 mo
259.953 152.861 259.842 152.85 259.74 152.827 cv
259.02 152.663 258.266 151.868 257.479 150.44 cv
257.15 149.845 256.703 148.931 256.133 147.695 cv
255.564 146.462 255.117 145.55 254.793 144.962 cv
254.709 144.806 254.559 144.592 254.348 144.312 cv
254.137 144.032 253.988 143.816 253.902 143.662 cv
253.533 142.99 253.656 142.483 254.275 142.14 cv
254.438 142.049 254.612 142.005 254.797 142.005 cv
254.832 142.005 254.867 142.006 254.902 142.009 cv
255.346 141.598 255.779 141.232 256.209 140.913 cv
256.633 140.594 257.053 140.322 257.463 140.094 cv
258.58 139.479 259.541 139.115 260.352 139.003 cv
260.423 138.993 260.492 138.989 260.557 138.989 cv
260.945 138.989 261.235 139.161 261.426 139.509 cv
261.553 139.74 261.586 139.986 261.525 140.25 cv
261.461 140.552 261.291 140.779 261.016 140.929 cv
260.93 140.978 260.828 141.017 260.717 141.043 cv
259.893 141.245 259.143 141.533 258.463 141.905 cv
258.133 142.088 257.791 142.313 257.441 142.574 cv
257.088 142.836 256.727 143.139 256.357 143.484 cv
256.684 144.072 257.145 144.958 257.744 146.137 cv
257.982 145.982 258.803 145.424 260.203 144.46 cv
261.002 143.911 261.514 143.573 261.738 143.45 cv
261.92 143.349 262.105 143.298 262.295 143.298 cv
262.378 143.298 262.462 143.308 262.547 143.328 cv
262.824 143.389 263.039 143.557 263.189 143.833 cv
263.48 144.36 263.363 144.815 262.84 145.195 cv
262.502 145.417 261.998 145.751 261.328 146.202 cv
260.74 146.621 259.84 147.227 258.633 148.028 cv
258.912 148.608 259.146 149.068 259.338 149.414 cv
259.816 150.28 260.137 150.747 260.305 150.807 cv
260.313 150.81 260.323 150.812 260.336 150.812 cv
260.447 150.812 260.731 150.687 261.189 150.433 cv
261.463 150.282 261.873 150.046 262.42 149.729 cv
262.965 149.411 263.373 149.176 263.648 149.025 cv
263.736 148.976 263.861 148.89 264.016 148.767 cv
264.174 148.647 264.297 148.564 264.381 148.515 cv
264.574 148.41 264.77 148.357 264.967 148.357 cv
265.031 148.357 265.094 148.362 265.158 148.374 cv
265.457 148.421 265.687 148.594 265.852 148.89 cv
266.125 149.386 266.029 149.827 265.566 150.208 cv
265.17 150.537 264.275 151.084 262.881 151.854 cv
261.664 152.526 260.728 152.861 260.074 152.861 cv
.94902 .898039 .854902 rgb
f
267.481 145.921 mo
267.416 145.921 267.35 145.914 267.285 145.901 cv
267.043 145.849 266.857 145.71 266.728 145.481 cv
266.465 145.001 266.596 144.595 267.121 144.26 cv
267.568 143.973 267.977 143.73 268.344 143.526 cv
268.635 143.366 269.076 143.127 269.666 142.817 cv
270.256 142.505 270.695 142.269 270.988 142.108 cv
271.162 142.011 271.334 141.964 271.505 141.964 cv
271.578 141.964 271.65 141.973 271.723 141.99 cv
271.965 142.046 272.148 142.185 272.27 142.406 cv
272.391 142.627 272.412 142.855 272.332 143.09 cv
272.252 143.326 272.086 143.51 271.838 143.649 cv
271.547 143.808 271.105 144.045 270.516 144.357 cv
269.926 144.666 269.484 144.903 269.193 145.065 cv
269.059 145.137 268.867 145.255 268.611 145.417 cv
268.355 145.577 268.164 145.694 268.029 145.768 cv
267.846 145.87 267.663 145.921 267.481 145.921 cv
265.715 142.703 mo
265.637 142.703 265.559 142.693 265.482 142.672 cv
265.244 142.606 265.066 142.465 264.945 142.248 cv
264.65 141.713 264.93 141.211 265.779 140.741 cv
265.83 140.712 265.908 140.672 266.016 140.621 cv
266.215 140.512 li
269.225 138.857 li
269.393 138.766 269.559 138.72 269.723 138.72 cv
269.797 138.72 269.87 138.729 269.943 138.748 cv
270.18 138.806 270.359 138.947 270.482 139.168 cv
270.605 139.389 270.627 139.615 270.551 139.847 cv
270.475 140.081 270.316 140.263 270.076 140.397 cv
267.063 142.061 li
266.963 142.112 266.82 142.2 266.631 142.315 cv
266.441 142.43 266.299 142.515 266.199 142.569 cv
266.037 142.659 265.875 142.703 265.715 142.703 cv
f
276.253 144.039 mo
276.135 144.039 276.019 144.018 275.904 143.975 cv
275.656 143.88 275.467 143.711 275.332 143.468 cv
274.937 142.752 274.607 141.794 274.344 140.595 cv
273.945 138.799 273.719 137.809 273.662 137.622 cv
273.414 136.869 273.17 136.116 272.928 135.359 cv
272.607 134.315 272.478 133.572 272.539 133.129 cv
272.6 132.689 272.807 132.372 273.158 132.178 cv
273.329 132.083 273.501 132.036 273.675 132.036 cv
273.91 132.036 274.147 132.123 274.385 132.296 cv
274.467 132.357 274.56 132.435 274.663 132.531 cv
277.068 143.684 li
276.993 143.762 276.905 143.83 276.801 143.887 cv
276.615 143.989 276.432 144.039 276.253 144.039 cv
f
270.719 185.871 mo
268.889 177.385 li
279.404 175.117 li
279.404 175.116 li
279.405 175.116 li
283.647 174.201 li
285.477 182.689 li
270.719 185.871 li
.941176 .521569 .0156863 rgb
f
185.969 121.727 mo
182.795 132.06 188.601 143.013 198.934 146.188 cv
209.268 149.364 220.222 143.558 223.396 133.223 cv
226.572 122.887 220.767 111.936 210.431 108.762 cv
200.096 105.587 189.144 111.392 185.969 121.727 cv
cp
1 .34902 .266667 rgb
f
220.973 121.703 mo
220.075 119.946 218.828 118.509 217.351 117.405 cv
217.611 117.798 217.854 118.209 218.074 118.642 cv
221.554 125.455 218.488 134.383 211.228 138.583 cv
205.841 141.7 199.661 141.33 195.408 138.149 cv
199.262 143.968 207.329 145.578 214.126 141.644 cv
221.388 137.444 224.452 128.517 220.973 121.703 cv
cp
1 1 1 rgb
f
196.013 129.509 mo
199.188 119.175 210.141 113.37 220.475 116.543 cv
220.67 116.604 220.861 116.671 221.051 116.736 cv
218.635 113.051 214.97 110.156 210.431 108.762 cv
200.096 105.587 189.144 111.392 185.969 121.727 cv
182.854 131.867 188.388 142.599 198.359 145.997 cv
195.276 141.294 194.234 135.303 196.013 129.509 cv
cp
.878431 .235294 0 rgb
f
185.917 110.8 mo
189.235 106.835 195.417 106.042 202.2 108.056 cv
200.789 108.24 199.41 108.573 198.083 109.049 cv
194.714 108.979 191.838 109.99 190.018 112.166 cv
185.537 117.524 191.491 126.763 200.42 134.233 cv
209.349 141.704 217.877 144.575 222.359 139.217 cv
224.188 137.03 224.668 134.004 223.992 130.679 cv
224.294 128.865 224.338 127.053 224.138 125.288 cv
228.352 132.294 229.129 139.471 225.451 143.867 cv
219.973 150.418 206.682 148.326 195.764 139.195 cv
184.846 130.063 180.438 117.351 185.917 110.8 cv
cp
.172549 .670588 .513726 rgb
f
203.963 118.022 mo
200.236 132.111 185.792 140.512 171.7 136.784 cv
157.61 133.057 149.209 118.611 152.938 104.521 cv
156.667 90.4307 171.11 82.0313 185.2 85.7583 cv
199.293 89.4863 207.692 103.931 203.963 118.022 cv
cp
.392157 .858824 .717647 rgb
f
187.901 88.8115 mo
185.075 87.9805 182.233 87.8574 179.519 88.3247 cv
180.213 88.4468 180.908 88.6074 181.603 88.8115 cv
192.567 92.0356 199.102 104.53 196.2 116.718 cv
194.048 125.763 187.3 132.086 179.482 133.433 cv
189.751 135.229 199.782 128.133 202.499 116.718 cv
205.4 104.53 198.865 92.0356 187.901 88.8115 cv
cp
1 1 1 rgb
f
183.69 135.346 mo
169.603 131.619 161.2 117.173 164.931 103.084 cv
167.222 94.4155 173.572 87.9087 181.398 85.0449 cv
168.6 83.5913 156.331 91.6968 152.938 104.521 cv
149.209 118.611 157.61 133.057 171.7 136.784 cv
177.123 138.22 182.598 137.85 187.494 136.061 cv
186.229 135.917 184.959 135.682 183.69 135.346 cv
cp
.172549 .670588 .513726 rgb
f
211.808 105.553 mo
210.835 98.6504 204.325 93.3389 195.126 90.8145 cv
196.61 92.0269 197.951 93.3931 199.129 94.8818 cv
203.035 97.2061 205.607 100.407 206.139 104.195 cv
207.452 113.521 194.059 119.857 178.516 122.042 cv
162.975 124.232 151.167 121.445 149.856 112.12 cv
149.32 108.313 150.925 104.508 154.069 101.184 cv
155.014 98.8916 156.256 96.7881 157.743 94.9087 cv
147.928 99.9268 141.926 107.584 143.002 115.24 cv
144.605 126.64 161.311 133.713 180.312 131.038 cv
199.311 128.362 213.412 116.954 211.808 105.553 cv
cp
.992157 .580392 .0196078 rgb
f
239.596 109.648 mo
238.529 112.273 235.041 113.335 231.809 112.021 cv
228.574 110.706 226.816 107.515 227.883 104.89 cv
228.949 102.264 232.436 101.201 235.67 102.516 cv
238.904 103.829 240.662 107.023 239.596 109.648 cv
.392157 .858824 .717647 rgb
f
266.102 78.648 mo
266.244 78.3452 266.379 78.0385 266.506 77.7281 cv
270.504 67.8842 265.766 56.6626 255.924 52.6645 cv
246.08 48.6645 234.861 53.4028 230.861 63.2465 cv
230.734 63.5581 230.615 63.8715 230.508 64.188 cv
227.445 72.437 230.176 75.7818 231.607 85.5376 cv
232.178 89.4175 230.371 92.647 230.371 92.647 cv
238.361 95.894 li
246.35 99.1401 li
246.35 99.1401 247.309 95.566 250.424 93.1831 cv
258.254 87.1899 262.543 86.6958 266.102 78.648 cv
.992157 .580392 .0196078 rgb
f
244.814 102.92 mo
244.221 104.382 242.293 104.981 240.512 104.257 cv
230.986 100.387 li
229.205 99.6636 228.24 97.8901 228.834 96.4282 cv
229.428 94.9663 231.355 94.3677 233.139 95.0923 cv
242.662 98.9614 li
244.445 99.686 245.408 101.458 244.814 102.92 cv
.172549 .670588 .513726 rgb
f
243.406 106.387 mo
242.81 107.85 240.885 108.448 239.102 107.724 cv
229.578 103.854 li
227.795 103.13 226.832 101.359 227.426 99.895 cv
228.02 98.4341 229.947 97.8355 231.729 98.56 cv
241.254 102.43 li
243.035 103.154 244 104.925 243.406 106.387 cv
f
242.115 109.564 mo
241.586 110.866 239.713 111.334 237.93 110.611 cv
228.406 106.741 li
226.623 106.018 225.606 104.375 226.135 103.072 cv
226.664 101.77 228.539 101.3 230.322 102.025 cv
239.846 105.894 li
241.629 106.619 242.645 108.262 242.115 109.564 cv
f
258.48 49.5415 mo
258.232 50.1519 257.537 50.4468 256.926 50.1978 cv
256.314 49.9497 256.019 49.2534 256.27 48.6421 cv
260.563 38.0727 li
260.81 37.4614 261.508 37.1674 262.119 37.4155 cv
262.73 37.6635 263.023 38.3599 262.775 38.9712 cv
258.48 49.5415 li
.992157 .580392 .0196078 rgb
f
253.568 77.8413 mo
254.057 78.6587 253.855 79.5952 253.242 79.8344 cv
252.627 80.0747 251.9 79.6978 251.52 79.0699 cv
249.295 75.354 244.85 73.5483 240.664 74.6587 cv
239.953 74.8433 239.17 74.6079 238.896 74.0064 cv
238.623 73.4067 239.133 72.5943 240.053 72.3501 cv
245.266 70.9673 250.799 73.2144 253.568 77.8413 cv
1 1 1 rgb
f
247.895 47.355 mo
247.928 48.0132 247.42 48.5737 246.762 48.606 cv
246.104 48.6401 245.543 48.1324 245.508 47.475 cv
244.934 36.0806 li
244.902 35.4194 245.408 34.8588 246.066 34.8286 cv
246.725 34.7954 247.287 35.3012 247.32 35.9594 cv
247.895 47.355 li
.992157 .580392 .0196078 rgb
f
237.375 49.8472 mo
237.684 50.4302 237.461 51.1509 236.879 51.4595 cv
236.295 51.7671 235.574 51.5454 235.264 50.9614 cv
229.928 40.8794 li
229.621 40.2955 229.842 39.5737 230.424 39.2661 cv
231.008 38.9575 231.73 39.1792 232.039 39.7613 cv
237.375 49.8472 li
f
228.897 56.5502 mo
229.422 56.9487 229.525 57.6968 229.127 58.2231 cv
228.73 58.7485 227.982 58.853 227.455 58.4536 cv
218.357 51.5699 li
217.831 51.1714 217.727 50.4234 218.125 49.898 cv
218.523 49.3726 219.272 49.268 219.796 49.6665 cv
228.897 56.5502 li
f
224.043 66.2094 mo
224.688 66.3481 225.098 66.9829 224.959 67.6274 cv
224.821 68.273 224.186 68.6822 223.542 68.5444 cv
212.387 66.1508 li
211.742 66.0122 211.331 65.3775 211.47 64.7329 cv
211.608 64.0884 212.243 63.6782 212.889 63.8159 cv
224.043 66.2094 li
f
223.916 76.9712 mo
224.497 76.8393 225.083 77.2524 225.231 77.896 cv
225.379 78.5386 225.028 79.1665 224.449 79.3002 cv
214.422 81.5952 li
213.841 81.728 213.251 81.3149 213.104 80.6704 cv
212.959 80.0279 213.309 79.3989 213.887 79.2661 cv
223.916 76.9712 li
f
226.822 85.9243 mo
227.191 85.6362 227.814 85.8277 228.221 86.3462 cv
228.627 86.8686 228.658 87.522 228.289 87.8071 cv
221.92 92.7632 li
221.553 93.0493 220.928 92.8598 220.521 92.3394 cv
220.116 91.8188 220.087 91.1655 220.454 90.8784 cv
226.822 85.9243 li
f
265.381 54.4585 mo
264.896 54.9077 264.869 55.6636 265.32 56.145 cv
265.768 56.6284 266.523 56.6558 267.008 56.2085 cv
275.365 48.4438 li
275.848 47.9937 275.877 47.2388 275.426 46.7563 cv
274.979 46.2739 274.223 46.2446 273.74 46.6938 cv
265.381 54.4585 li
cp
f
271.18 63.5815 mo
270.553 63.7847 270.209 64.4556 270.412 65.0835 cv
270.615 65.7104 271.287 66.0542 271.914 65.8521 cv
282.771 62.3472 li
283.4 62.145 283.744 61.4722 283.543 60.8452 cv
283.34 60.2173 282.668 59.8726 282.037 60.0757 cv
271.18 63.5815 li
cp
f
272.582 74.2993 mo
271.93 74.2183 271.332 74.6812 271.252 75.3374 cv
271.17 75.9907 271.633 76.5864 272.289 76.6685 cv
283.609 78.0815 li
284.264 78.1616 284.859 77.6978 284.941 77.0435 cv
285.023 76.3901 284.559 75.7925 283.904 75.7114 cv
272.582 74.2993 li
cp
f
269.324 84.605 mo
268.766 84.2554 268.029 84.4233 267.678 84.9829 cv
267.328 85.5425 267.496 86.2778 268.055 86.6274 cv
277.719 92.6938 li
278.277 93.0444 279.014 92.8755 279.365 92.3169 cv
279.715 91.7583 279.547 91.021 278.986 90.6704 cv
269.324 84.605 li
cp
f
261.908 92.4077 mo
261.586 91.9087 260.877 91.7944 260.32 92.1519 cv
259.768 92.5112 259.582 93.2056 259.904 93.7046 cv
265.488 102.343 li
265.813 102.842 266.523 102.957 267.078 102.599 cv
267.631 102.241 267.816 101.545 267.496 101.045 cv
261.908 92.4077 li
cp
f
253.582 96.7954 mo
253.52 96.3325 252.938 96.0337 252.285 96.1235 cv
251.631 96.2153 251.152 96.6606 251.217 97.1216 cv
252.326 105.116 li
252.391 105.578 252.971 105.877 253.625 105.788 cv
254.277 105.698 254.754 105.25 254.691 104.788 cv
253.582 96.7954 li
cp
f
236.738 94.7768 mo
236.629 95.4244 236.014 95.8638 235.361 95.7534 cv
234.709 95.645 234.272 95.0278 234.381 94.3765 cv
237.715 74.647 li
237.826 73.9966 238.441 73.5562 239.094 73.6665 cv
239.744 73.7778 240.182 74.394 240.072 75.0444 cv
236.738 94.7768 li
.172549 .670588 .513726 rgb
f
240.303 96.2241 mo
239.928 96.7661 240.064 97.5093 240.607 97.8853 cv
241.15 98.2603 241.895 98.1265 242.27 97.5815 cv
253.641 81.1167 li
254.016 80.5747 253.881 79.8286 253.336 79.4526 cv
252.793 79.0786 252.049 79.2153 251.674 79.7583 cv
240.303 96.2241 li
cp
f
246.922 102.822 mo
227.393 94.8881 li
229.234 90.3579 li
248.762 98.2915 li
246.922 102.822 li
.392157 .858824 .717647 rgb
f
250.04 53.0127 mo
247.441 53.0127 244.996 53.7207 242.833 54.9517 cv
243.929 54.685 245.064 54.5351 246.233 54.5351 cv
254.976 54.5351 262.063 62.3955 262.063 72.0913 cv
262.063 78.9043 258.557 84.7978 253.441 87.708 cv
260.548 85.981 265.869 78.9683 265.869 70.5689 cv
265.869 60.8735 258.782 53.0127 250.04 53.0127 cv
1 1 1 rgb
f
231.809 112.022 mo
231.135 111.748 230.525 111.393 229.992 110.978 cv
230.525 111.392 231.135 111.747 231.809 112.021 cv
231.809 112.021 231.809 112.021 231.809 112.021 cv
231.809 112.022 li
229.324 95.6732 mo
227.395 94.8891 li
227.395 94.8889 li
229.324 95.6729 li
229.324 95.6731 229.324 95.6731 229.324 95.6732 cv
231.657 85.9254 mo
231.643 85.7972 231.626 85.6684 231.607 85.5386 cv
231.317 83.5581 230.973 81.8424 230.635 80.2956 cv
230.973 81.842 231.317 83.5577 231.607 85.5376 cv
231.627 85.6676 231.643 85.797 231.657 85.9254 cv
255.924 52.6645 mo
254.29 52.0005 252.617 51.5772 250.946 51.3782 cv
252.617 51.5769 254.289 51.9998 255.924 52.6636 cv
255.924 52.6636 li
0 .203922 .309804 rgb
f
231.809 112.021 mo
231.809 112.021 231.809 112.021 231.809 112.021 cv
231.135 111.747 230.525 111.392 229.992 110.978 cv
228.417 109.75 227.51 108.002 227.581 106.308 cv
227.833 106.474 228.109 106.62 228.406 106.741 cv
233.168 108.676 li
231.809 112.022 li
.372549 .772549 .611765 rgb
f
238.998 94.3248 mo
236.955 93.4946 li
240.072 75.0444 li
240.091 74.9336 240.094 74.8238 240.082 74.7173 cv
240.116 74.7192 240.15 74.7201 240.184 74.7201 cv
240.343 74.7201 240.506 74.6999 240.664 74.6587 cv
241.489 74.4398 242.324 74.3343 243.15 74.3343 cv
244.42 74.3343 245.668 74.5837 246.827 75.0545 cv
238.998 94.3248 li
234.686 92.5727 mo
231.031 91.088 li
231.454 89.8529 231.883 87.9985 231.657 85.9254 cv
231.643 85.797 231.627 85.6676 231.607 85.5376 cv
231.317 83.5577 230.973 81.842 230.635 80.2956 cv
229.307 74.2228 228.069 70.7624 230.508 64.188 cv
230.617 63.8726 230.736 63.559 230.861 63.2476 cv
233.898 55.7745 241.096 51.2447 248.692 51.2447 cv
249.441 51.2447 250.193 51.2887 250.946 51.3782 cv
252.617 51.5772 254.29 52.0005 255.924 52.6645 cv
255.368 54.0321 li
253.703 53.3723 251.909 53.0127 250.04 53.0127 cv
247.441 53.0127 244.996 53.7207 242.833 54.9517 cv
243.929 54.685 245.064 54.5351 246.233 54.5351 cv
249.137 54.5351 251.857 55.4021 254.197 56.9152 cv
247.726 72.8418 li
246.284 72.2561 244.73 71.946 243.15 71.946 cv
242.121 71.946 241.08 72.0775 240.053 72.3501 cv
239.305 72.5485 238.829 73.1219 238.823 73.6516 cv
238.279 73.6838 237.811 74.0877 237.715 74.647 cv
234.686 92.5727 li
.941176 .521569 .0156863 rgb
f
236.492 100.495 mo
231.729 98.56 li
231.215 98.3511 230.689 98.2523 230.187 98.2523 cv
229.742 98.2523 229.315 98.3299 228.931 98.4775 cv
228.632 97.8141 228.568 97.0908 228.838 96.4292 cv
228.953 96.1412 229.135 95.8979 229.344 95.6812 cv
229.324 95.6732 li
229.324 95.6731 229.324 95.6731 229.324 95.6729 cv
237.158 98.8552 li
236.492 100.495 li
.164706 .603922 .439216 rgb
f
235.084 103.96 mo
230.322 102.025 li
229.754 101.794 229.176 101.684 228.636 101.684 cv
228.226 101.684 227.838 101.747 227.492 101.868 cv
227.22 101.225 227.168 100.534 227.428 99.896 cv
227.699 99.23 228.254 98.7544 228.938 98.4908 cv
228.936 98.4863 228.933 98.4819 228.931 98.4775 cv
229.315 98.3299 229.742 98.2523 230.187 98.2523 cv
230.689 98.2523 231.215 98.3511 231.729 98.56 cv
236.492 100.495 li
235.084 103.96 li
f
233.168 108.676 mo
228.406 106.741 li
228.109 106.62 227.833 106.474 227.581 106.308 cv
227.582 106.303 227.582 106.299 227.582 106.294 cv
226.336 105.466 225.698 104.155 226.137 103.073 cv
226.369 102.502 226.869 102.103 227.498 101.882 cv
227.496 101.877 227.494 101.873 227.492 101.868 cv
227.838 101.747 228.226 101.684 228.636 101.684 cv
229.176 101.684 229.754 101.794 230.322 102.025 cv
235.084 103.96 li
233.168 108.676 li
f
246.827 75.0545 mo
245.668 74.5837 244.42 74.3343 243.15 74.3343 cv
242.324 74.3343 241.489 74.4398 240.664 74.6587 cv
240.506 74.6999 240.343 74.7201 240.184 74.7201 cv
240.15 74.7201 240.116 74.7192 240.082 74.7173 cv
240.026 74.1987 239.633 73.7588 239.094 73.6665 cv
239.026 73.6551 238.959 73.6496 238.893 73.6496 cv
238.869 73.6496 238.846 73.6503 238.823 73.6516 cv
238.829 73.1219 239.305 72.5485 240.053 72.3501 cv
241.08 72.0775 242.121 71.946 243.15 71.946 cv
244.73 71.946 246.284 72.2561 247.726 72.8418 cv
246.827 75.0545 li
.94902 .898039 .854902 rgb
f
236.955 93.4946 mo
234.686 92.5727 li
237.715 74.647 li
237.811 74.0877 238.279 73.6838 238.823 73.6516 cv
238.846 73.6503 238.869 73.6496 238.893 73.6496 cv
238.959 73.6496 239.026 73.6551 239.094 73.6665 cv
239.633 73.7588 240.026 74.1987 240.082 74.7173 cv
240.094 74.8238 240.091 74.9336 240.072 75.0444 cv
236.955 93.4946 li
.164706 .603922 .439216 rgb
f
237.158 98.8552 mo
229.324 95.6729 li
227.395 94.8889 li
229.236 90.3589 li
231.031 91.0883 li
231.031 91.0883 231.031 91.0881 231.031 91.088 cv
234.686 92.5727 li
236.955 93.4946 li
238.998 94.3248 li
237.158 98.8552 li
.372549 .772549 .611765 rgb
f
254.197 56.9152 mo
251.857 55.4021 249.137 54.5351 246.233 54.5351 cv
245.064 54.5351 243.929 54.685 242.833 54.9517 cv
244.996 53.7207 247.441 53.0127 250.04 53.0127 cv
251.909 53.0127 253.703 53.3723 255.368 54.0321 cv
254.197 56.9152 li
.94902 .898039 .854902 rgb
f
256.926 50.1978 mo
256.926 50.1978 li
256.926 50.1978 li
256.316 49.9487 256.023 49.2544 256.271 48.643 cv
260.564 38.0737 li
260.753 37.6096 261.2 37.3284 261.671 37.3284 cv
261.82 37.3284 261.972 37.3567 262.119 37.4165 cv
256.926 50.1978 li
.941176 .521569 .0156863 rgb
f
246.701 48.6086 mo
246.511 48.6086 246.33 48.5635 246.17 48.4831 cv
246.33 48.5629 246.51 48.6076 246.699 48.6076 cv
246.72 48.6076 246.741 48.6071 246.762 48.606 cv
247.42 48.5737 247.928 48.0132 247.895 47.355 cv
247.32 35.9594 li
247.288 35.322 246.76 34.8275 246.129 34.8271 cv
246.129 34.8271 246.129 34.8271 246.13 34.8271 cv
246.761 34.8271 247.288 35.3217 247.322 35.9605 cv
247.896 47.356 li
247.93 48.0142 247.422 48.5748 246.764 48.607 cv
246.743 48.6081 246.722 48.6086 246.701 48.6086 cv
0 .203922 .309804 rgb
f
246.699 48.6076 mo
246.51 48.6076 246.33 48.5629 246.17 48.4831 cv
245.798 48.2967 245.534 47.9206 245.512 47.4761 cv
244.936 36.0816 li
244.904 35.4214 245.41 34.8609 246.068 34.8286 cv
246.088 34.8276 246.109 34.8271 246.129 34.8271 cv
246.76 34.8275 247.288 35.322 247.32 35.9594 cv
247.895 47.355 li
247.928 48.0132 247.42 48.5737 246.762 48.606 cv
246.741 48.6071 246.72 48.6076 246.699 48.6076 cv
.941176 .521569 .0156863 rgb
f
236.325 51.5993 mo
236.167 51.5993 236.01 51.5677 235.865 51.5075 cv
236.009 51.5669 236.164 51.598 236.321 51.598 cv
236.51 51.598 236.701 51.5534 236.879 51.4595 cv
237.461 51.1509 237.684 50.4302 237.375 49.8472 cv
232.039 39.7613 li
231.91 39.5183 231.709 39.3381 231.476 39.2331 cv
231.71 39.338 231.911 39.5184 232.041 39.7622 cv
237.377 49.8472 li
237.686 50.4312 237.465 51.1509 236.881 51.4614 cv
236.703 51.5549 236.513 51.5993 236.325 51.5993 cv
235.862 51.5061 mo
235.861 51.5057 235.86 51.5053 235.858 51.5048 cv
235.859 51.5053 235.861 51.5057 235.862 51.5061 cv
0 .203922 .309804 rgb
f
236.321 51.598 mo
236.164 51.598 236.009 51.5669 235.865 51.5075 cv
235.864 51.507 235.863 51.5066 235.862 51.5061 cv
235.861 51.5057 235.859 51.5053 235.858 51.5048 cv
235.614 51.4016 235.402 51.2166 235.268 50.9633 cv
229.932 40.8803 li
229.621 40.2974 229.844 39.5737 230.426 39.2661 cv
230.604 39.1721 230.796 39.1274 230.984 39.1274 cv
231.155 39.1274 231.322 39.1638 231.476 39.2331 cv
231.709 39.3381 231.91 39.5183 232.039 39.7613 cv
237.375 49.8472 li
237.684 50.4302 237.461 51.1509 236.879 51.4595 cv
236.701 51.5534 236.51 51.598 236.321 51.598 cv
.941176 .521569 .0156863 rgb
f
228.177 58.6966 mo
228.098 58.6966 228.019 58.6889 227.941 58.6732 cv
228.019 58.6888 228.098 58.6965 228.176 58.6965 cv
228.537 58.6965 228.893 58.533 229.127 58.2231 cv
229.498 57.7325 229.434 57.0492 228.998 56.636 cv
229.434 57.0469 229.501 57.7328 229.129 58.2231 cv
228.894 58.5336 228.537 58.6966 228.177 58.6966 cv
227.936 58.6722 mo
227.936 58.6722 227.936 58.6722 227.936 58.6721 cv
227.936 58.6722 227.936 58.6722 227.936 58.6722 cv
225.94 54.3135 mo
219.796 49.6665 li
219.634 49.543 219.45 49.4679 219.261 49.4385 cv
219.451 49.4677 219.636 49.5432 219.799 49.6675 cv
225.94 54.3135 li
0 .203922 .309804 rgb
f
221.408 53.878 mo
218.358 51.5708 li
218.319 51.5411 218.282 51.5094 218.247 51.4761 cv
218.282 51.5091 218.318 51.5404 218.357 51.5699 cv
221.408 53.878 li
0 .141176 .215686 rgb
f
228.176 58.6965 mo
228.098 58.6965 228.019 58.6888 227.941 58.6732 cv
227.94 58.6729 227.938 58.6725 227.936 58.6722 cv
227.936 58.6722 227.936 58.6722 227.936 58.6721 cv
227.767 58.6374 227.604 58.5655 227.457 58.4546 cv
221.408 53.878 li
218.357 51.5699 li
218.318 51.5404 218.282 51.5091 218.247 51.4761 cv
217.82 51.0627 217.759 50.3851 218.126 49.8989 cv
218.362 49.5884 218.719 49.4247 219.08 49.4247 cv
219.14 49.4247 219.201 49.4293 219.261 49.4385 cv
219.45 49.4679 219.634 49.543 219.796 49.6665 cv
225.94 54.3135 li
228.898 56.5523 li
228.933 56.5787 228.966 56.6066 228.998 56.636 cv
229.434 57.0492 229.498 57.7325 229.127 58.2231 cv
228.893 58.533 228.537 58.6965 228.176 58.6965 cv
.941176 .521569 .0156863 rgb
f
221.975 68.2084 mo
214.1 66.519 li
214.1 66.5188 214.1 66.5185 214.1 66.5184 cv
221.975 68.2081 li
221.975 68.2082 221.975 68.2083 221.975 68.2084 cv
0 .203922 .309804 rgb
f
223.797 68.572 mo
223.714 68.572 223.63 68.5634 223.545 68.5454 cv
221.975 68.2084 li
221.975 68.2083 221.975 68.2082 221.975 68.2081 cv
223.542 68.5444 li
223.627 68.5624 223.711 68.5711 223.793 68.5711 cv
224.344 68.5711 224.839 68.1885 224.959 67.6274 cv
225.082 67.0563 224.774 66.4927 224.254 66.2753 cv
224.774 66.4919 225.085 67.0556 224.962 67.6294 cv
224.841 68.1896 224.347 68.572 223.797 68.572 cv
214.1 66.519 mo
212.389 66.1519 li
212.307 66.1342 212.229 66.1086 212.155 66.0759 cv
212.228 66.1081 212.306 66.1334 212.387 66.1508 cv
214.1 66.5184 li
214.1 66.5185 214.1 66.5188 214.1 66.519 cv
0 .141176 .215686 rgb
f
223.793 68.5711 mo
223.711 68.5711 223.627 68.5624 223.542 68.5444 cv
221.975 68.2081 li
214.1 66.5184 li
212.387 66.1508 li
212.306 66.1334 212.228 66.1081 212.155 66.0759 cv
211.649 65.8515 211.351 65.2964 211.471 64.7339 cv
211.592 64.1735 212.087 63.7903 212.64 63.7903 cv
212.723 63.7903 212.807 63.7989 212.891 63.8169 cv
224.046 66.2104 li
224.119 66.226 224.188 66.2479 224.254 66.2753 cv
224.774 66.4927 225.082 67.0563 224.959 67.6274 cv
224.839 68.1885 224.344 68.5711 223.793 68.5711 cv
.941176 .521569 .0156863 rgb
f
214.203 81.6213 mo
214.005 81.6213 213.813 81.5612 213.645 81.4538 cv
213.813 81.5604 214.005 81.62 214.203 81.62 cv
214.275 81.62 214.349 81.612 214.422 81.5952 cv
224.449 79.3002 li
225.028 79.1665 225.379 78.5386 225.231 77.896 cv
225.151 77.5488 224.944 77.2687 224.678 77.105 cv
224.945 77.2683 225.153 77.5489 225.234 77.8969 cv
225.38 78.5395 225.03 79.1674 224.45 79.3013 cv
214.422 81.5962 li
214.349 81.6132 214.275 81.6213 214.203 81.6213 cv
224.676 77.1033 mo
224.676 77.1033 224.676 77.1033 224.676 77.1033 cv
224.676 77.1033 224.676 77.1033 224.676 77.1033 cv
0 .203922 .309804 rgb
f
214.203 81.62 mo
214.005 81.62 213.813 81.5604 213.645 81.4538 cv
213.386 81.2888 213.185 81.0123 213.107 80.6713 cv
212.959 80.0288 213.311 79.3999 213.889 79.2671 cv
223.919 76.9732 li
223.992 76.9564 224.065 76.9483 224.138 76.9483 cv
224.328 76.9483 224.512 77.0038 224.676 77.1033 cv
224.676 77.1033 224.676 77.1033 224.676 77.1033 cv
224.677 77.1039 224.678 77.1044 224.678 77.105 cv
224.944 77.2687 225.151 77.5488 225.231 77.896 cv
225.379 78.5386 225.028 79.1665 224.449 79.3002 cv
214.422 81.5952 li
214.349 81.612 214.275 81.62 214.203 81.62 cv
.941176 .521569 .0156863 rgb
f
221.511 92.8975 mo
221.346 92.8975 221.168 92.8471 220.997 92.752 cv
221.168 92.8464 221.345 92.8965 221.51 92.8965 cv
221.663 92.8965 221.804 92.8536 221.92 92.7632 cv
228.289 87.8071 li
228.658 87.522 228.627 86.8686 228.221 86.3462 cv
228.021 86.0917 227.77 85.916 227.522 85.8371 cv
227.771 85.9157 228.023 86.0917 228.223 86.3471 cv
228.629 86.8686 228.66 87.522 228.291 87.8081 cv
221.922 92.7642 li
221.806 92.8546 221.664 92.8975 221.511 92.8975 cv
0 .203922 .309804 rgb
f
221.51 92.8965 mo
221.345 92.8965 221.168 92.8464 220.997 92.752 cv
220.827 92.6571 220.662 92.5176 220.524 92.3394 cv
220.12 91.8198 220.089 91.1665 220.457 90.8794 cv
226.824 85.9243 li
226.941 85.8337 227.083 85.7907 227.235 85.7907 cv
227.328 85.7907 227.425 85.8065 227.522 85.8371 cv
227.77 85.916 228.021 86.0917 228.221 86.3462 cv
228.627 86.8686 228.658 87.522 228.289 87.8071 cv
221.92 92.7632 li
221.804 92.8536 221.663 92.8965 221.51 92.8965 cv
.941176 .521569 .0156863 rgb
f
177.569 233.98 mo
178.766 234.793 179.321 236.674 178.807 238.18 cv
178.295 239.686 176.906 240.252 175.707 239.441 cv
143.604 217.736 li
142.407 216.928 141.852 215.049 142.366 213.541 cv
142.879 212.035 144.265 211.469 145.465 212.279 cv
177.569 233.98 li
.172549 .670588 .513726 rgb
f
146.399 253.971 mo
146.635 255.398 148.112 256.688 149.696 256.85 cv
151.28 257.01 152.373 255.986 152.135 254.559 cv
145.801 216.328 li
145.566 214.9 144.09 213.611 142.506 213.451 cv
140.92 213.289 139.829 214.314 140.065 215.742 cv
146.399 253.971 li
f
165.985 245.709 mo
166.807 247.012 166.475 248.686 165.248 249.445 cv
164.02 250.203 162.36 249.764 161.539 248.461 cv
139.58 213.553 li
138.761 212.25 139.09 210.576 140.318 209.818 cv
141.545 209.057 143.206 209.498 144.025 210.803 cv
165.985 245.709 li
f
152.706 211.068 mo
153.774 212.732 153.29 214.943 151.626 216.01 cv
142.439 221.902 li
140.775 222.971 138.562 222.486 137.496 220.824 cv
131.338 211.223 li
130.272 209.559 130.755 207.346 132.419 206.277 cv
141.607 200.387 li
143.271 199.32 145.483 199.805 146.549 201.465 cv
152.706 211.068 li
.392157 .858824 .717647 rgb
f
115.815 227.125 mo
123.456 217.547 li
115.806 211.445 li
108.165 221.023 li
115.815 227.125 li
.172549 .670588 .513726 rgb
f
127.085 223.98 mo
145.422 200.994 li
127.062 186.349 li
108.725 209.336 li
127.085 223.98 li
1 .34902 .266667 rgb
f
127.085 223.98 mo
121.73 219.71 li
114.081 213.608 li
108.725 209.336 li
127.062 186.349 li
145.422 200.994 li
139.188 208.809 li
138.955 208.445 li
138.642 209.081 138.318 209.707 137.979 210.324 cv
133.979 215.339 li
127.085 223.98 li
.94902 .313725 .227451 rgb
f
146.672 207.84 mo
173.202 174.583 li
146.639 153.393 li
120.11 186.651 li
146.672 207.84 li
cp
1 .34902 .266667 rgb
f
135.017 190.813 mo
151.557 169.992 li
142.548 162.835 li
126.009 183.656 li
135.017 190.813 li
cp
1 1 1 rgb
f
119.23 213.804 mo
131.366 198.527 li
124.756 193.276 li
112.621 208.553 li
119.23 213.804 li
cp
f
177.302 168.771 mo
179.415 170.456 179.762 173.535 178.077 175.647 cv
175.321 179.098 li
173.637 181.211 170.558 181.559 168.446 179.875 cv
142.538 159.207 li
140.426 157.522 140.079 154.443 141.764 152.331 cv
144.518 148.876 li
146.204 146.764 149.284 146.418 151.395 148.104 cv
177.302 168.771 li
cp
.992157 .580392 .0196078 rgb
f
119.243 229.215 mo
120.376 230.121 120.561 231.77 119.659 232.9 cv
118.183 234.752 li
117.28 235.885 115.631 236.068 114.5 235.166 cv
100.62 224.094 li
99.4863 223.189 99.3022 221.543 100.204 220.41 cv
101.681 218.559 li
102.583 217.43 104.232 217.244 105.365 218.145 cv
119.243 229.215 li
cp
f
152.135 254.559 mo
147.401 225.987 li
147.403 225.989 li
152.135 254.559 li
163.929 249.816 mo
163.927 249.816 163.925 249.816 163.924 249.816 cv
163.925 249.816 163.927 249.816 163.929 249.816 cv
163.929 249.816 li
163.931 249.816 mo
164.387 249.816 164.841 249.696 165.248 249.445 cv
165.248 249.445 li
164.841 249.696 164.387 249.816 163.931 249.816 cv
161.579 248.522 mo
161.579 248.521 161.578 248.521 161.578 248.521 cv
161.578 248.521 161.579 248.521 161.579 248.522 cv
161.553 248.482 mo
161.553 248.482 161.552 248.481 161.552 248.481 cv
161.552 248.481 161.553 248.482 161.553 248.482 cv
137.757 221.181 mo
137.664 221.069 137.577 220.95 137.496 220.824 cv
137.496 220.824 li
137.577 220.95 137.664 221.069 137.757 221.181 cv
0 .203922 .309804 rgb
f
150.017 256.866 mo
149.913 256.866 149.805 256.861 149.696 256.85 cv
148.112 256.688 146.635 255.398 146.399 253.971 cv
146.399 253.971 li
141.169 222.408 li
141.609 222.326 142.04 222.159 142.439 221.902 cv
144.144 220.809 li
147.401 225.987 li
152.135 254.559 li
152.157 254.688 152.167 254.815 152.168 254.937 cv
152.17 256.069 151.287 256.866 150.017 256.866 cv
.164706 .603922 .439216 rgb
f
163.929 249.816 mo
163.927 249.816 163.925 249.816 163.924 249.816 cv
163.029 249.815 162.13 249.352 161.579 248.522 cv
161.579 248.521 161.578 248.521 161.578 248.521 cv
161.57 248.508 161.561 248.495 161.553 248.482 cv
161.553 248.482 161.552 248.481 161.552 248.481 cv
161.548 248.474 161.544 248.468 161.539 248.461 cv
161.539 248.461 li
147.403 225.988 li
147.401 225.987 li
144.144 220.809 li
146.085 219.564 li
165.248 249.445 li
164.841 249.696 164.387 249.816 163.931 249.816 cv
163.931 249.816 163.93 249.816 163.929 249.816 cv
f
140.504 222.464 mo
139.467 222.464 138.451 222.016 137.757 221.181 cv
137.664 221.069 137.577 220.95 137.496 220.824 cv
137.496 220.824 li
134.284 215.814 li
135.689 214.139 136.904 212.284 137.979 210.324 cv
139.188 208.809 li
146.085 219.564 li
144.144 220.809 li
142.439 221.902 li
142.04 222.159 141.609 222.326 141.169 222.408 cv
141.168 222.402 li
140.948 222.444 140.726 222.464 140.504 222.464 cv
.372549 .772549 .611765 rgb
f
137.979 210.324 mo
138.318 209.707 138.642 209.081 138.955 208.445 cv
139.188 208.809 li
137.979 210.324 li
.901961 .282353 .196078 rgb
f
225.921 203.127 mo
225.921 205.859 228.139 208.078 230.873 208.078 cv
233.607 208.078 235.824 205.859 235.824 203.127 cv
235.824 174.428 li
235.824 171.698 233.607 169.476 230.873 169.476 cv
228.139 169.476 225.921 171.698 225.921 174.428 cv
225.921 203.127 li
.172549 .670588 .513726 rgb
f
225.998 200.154 mo
225.998 200.154 219.219 204.023 206.8 191.557 cv
194.379 179.094 191.192 163.034 194.008 160.229 cv
196.823 157.424 212.873 160.661 225.29 173.124 cv
237.719 185.589 225.998 200.154 225.998 200.154 cv
.392157 .858824 .717647 rgb
f
177.805 206.188 mo
179.87 182.684 216.478 171.371 230.873 196.343 cv
245.268 171.371 281.877 182.684 283.941 206.188 cv
285.857 228.082 276.752 246.795 261.223 266.734 cv
249.727 281.49 230.873 271.273 230.873 271.273 cv
230.873 271.273 212.02 281.49 200.522 266.734 cv
184.991 246.795 175.887 228.082 177.805 206.188 cv
1 .34902 .266667 rgb
f
279.282 207.865 mo
277.843 191.471 256.257 182.203 242.205 191.786 cv
254.806 188.93 269.388 196.508 271.423 209.51 cv
274.25 227.619 267.729 243.705 255.93 261.172 cv
255.373 261.996 254.785 262.734 254.174 263.4 cv
256.353 262.367 258.461 260.766 260.334 258.361 cv
273.286 241.732 280.88 226.125 279.282 207.865 cv
cp
1 1 1 rgb
f
156.776 313.607 mo
304.969 313.607 li
304.969 274.775 li
156.776 274.775 li
156.776 313.607 li
.992157 .580392 .0196078 rgb
f
148.34 331.213 mo
313.404 331.213 li
313.404 313.607 li
148.34 313.607 li
148.34 331.213 li
1 1 1 rgb
f
155.502 356.889 mo
306.248 356.889 li
306.248 331.213 li
155.502 331.213 li
155.502 356.889 li
.392157 .858824 .717647 rgb
f
297.441 348.086 mo
297.441 340.02 li
213.1 340.02 li
213.1 348.086 li
297.441 348.086 li
.992157 .580392 .0196078 rgb
f
164.112 294.533 mo
164.112 299.799 168.383 304.07 173.651 304.07 cv
178.918 304.07 183.187 299.799 183.187 294.533 cv
183.187 289.268 178.918 284.992 173.651 284.992 cv
168.383 284.992 164.112 289.268 164.112 294.533 cv
1 1 1 rgb
f
296.166 313.607 mo
299.832 313.607 li
299.832 274.775 li
296.166 274.775 li
296.166 313.607 li
1 .34902 .266667 rgb
f
288.828 313.607 mo
292.498 313.607 li
292.498 274.775 li
288.828 274.775 li
288.828 313.607 li
f
281.494 313.607 mo
285.16 313.607 li
285.16 274.775 li
281.494 274.775 li
281.494 313.607 li
cp
f
183.187 331.213 mo
187.588 331.213 li
187.588 356.889 li
183.187 356.889 li
183.187 331.213 li
f
175.351 331.213 mo
179.752 331.213 li
179.752 356.889 li
175.351 356.889 li
175.351 331.213 li
f
216.933 274.719 mo
211.457 274.719 205.344 272.923 200.522 266.734 cv
186.371 248.567 177.556 231.418 177.552 211.952 cv
177.556 231.418 186.371 248.567 200.522 266.734 cv
205.344 272.923 211.458 274.718 216.934 274.718 cv
220.369 274.718 223.553 274.011 226.008 273.238 cv
223.553 274.011 220.368 274.719 216.933 274.719 cv
226.011 273.237 mo
226.014 273.236 226.017 273.235 226.021 273.234 cv
226.018 273.234 226.014 273.236 226.011 273.237 cv
226.031 273.23 mo
226.032 273.23 226.033 273.23 226.034 273.229 cv
226.034 273.229 226.032 273.23 226.031 273.23 cv
177.805 206.188 mo
177.806 206.175 177.807 206.162 177.809 206.149 cv
177.807 206.162 177.806 206.175 177.805 206.188 cv
177.81 206.135 mo
177.811 206.127 177.811 206.119 177.812 206.111 cv
177.811 206.12 177.811 206.127 177.81 206.135 cv
177.814 206.095 mo
177.814 206.087 177.815 206.08 177.816 206.073 cv
177.815 206.08 177.814 206.087 177.814 206.095 cv
177.817 206.055 mo
177.818 206.048 177.819 206.041 177.819 206.034 cv
177.819 206.041 177.818 206.048 177.817 206.055 cv
177.821 206.017 mo
177.822 206.009 177.822 206.001 177.823 205.993 cv
177.822 206 177.821 206.01 177.821 206.017 cv
177.826 205.964 mo
177.827 205.957 177.827 205.95 177.828 205.943 cv
177.827 205.95 177.827 205.957 177.826 205.964 cv
177.83 205.922 mo
177.831 205.917 177.831 205.911 177.832 205.906 cv
177.831 205.911 177.83 205.918 177.83 205.922 cv
177.834 205.884 mo
177.834 205.879 177.835 205.874 177.835 205.868 cv
177.835 205.872 177.834 205.88 177.834 205.884 cv
177.838 205.846 mo
177.838 205.841 177.839 205.837 177.839 205.832 cv
177.839 205.836 177.838 205.842 177.838 205.846 cv
177.842 205.808 mo
177.842 205.805 177.842 205.802 177.843 205.799 cv
177.842 205.803 177.842 205.804 177.842 205.808 cv
177.849 205.741 mo
177.849 205.74 177.849 205.739 177.849 205.738 cv
177.849 205.739 177.849 205.739 177.849 205.741 cv
177.852 205.71 mo
177.852 205.707 177.853 205.704 177.853 205.701 cv
177.853 205.704 177.852 205.707 177.852 205.71 cv
177.856 205.674 mo
177.856 205.672 177.857 205.668 177.857 205.665 cv
177.857 205.668 177.856 205.672 177.856 205.674 cv
177.86 205.637 mo
177.86 205.634 177.861 205.633 177.861 205.631 cv
177.861 205.633 177.86 205.635 177.86 205.637 cv
177.876 205.498 mo
177.876 205.498 177.876 205.498 177.876 205.497 cv
177.876 205.498 li
177.88 205.465 mo
177.88 205.464 177.88 205.463 177.88 205.461 cv
177.88 205.463 177.88 205.464 177.88 205.465 cv
230.769 169.477 mo
230.769 169.477 230.77 169.477 230.77 169.477 cv
230.77 169.477 230.769 169.477 230.769 169.477 cv
230.783 169.477 mo
230.784 169.477 230.785 169.477 230.786 169.477 cv
230.785 169.477 230.784 169.477 230.783 169.477 cv
230.797 169.477 mo
230.799 169.477 230.801 169.477 230.803 169.477 cv
230.801 169.477 230.799 169.477 230.797 169.477 cv
230.812 169.476 mo
230.814 169.476 230.816 169.476 230.818 169.476 cv
230.816 169.476 230.814 169.476 230.812 169.476 cv
230.827 169.476 mo
230.83 169.476 230.832 169.476 230.835 169.476 cv
230.832 169.476 230.83 169.476 230.827 169.476 cv
230.842 169.476 mo
230.845 169.476 230.848 169.476 230.852 169.476 cv
230.849 169.476 230.845 169.476 230.842 169.476 cv
230.858 169.476 mo
230.863 169.476 230.868 169.476 230.873 169.476 cv
230.868 169.476 230.863 169.476 230.858 169.476 cv
193.846 160.414 mo
193.847 160.413 193.848 160.412 193.848 160.411 cv
193.848 160.411 193.847 160.413 193.846 160.414 cv
193.852 160.406 mo
193.853 160.404 193.854 160.403 193.856 160.402 cv
193.855 160.403 193.853 160.404 193.852 160.406 cv
193.859 160.397 mo
193.861 160.395 193.862 160.393 193.864 160.391 cv
193.862 160.393 193.861 160.395 193.859 160.397 cv
193.866 160.389 mo
193.868 160.386 193.87 160.383 193.873 160.38 cv
193.87 160.383 193.868 160.386 193.866 160.389 cv
193.874 160.378 mo
193.876 160.376 193.878 160.373 193.88 160.371 cv
193.878 160.373 193.876 160.376 193.874 160.378 cv
193.881 160.369 mo
193.889 160.36 193.896 160.351 193.904 160.342 cv
193.896 160.351 193.889 160.36 193.881 160.369 cv
193.904 160.342 mo
193.933 160.309 193.961 160.277 193.991 160.246 cv
193.961 160.277 193.932 160.309 193.904 160.342 cv
193.993 160.245 mo
193.995 160.243 193.997 160.241 193.999 160.238 cv
193.997 160.241 193.995 160.243 193.993 160.245 cv
194.001 160.237 mo
194.003 160.234 194.006 160.232 194.008 160.229 cv
194.006 160.232 194.003 160.234 194.001 160.237 cv
0 .203922 .309804 rgb
f
230.873 196.343 mo
230.407 195.535 229.918 194.764 229.407 194.032 cv
230.066 192.364 230.629 190.436 230.873 188.348 cv
230.873 196.343 li
230.873 196.343 li
230.873 183.994 mo
230.468 180.697 229.067 177.207 225.979 173.844 cv
226.268 171.426 228.283 169.529 230.769 169.477 cv
230.769 169.477 230.77 169.477 230.77 169.477 cv
230.774 169.477 230.778 169.477 230.783 169.477 cv
230.784 169.477 230.785 169.477 230.786 169.477 cv
230.79 169.477 230.793 169.477 230.797 169.477 cv
230.799 169.477 230.801 169.477 230.803 169.477 cv
230.806 169.477 230.809 169.477 230.812 169.476 cv
230.814 169.476 230.816 169.476 230.818 169.476 cv
230.821 169.476 230.824 169.476 230.827 169.476 cv
230.83 169.476 230.832 169.476 230.835 169.476 cv
230.837 169.476 230.84 169.476 230.842 169.476 cv
230.845 169.476 230.849 169.476 230.852 169.476 cv
230.854 169.476 230.856 169.476 230.858 169.476 cv
230.863 169.476 230.868 169.476 230.873 169.476 cv
230.873 169.476 li
230.873 183.994 li
.164706 .603922 .439216 rgb
f
229.407 194.032 mo
223.668 185.789 215.231 182.25 206.83 182.25 cv
204.519 182.25 202.211 182.518 199.962 183.03 cv
193.468 172.964 191.887 162.947 193.846 160.414 cv
193.847 160.413 193.848 160.411 193.848 160.411 cv
193.85 160.409 193.851 160.407 193.852 160.406 cv
193.853 160.404 193.855 160.403 193.856 160.402 cv
193.857 160.4 193.858 160.399 193.859 160.397 cv
193.861 160.395 193.862 160.393 193.864 160.391 cv
193.864 160.39 193.865 160.39 193.866 160.389 cv
193.868 160.386 193.87 160.383 193.873 160.38 cv
193.873 160.38 193.874 160.379 193.874 160.378 cv
193.876 160.376 193.878 160.373 193.88 160.371 cv
193.88 160.37 193.881 160.37 193.881 160.369 cv
193.889 160.36 193.896 160.351 193.904 160.342 cv
193.904 160.342 li
193.932 160.309 193.961 160.277 193.991 160.246 cv
193.992 160.246 193.992 160.245 193.993 160.245 cv
193.995 160.243 193.997 160.241 193.999 160.238 cv
193.999 160.238 194 160.237 194.001 160.237 cv
194.003 160.234 194.006 160.232 194.008 160.229 cv
194.008 160.229 li
194.626 159.614 195.881 159.289 197.595 159.289 cv
203.692 159.289 215.597 163.395 225.29 173.124 cv
225.53 173.367 225.752 173.609 225.979 173.848 cv
225.979 173.847 225.979 173.846 225.979 173.844 cv
229.067 177.207 230.468 180.697 230.873 183.994 cv
230.873 188.348 li
230.629 190.436 230.066 192.364 229.407 194.032 cv
.372549 .772549 .611765 rgb
f
216.934 274.718 mo
211.458 274.718 205.344 272.923 200.522 266.734 cv
186.371 248.567 177.556 231.418 177.552 211.952 cv
177.551 210.054 177.635 208.133 177.805 206.188 cv
177.805 206.188 li
177.806 206.175 177.807 206.162 177.809 206.149 cv
177.809 206.145 177.809 206.14 177.81 206.135 cv
177.811 206.127 177.811 206.12 177.812 206.111 cv
177.813 206.105 177.813 206.1 177.814 206.095 cv
177.814 206.087 177.815 206.08 177.816 206.073 cv
177.816 206.067 177.817 206.061 177.817 206.055 cv
177.818 206.048 177.819 206.041 177.819 206.034 cv
177.82 206.028 177.82 206.023 177.821 206.017 cv
177.821 206.01 177.822 206 177.823 205.993 cv
177.824 205.984 177.825 205.974 177.826 205.964 cv
177.827 205.957 177.827 205.95 177.828 205.943 cv
177.829 205.936 177.829 205.929 177.83 205.922 cv
177.83 205.918 177.831 205.911 177.832 205.906 cv
177.832 205.899 177.833 205.891 177.834 205.884 cv
177.834 205.88 177.835 205.872 177.835 205.868 cv
177.836 205.861 177.837 205.853 177.838 205.846 cv
177.838 205.842 177.839 205.836 177.839 205.832 cv
177.84 205.824 177.841 205.815 177.842 205.808 cv
177.842 205.804 177.842 205.803 177.843 205.799 cv
177.845 205.779 177.847 205.76 177.849 205.741 cv
177.849 205.739 177.849 205.739 177.849 205.738 cv
177.85 205.729 177.851 205.719 177.852 205.71 cv
177.852 205.707 177.853 205.704 177.853 205.701 cv
177.854 205.692 177.855 205.684 177.856 205.674 cv
177.856 205.672 177.857 205.668 177.857 205.665 cv
177.858 205.655 177.859 205.646 177.86 205.637 cv
177.86 205.635 177.861 205.633 177.861 205.631 cv
177.866 205.588 177.871 205.542 177.876 205.498 cv
177.876 205.497 li
177.877 205.486 177.879 205.476 177.88 205.465 cv
177.88 205.464 177.88 205.463 177.88 205.461 cv
179.249 193.992 188.883 185.557 199.965 183.035 cv
199.964 183.033 199.963 183.032 199.962 183.03 cv
202.211 182.518 204.519 182.25 206.83 182.25 cv
215.231 182.25 223.668 185.789 229.407 194.032 cv
229.918 194.764 230.407 195.535 230.873 196.343 cv
230.873 196.343 li
230.873 271.273 li
230.873 271.273 li
230.873 271.273 li
230.867 271.277 228.978 272.299 226.034 273.229 cv
226.033 273.23 226.032 273.23 226.031 273.23 cv
226.027 273.232 226.025 273.232 226.021 273.234 cv
226.017 273.235 226.014 273.236 226.011 273.237 cv
226.01 273.237 226.009 273.237 226.008 273.238 cv
223.553 274.011 220.369 274.718 216.934 274.718 cv
.94902 .313725 .227451 rgb
f
230.873 313.607 mo
156.776 313.607 li
156.776 274.775 li
230.873 274.775 li
230.873 313.607 li
173.651 284.992 mo
168.383 284.992 164.112 289.268 164.112 294.533 cv
164.112 299.799 168.383 304.07 173.651 304.07 cv
178.918 304.07 183.187 299.799 183.187 294.533 cv
183.187 289.268 178.918 284.992 173.651 284.992 cv
.941176 .521569 .0156863 rgb
f
230.873 331.213 mo
148.34 331.213 li
148.34 313.607 li
156.776 313.607 li
230.873 313.607 li
230.873 331.213 li
.94902 .898039 .854902 rgb
f
230.873 356.889 mo
187.588 356.889 li
187.588 331.213 li
183.187 331.213 li
183.187 356.889 li
179.752 356.889 li
179.752 331.213 li
175.351 331.213 li
175.351 356.889 li
155.502 356.889 li
155.502 331.213 li
230.873 331.213 li
230.873 340.02 li
213.1 340.02 li
213.1 348.086 li
230.873 348.086 li
230.873 356.889 li
.372549 .772549 .611765 rgb
f
230.873 348.086 mo
213.1 348.086 li
213.1 340.02 li
230.873 340.02 li
230.873 348.086 li
.941176 .521569 .0156863 rgb
f
173.651 304.07 mo
168.383 304.07 164.112 299.799 164.112 294.533 cv
164.112 289.268 168.383 284.992 173.651 284.992 cv
178.918 284.992 183.187 289.268 183.187 294.533 cv
183.187 299.799 178.918 304.07 173.651 304.07 cv
.94902 .898039 .854902 rgb
f
187.588 356.889 mo
183.187 356.889 li
183.187 331.213 li
187.588 331.213 li
187.588 356.889 li
.94902 .313725 .227451 rgb
f
179.752 356.889 mo
175.351 356.889 li
175.351 331.213 li
179.752 331.213 li
179.752 356.889 li
f
340.221 249.357 mo
334.592 255.957 li
335.65 247.348 li
340.221 249.357 li
cp
1 1 1 rgb
f
294.799 229.377 mo
289.172 235.977 li
290.23 227.369 li
294.799 229.377 li
f
339.328 225.627 mo
342.973 175.5 li
353.156 176.346 li
349.531 226.205 li
349.064 225.896 348.57 225.615 348.041 225.381 cv
345.135 224.103 341.953 224.293 339.328 225.627 cv
.992157 .580392 .0196078 rgb
f
341.404 233.582 mo
342.021 232.18 343.656 231.543 345.059 232.162 cv
346.459 232.777 347.096 234.41 346.479 235.814 cv
345.863 237.215 344.227 237.852 342.826 237.234 cv
341.424 236.621 340.787 234.982 341.404 233.582 cv
cp
334.625 230.6 mo
332.643 235.107 334.191 240.273 338.064 243.008 cv
338.191 243.096 338.326 243.174 338.457 243.258 cv
338.895 243.537 339.354 243.797 339.844 244.014 cv
342.527 245.193 345.439 245.115 347.939 244.047 cv
348.039 244.004 348.143 243.957 348.246 243.908 cv
350.404 242.902 352.225 241.146 353.258 238.797 cv
355.287 234.182 353.611 228.881 349.531 226.205 cv
349.064 225.896 348.57 225.615 348.041 225.381 cv
345.135 224.104 341.953 224.293 339.328 225.627 cv
337.307 226.652 335.611 228.359 334.625 230.6 cv
cp
1 .34902 .266667 rgb
f
338.457 243.258 mo
338.895 243.537 339.354 243.797 339.844 244.014 cv
341.566 244.771 343.381 245.008 345.121 244.799 cv
344.43 246.369 li
343.375 248.77 340.832 249.973 338.752 249.059 cv
336.863 248.227 li
334.783 247.313 333.951 244.623 335.008 242.225 cv
335.697 240.656 li
336.342 241.553 337.135 242.352 338.064 243.008 cv
338.191 243.096 338.326 243.174 338.457 243.258 cv
cp
.992157 .580392 .0196078 rgb
f
303.781 205.322 mo
302.221 204.637 li
336.021 168.808 li
343.527 175.744 li
301.861 219.91 li
305.637 211.324 li
306.691 208.926 305.861 206.238 303.781 205.322 cv
f
296.932 225.137 mo
301.861 219.91 li
299.01 226.389 li
297.955 228.789 295.412 229.992 293.332 229.076 cv
291.441 228.246 li
289.361 227.33 288.533 224.643 289.588 222.244 cv
290.805 219.479 li
296.932 225.137 li
f
290.805 219.479 mo
293.064 214.342 li
302.221 204.637 li
303.781 205.322 li
305.861 206.238 306.691 208.926 305.637 211.324 cv
301.861 219.91 li
296.932 225.137 li
290.805 219.479 li
f
303.674 197.275 mo
353.982 219.406 li
358.91 208.203 li
308.602 186.072 li
303.674 197.275 li
1 1 1 rgb
f
340.986 167.537 mo
342.223 164.727 345.5 163.452 348.309 164.687 cv
351.117 165.922 352.393 169.202 351.156 172.009 cv
349.922 174.818 346.641 176.092 343.834 174.857 cv
341.027 173.623 339.752 170.343 340.986 167.537 cv
327.402 161.56 mo
322.867 171.871 327.547 183.907 337.859 188.443 cv
348.168 192.978 360.205 188.296 364.74 177.986 cv
369.275 167.675 364.594 155.64 354.283 151.104 cv
343.973 146.567 331.937 151.251 327.402 161.56 cv
1 .34902 .266667 rgb
f
322.228 213.846 mo
329.695 217.129 li
340.268 193.097 li
332.801 189.813 li
322.228 213.846 li
.172549 .670588 .513726 rgb
f
298.893 226.638 mo
298.934 226.556 298.973 226.473 299.01 226.389 cv
301.861 219.91 li
299.01 226.389 li
298.973 226.473 298.934 226.556 298.893 226.638 cv
289.578 222.267 mo
289.578 222.266 289.579 222.265 289.579 222.265 cv
289.579 222.265 289.578 222.266 289.578 222.267 cv
0 .203922 .309804 rgb
f
302.221 204.637 mo
307.553 198.982 li
307.555 198.983 li
302.221 204.637 li
f
289.172 235.977 mo
290.23 227.377 li
290.565 227.741 290.971 228.039 291.441 228.246 cv
293.332 229.076 li
293.803 229.284 294.298 229.382 294.794 229.383 cv
289.172 235.977 li
.94902 .898039 .854902 rgb
f
301.861 219.91 mo
305.637 211.324 li
305.948 210.617 306.095 209.884 306.094 209.18 cv
306.093 207.495 305.248 205.968 303.781 205.322 cv
302.221 204.637 li
307.555 198.983 li
317.484 203.35 li
301.861 219.91 li
.941176 .521569 .0156863 rgb
f
294.794 229.383 mo
294.794 229.383 li
294.298 229.382 293.803 229.284 293.332 229.076 cv
291.441 228.246 li
290.971 228.039 290.565 227.741 290.23 227.377 cv
290.23 227.369 li
290.25 227.375 li
289.1 226.136 288.772 224.122 289.578 222.267 cv
289.578 222.266 289.579 222.265 289.579 222.265 cv
289.582 222.258 289.585 222.251 289.588 222.244 cv
290.805 219.479 li
296.932 225.137 li
301.861 219.91 li
299.01 226.389 li
298.973 226.473 298.934 226.556 298.893 226.638 cv
298.04 228.344 296.414 229.367 294.801 229.367 cv
294.794 229.367 294.787 229.367 294.779 229.367 cv
294.799 229.377 li
294.794 229.383 li
f
326.398 193.901 mo
326.398 193.901 li
327.484 192.749 li
326.398 193.901 li
316.47 189.533 mo
316.467 189.532 li
327.389 177.957 li
327.39 177.958 327.389 177.957 327.39 177.958 cv
316.47 189.533 li
0 .203922 .309804 rgb
f
326.398 193.901 mo
316.47 189.533 li
327.39 177.958 li
328.77 181.11 330.947 183.923 333.79 186.063 cv
327.484 192.749 li
326.398 193.901 li
.941176 .521569 .0156863 rgb
f
337.859 188.443 mo
337.859 188.443 li
337.691 188.369 337.523 188.293 337.358 188.214 cv
337.524 188.293 337.691 188.369 337.859 188.443 cv
337.859 188.443 li
343.903 174.887 mo
343.88 174.877 343.857 174.867 343.834 174.857 cv
343.904 174.884 li
343.903 174.887 li
340.515 169.775 mo
340.514 169.027 340.666 168.266 340.986 167.537 cv
340.989 167.531 340.991 167.526 340.993 167.52 cv
340.991 167.526 340.989 167.531 340.986 167.537 cv
340.666 168.266 340.514 169.027 340.515 169.775 cv
340.999 167.507 mo
341.002 167.501 341.005 167.495 341.007 167.49 cv
341.005 167.495 341.002 167.501 340.999 167.507 cv
341.018 167.465 mo
341.018 167.465 341.019 167.464 341.019 167.463 cv
341.019 167.464 341.018 167.465 341.018 167.465 cv
325.921 166.591 mo
325.921 166.591 325.921 166.591 325.921 166.59 cv
325.921 166.591 325.921 166.591 325.921 166.591 cv
325.924 166.567 mo
325.925 166.561 325.926 166.554 325.928 166.547 cv
325.926 166.554 325.925 166.56 325.924 166.567 cv
325.928 166.546 mo
326.198 164.865 326.684 163.191 327.402 161.56 cv
326.685 163.191 326.198 164.865 325.928 166.546 cv
348.377 164.72 mo
348.309 164.687 li
348.309 164.687 li
348.309 164.687 li
348.332 164.697 348.355 164.708 348.378 164.718 cv
348.377 164.72 li
348.268 164.669 mo
347.554 164.362 346.809 164.216 346.077 164.215 cv
346.809 164.216 347.553 164.362 348.268 164.669 cv
346.071 164.215 mo
346.072 164.215 346.074 164.215 346.075 164.215 cv
346.075 164.215 li
346.074 164.215 346.072 164.215 346.071 164.215 cv
327.474 161.399 mo
327.477 161.392 327.481 161.384 327.484 161.377 cv
327.481 161.384 327.477 161.392 327.474 161.399 cv
354.213 151.073 mo
351.563 149.919 348.802 149.372 346.084 149.372 cv
348.802 149.372 351.563 149.919 354.213 151.073 cv
346.077 149.372 mo
346.079 149.372 346.081 149.372 346.082 149.372 cv
346.082 149.372 li
346.081 149.372 346.079 149.372 346.077 149.372 cv
0 .203922 .309804 rgb
f
296.932 225.137 mo
290.805 219.479 li
293.064 214.342 li
302.221 204.637 li
303.781 205.322 li
305.248 205.968 306.093 207.495 306.094 209.18 cv
306.095 209.884 305.948 210.617 305.637 211.324 cv
301.861 219.91 li
296.932 225.137 li
.941176 .521569 .0156863 rgb
f
325.328 206.801 mo
317.484 203.35 li
317.484 203.35 li
307.555 198.983 li
307.553 198.982 li
307.555 198.98 li
303.674 197.275 li
308.602 186.072 li
316.467 189.533 li
316.467 189.532 li
316.47 189.533 li
326.398 193.901 li
326.398 193.901 li
326.398 193.901 li
330.256 195.598 li
325.328 206.801 li
.94902 .898039 .854902 rgb
f
337.928 188.472 mo
337.859 188.443 li
337.859 188.443 li
337.691 188.369 337.524 188.293 337.358 188.214 cv
336.075 187.608 334.888 186.88 333.795 186.058 cv
333.79 186.063 li
330.947 183.923 328.77 181.11 327.39 177.958 cv
327.389 177.957 327.39 177.958 327.389 177.957 cv
327.391 177.956 li
325.853 174.438 325.302 170.497 325.921 166.591 cv
325.921 166.591 325.921 166.591 325.921 166.59 cv
325.922 166.583 325.923 166.575 325.924 166.567 cv
325.925 166.56 325.926 166.554 325.928 166.547 cv
325.928 166.547 325.928 166.547 325.928 166.546 cv
326.198 164.865 326.685 163.191 327.402 161.56 cv
327.402 161.56 li
327.426 161.506 327.45 161.453 327.474 161.399 cv
327.477 161.392 327.481 161.384 327.484 161.377 cv
330.881 153.851 338.3 149.374 346.077 149.372 cv
346.079 149.372 346.081 149.372 346.082 149.372 cv
346.083 149.372 346.083 149.372 346.084 149.372 cv
348.802 149.372 351.563 149.919 354.213 151.073 cv
354.236 151.083 354.26 151.094 354.283 151.104 cv
354.352 151.136 li
348.378 164.718 li
348.355 164.708 348.332 164.697 348.309 164.687 cv
348.309 164.687 li
348.295 164.681 348.282 164.675 348.268 164.669 cv
347.553 164.362 346.809 164.216 346.077 164.215 cv
346.076 164.215 346.076 164.215 346.075 164.215 cv
346.075 164.215 li
346.075 164.215 li
346.074 164.215 346.072 164.215 346.071 164.215 cv
343.961 164.217 341.95 165.427 341.019 167.463 cv
341.019 167.464 341.018 167.465 341.018 167.465 cv
341.014 167.473 341.011 167.482 341.007 167.49 cv
341.005 167.495 341.002 167.501 340.999 167.507 cv
340.997 167.511 340.995 167.516 340.993 167.52 cv
340.991 167.526 340.989 167.531 340.986 167.537 cv
340.666 168.266 340.514 169.027 340.515 169.775 cv
340.518 171.909 341.756 173.943 343.834 174.857 cv
343.834 174.857 li
343.857 174.867 343.88 174.877 343.903 174.887 cv
337.928 188.472 li
.94902 .313725 .227451 rgb
f
326.029 215.518 mo
324.482 214.837 li
324.482 214.837 324.483 214.837 324.483 214.837 cv
326.029 215.517 li
326.029 215.518 li
0 .203922 .309804 rgb
f
324.483 214.837 mo
324.483 214.837 324.482 214.837 324.482 214.837 cv
322.228 213.846 li
324.483 214.837 li
0 .141176 .215686 rgb
f
326.029 215.517 mo
324.483 214.837 li
322.228 213.846 li
325.328 206.801 li
325.328 206.801 li
330.256 195.598 li
330.256 195.598 li
332.801 189.813 li
336.602 191.486 li
326.029 215.518 li
.164706 .603922 .439216 rgb
f
309.068 262.742 mo
309.068 312.18 li
309.068 329.395 317.107 339.93 331.248 339.93 cv
345.389 339.93 353.426 329.395 353.426 312.18 cv
353.426 262.742 li
371.141 262.742 li
371.141 312.18 li
371.141 339 353.279 357.275 331.248 357.275 cv
309.213 357.275 291.352 339 291.352 312.18 cv
291.352 262.742 li
309.068 262.742 li
1 .34902 .266667 rgb
f
291.352 312.18 mo
291.352 262.742 li
309.068 262.742 li
309.068 312.18 li
309.068 329.395 317.107 339.93 331.248 339.93 cv
331.248 357.275 li
309.213 357.275 291.352 339 291.352 312.18 cv
.172549 .670588 .513726 rgb
f
309.068 285.439 mo
291.352 285.439 li
291.352 262.742 li
309.068 262.742 li
309.068 285.439 li
1 1 1 rgb
f
371.141 285.439 mo
353.426 285.439 li
353.426 262.742 li
371.141 262.742 li
371.141 285.439 li
cp
f
331.752 331.199 mo
342.803 281.961 li
329.74 290.002 li
329.74 257.666 li
319.693 306.076 li
332.754 300.049 li
331.752 331.199 li
.992157 .580392 .0196078 rgb
f
331.248 357.275 mo
321.782 357.275 313.088 353.904 306.248 347.931 cv
301.309 343.618 297.336 337.948 294.74 331.213 cv
292.562 325.562 291.352 319.16 291.352 312.18 cv
291.352 285.439 li
309.068 285.439 li
309.068 312.18 li
309.068 312.18 li
309.068 329.395 317.107 339.93 331.248 339.93 cv
331.248 357.275 li
.164706 .603922 .439216 rgb
f
309.068 285.439 mo
309.068 285.439 li
291.352 285.439 li
291.352 262.742 li
309.068 262.742 li
309.068 264.915 li
309.068 277.395 li
309.068 284.948 li
309.068 285.439 li
.94902 .898039 .854902 rgb
f
319.693 306.076 mo
319.693 306.076 li
331.248 300.744 li
331.248 300.744 li
319.693 306.076 li
0 .203922 .309804 rgb
f
319.693 306.076 mo
329.74 257.666 li
329.74 269.987 li
329.74 279.476 li
329.74 290.002 li
331.248 289.074 li
331.248 300.744 li
319.693 306.076 li
.941176 .521569 .0156863 rgb
f
161.495 409.96 mo
163.085 409.96 li
165.133 409.96 166.545 408.9 166.545 407.029 cv
166.545 404.946 165.31 403.816 163.261 403.816 cv
161.495 403.816 li
161.495 409.96 li
cp
163.72 399.226 mo
171.912 399.226 173.466 402.757 173.466 406.782 cv
173.466 411.442 169.229 413.774 164.18 413.774 cv
161.495 413.774 li
161.495 419.247 li
163.649 419.247 li
163.649 423.908 li
152.279 423.908 li
152.279 419.247 li
154.257 419.247 li
154.257 403.852 li
152.279 403.852 li
152.279 399.226 li
163.72 399.226 li
cp
.992157 .580392 .0196078 rgb
f
186.321 399.226 mo
186.321 403.887 li
184.132 403.887 li
184.132 409.219 li
190.841 409.219 li
190.841 403.887 li
188.758 403.887 li
188.758 399.226 li
200.234 399.226 li
200.234 403.887 li
198.187 403.887 li
198.187 419.247 li
200.234 419.247 li
200.234 423.908 li
188.758 423.908 li
188.758 419.247 li
190.841 419.247 li
190.841 413.915 li
184.132 413.915 li
184.132 419.247 li
186.321 419.247 li
186.321 423.908 li
174.881 423.908 li
174.881 419.247 li
176.823 419.247 li
176.823 403.887 li
174.881 403.887 li
174.881 399.226 li
186.321 399.226 li
cp
f
214.29 410.349 mo
214.431 409.642 215.208 408.159 215.597 407.312 cv
217.539 403.746 li
215.597 403.746 li
215.597 399.226 li
225.096 399.226 li
225.096 403.746 li
223.188 403.746 li
216.656 415.222 li
216.656 419.317 li
218.633 419.317 li
218.633 423.908 li
207.333 423.908 li
207.333 419.317 li
209.347 419.317 li
209.347 415.15 li
202.496 403.746 li
200.767 403.746 li
200.767 399.226 li
212.842 399.226 li
212.842 403.746 li
211.007 403.746 li
213.055 407.488 li
213.267 408.159 214.008 409.748 214.148 410.349 cv
214.29 410.349 li
cp
f
225.627 415.01 mo
232.195 415.01 li
232.195 417.977 235.161 418.47 236.645 418.541 cv
237.881 418.541 239.646 418.259 239.646 416.775 cv
239.646 414.021 226.086 415.187 226.086 406.182 cv
226.086 400.956 231.03 398.59 234.49 398.59 cv
237.456 398.59 240.457 399.543 241.87 402.191 cv
242.224 399.226 li
248.297 399.226 li
248.297 408.089 li
241.905 408.089 li
241.905 405.476 239.857 403.992 237.386 403.992 cv
236.362 403.992 234.95 404.628 234.95 405.864 cv
234.95 409.501 248.933 408.653 248.933 416.951 cv
248.933 422.46 243.776 424.438 239.575 424.438 cv
236.008 424.438 233.536 422.778 232.195 421.189 cv
231.807 423.908 li
225.627 423.908 li
225.627 415.01 li
cp
f
262.424 399.226 mo
262.424 403.887 li
260.234 403.887 li
260.234 419.211 li
262.424 419.211 li
262.424 423.908 li
250.699 423.908 li
250.699 419.211 li
252.925 419.211 li
252.925 403.887 li
250.699 403.887 li
250.699 399.226 li
262.424 399.226 li
cp
f
287.001 419.495 mo
284.6 422.143 280.928 424.473 276.303 424.473 cv
268.816 424.473 263.837 419.671 263.837 411.797 cv
263.837 403.676 269.946 398.802 274.571 398.802 cv
278.104 398.802 279.691 400.779 280.009 401.202 cv
280.822 399.226 li
286.365 399.226 li
286.365 409.255 li
280.045 409.255 li
279.938 406.959 278.809 404.806 276.303 404.806 cv
273.759 404.806 272.1 407.947 272.1 411.797 cv
272.1 415.292 273.9 418.436 277.255 418.436 cv
280.221 418.436 282.553 415.327 282.869 414.975 cv
287.001 419.495 li
cp
f
288.415 415.01 mo
294.983 415.01 li
294.983 417.977 297.949 418.47 299.433 418.541 cv
300.669 418.541 302.434 418.259 302.434 416.775 cv
302.434 414.021 288.874 415.187 288.874 406.182 cv
288.874 400.956 293.818 398.59 297.278 398.59 cv
300.244 398.59 303.245 399.543 304.659 402.191 cv
305.012 399.226 li
311.085 399.226 li
311.085 408.089 li
304.693 408.089 li
304.693 405.476 302.646 403.992 300.174 403.992 cv
299.15 403.992 297.738 404.628 297.738 405.864 cv
297.738 409.501 311.721 408.653 311.721 416.951 cv
311.721 422.46 306.564 424.438 302.363 424.438 cv
298.796 424.438 296.324 422.778 294.983 421.189 cv
294.595 423.908 li
288.415 423.908 li
288.415 415.01 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.0
%%For: (\704\740\770\740) ()
%%Title: (1404.i029.070.S.m005.c10.flat design science 2.eps)
%%CreationDate: 4/4/2014 4:05 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9<8p[Idcf@B=TGHFNE05=^t[^NVJ[JODFU/DRO9CKL-(]Vh\S23en#m#Y.!o>V?+IRZ'Ia/Arm^^SKUKVH'\BTNT8lB@l
%e"m\kV40F3h0WJ_M`O4HpruG"4DJt^gW`@?l$1I!Ze\b7H,%O^d];pF4=QU\7eM*!T9<D3=3dItZ_\au[<`NFgZR[9a]OhL:%aS^
%IbTEO:]Z#WpU;'+HES7S6M[RkFUl_ZjGA.Q^?eAG/p%V-Q*Ei+cWm_2fO[_aTD,(D>,U+-GAGICf1!pKC`0V-rMW_n&"k\V#LWZ9
%/G[\5\QA7JhNX1.n?KT-_CCjD4"\+o+f,T\81$o;M11Yjp]aME1B&TQqENqOV50D6g<T,hO)6:%K7Re<Ntk\\mV;gk/<EWd*$.N2
%Xa7MsO[W4`I8qr&d#7[QB84q[)-75\eM&6P5,e%PY1lE;Qe<tDJie]4ZSDh07)*Ka5AR+Y;7RUQfm5aImXFPQYc\CZf^6@Y4_h`K
%e@I>^#.\Bq"aSY"7Wl;8XE[i#it@967/jM4#NbYNe-0N&epFnJCF)X5cX-@k\')O]G)'.4+7?M1`^02:l0+#)gTYc<e7[NN8[iQN
%?D^nhadU5Mb%elS=I<0*iY(V[/FKl\-agtJM?U%r-o(nRBC/k[JPoDq=nEdR^oA]nD>n/GKMcs*;1j't<XufE8PPATqJ(enEH'Vn
%5AHEu3,=C?hA5h-"fQA7j_f@GV!>7g_n,bMEdr9>%S?.f<W!A#$8:/Rs.7:"W[_=T'q_KU5#kVZ1^lrq>0JZSRpk56_n^)CJ_:GV
%%!e['[4;0r4>siCESJKL[Z/u0'E6$gSqku]%uY`T54LbZ'8H9=$k7h'%n"PPL9qNZ2!m'c&T*^q`M3:@W^:^<?oAu@rl8h7/j<J8
%$jVLd0b4a$s-'_Zl(E`M>kfDUiLo[)<^eBo<fMaKs((Kk!H7#.YZ3`^Zj2s-LPGg`:Di(S^.P3mFJe;-d](+`ZmZqX*<>Ijm2^&9
%FIk-#cU)!+%EF;)Yq!>HFQE'3><)P2fl2mtV<QLV_Dk$_O5Fo,'FsUslTF%@s-O89M#Z^K;K/=n97)2+E`aHTkE*WKNcpQ14_CIQ
%a6/2;Sdp9mSp$+%9^Cia7^MS#k.q(=(rZN=icO8R0ockG@l=\[3(>q^ZnVL"4?,SScCpb<&tM5?#)../c5^LWgl]l\OJ+qUObBni
%SUK3V3qp!m3dIOmHsugFB_O5#DkC'+/"k5QMfkU8.YV]Mp2kn"'d7j":en6eQ@\$8HP8O%PEk&,Kli=W#pb\n#rHYG:KEt2Fg;q<
%-U+)sGVUSX]=c>"AQgf?.a&HMiK]NtRCs;g5"`!MV.oRKEhtE;Y3Y^\EhtG<Uu.@dI9@?aDHUuF(4/%OI?\"$bB<(Dj@WcUh"U'8
%j@WcF5ee[JqNBhSU[u!Mpn+]BrQ`1*.umKS4Q,UuA<8Y!'jDQ^Lj5c803%R9>M"d<C%4Mmo<([N(TQK[>7Z/Qq7j<)_lc%M-Sp7G
%pGFE!T3:o?Xj92F?V]oC[r>F$qG\X)jGX%NepSmeKeE>sed"b`IqRT2FY2j3/t8qL6mTKkqn2M:OtCA;$fg!6'pj#!=",J>9:%Mk
%?;9hUZn<'mM_d"kZ$:9sqOtHCaQA$Fb1)0^`ML#7^)"LEhYMrQ2*LO5L]`TBQ41_Xn=bIU:Zk-dmoS:*^Kt=5/d#oLTs/CY`B-Zl
%ZOd+9!+Z?`@u%KMINL2^U]tejZ/6?J%[9:7D2\/kYWKF4>Ft11T'_mT)G(8KND&U8KZ!rm$klJ<hjss,!)Hn@6T^R8QkXA$+MWM$
%#21TE\,f[f]#8JXI&o#J$"/=sktIHs!"0p-*?t<P'jQ`?1!Esd=h'C9HQ$^Bp7II6;_rP9-%Q7,B*%27P6a;GnD%$f.qB:q,`4\o
%HboI7i];XEpo9^M"#HY*(5E*AUFdB3`qD_c18W0/IJA-hb$<?<&*O+0*@HDshtH7]aU:4dnC7PM@eRot7.Hh#$+[odJXa62l'`[!
%%56f66CA''(7.[qo!2Ms<(XV&?+:S.."SAP+gOWZ=GC_I+d,R?oLpMFAh7Gb[.tMgp'NKk6ubd2E$*1)>X=Nn*M&@O5h4db*+p#u
%$@R"d0<=]2Z0nB!hG\Ps;dDOC,_G\lf8GYE23(tn9p@+!^iY-4=9oB:2In`F'"PLpeeLPS:KCFr<qK3!/]S17d*e".Ufo-TV@<'i
%"7lX(JJjSXH7V6W[\`bc8Z_L(78^VT68PeJ#RdYeZX=V2p$u<*8.6XQ6&B5CEZk1FaTS;0#:,uGOt*Cq8//(V>dZ%,>ogHuR[!%\
%85SAD?(?9B%[[^GZ3+3E.p3`T,$b^Zf>@"oR44gXJAk[j!kGggN+9=nK%*.j,r8uf)fCh>'8E2uUHBiS&/<.k_+Z<cU51j]*=suG
%Pru4!m$E9CiY>TAO?jV<-CFmkbm;+?"d<AgFFfjY>lm*aC&gRk@s*WAk]i^tQK/M44j'+pLt5iM\VSpk&tk8AfYQ2F-Pm)F!29IE
%@)N)',#$AMoK-P%3ih+q_$3K8*g-i?A9'C-)oocSO<WAInHGX]R'=S@X`[AkkS<!2-oObeX_;T7)aI^h&W7G8BPTlS07b[u!nCQo
%XnuUK5q5K2:71j.EY8]tS6XteAPj-e>R-F(KQ6<_MGQVc5Y[Nh!DldeZ6[*"N9FEC\2;7KKlBdds7P"I60CR)^]8uF;V?XeJtZYT
%'jUFI0jKJ_Ts!_HY33C3;qNp).)8]t>GFT>]n+?d(/tN[EVY(9ETE&%b]Cs<(-KrI9+2@TY_#+NJ4YK]C+3!71$jEo,tO74b^elD
%#-A1,.01Se5W'$L.&L.#bIBNq)1]@F>5-&G>0e?2CaKFu5W+JQki0&lg($@L6A+U'Nm*D*'JNQShGB_j"G!^5Mc(V3[1m9$#MCrR
%,o7An[)k1*@1);HXT@a)&W<LQ"JCG^9RsS^%)aEV^g"8S"jdP!j$dNh`oL5)8UscDNY;''T9P9&j-#9`HlqNDTg?i!2Nm(c-7G35
%-HC3nPd#[PQo^uM\u1'.mdn^[npkDj5si$]W=Z*e6k+eWS??;dIK>&:MiUSB.72(W1E&X<S89=HH@Xa"6#$_n&%K9LLZ<S]m&6]&
%.\jCD8-f?P!\t.L$31a4GjY^!B`Q,scoQTfN[NF@S(/?oETUamFo4BK9aJ1#8g&3b__5<?1h9%`<R$Xg&1:-R8'P8r9Ys]t$HQ[<
%<_+&5_?)#"a?QN279qBZnf1(N/kft8OH9Qcn]^;59T7>PnH6/1Z4/`EZHb1]U<M&j&.:`TJN%!N$rC33g_-h&gFOTk'I"(@lY(=T
%8OEOkH@-gV"];^N!GE+I#/SagL7qQ@#I_^P5H,RaJriUR#P)OQ:aAGmE`AP[_dI)K[.#94bZKNb'H[YhAf7is_^<Gp-:_ciQ9HHg
%U1P6<lA%DHJG"Y:"'Hc<^mKn8N"^i(*K(3hFrCF#P#,]@"9t])iu),^d#L[AP#Y:oe:o6[13D["P)/Wo,T2:I(/93*44uS$82.Sp
%$M#Gr%>/=6#S!cm[`nsgQi#Gh5VC'L[f,82>nL:Nio$%=Kp8q)_Vc3uD!dH&i92U0i--EniedYP1KB)C+l\:sM^@j6^@#JEM<$_A
%>*rk73dPaQO@GsQ$OBCiD*92e$<'N9*tq\*`)?/j5]igAL$8@8_0$DN0ZWVZ+0gYb2unmk6I0X73WjPm,1J"^)-hO4JNkE?\Dfok
%K&tQ\)1dor6p#%oL)3Yf5&sjRi].ZJ7C2_q1-S7ncPe2<Cu9p3TrWe1;KeEY+-$oSQQGk0YA-\FnX\LYXKM$sl'+GaXeLuYH$iAs
%'6tQI2b],\FH+7/lC1W?9,POG0S2QH"4'_Z9&-Fu8eNk#PFgRjJJ0jjN"C1pH.:^t[]D!L$:kJ'^uB<Og]5#PiNSIg`?G?e)i5[<
%>3Qd5,Rb$3Gb&tl:I1p,0Ma)=Q#1R-7rP=R;u^gZ8k5P)df:(W9[fXQ$3EQA+]*?.+eqse/<I+MFKcc"LWOuqQ!"\qH_u`f@I]Rm
%m4#/)hB2SrgucF>S;JY<Y?2&:XtJ(LSNt2^pb("P$fHBsD&Rep6kp=@Z>C9(ZA>Ys5I*tTkfk__Fl<3rCh*`q8MR3T$)K-n.YBnm
%I\4ALNFP.h%Uks9Wd/(bU(EkKU5/j*Z$gh&8/I%;B-e;e#1=TC:)4E.Zp(#jZpQ>ZHV?n@J5uh0i.?oXoi2Q5Zu$D%Sa3)j!S:m.
%o0PQW%*TgO*RH4e4+m[R2M3PMC5D>+%G;I/kRReQ-mF"qkE)KI'g/WSh7?!3$8c<;aQPm*P%kk.jRi#c`<1k)A-Q9o'/AJb@0U.K
%Zu.WrajlN0aT6$@oe9p8&lse7H.tn)!@9u7gV]h3J:!)V8rt6b(Y0f-hICV/ZACH9&>\n3^;XoQLNC[7^MP?\paEl:PS!BfPQqm.
%Yr*O20:!F6N&X(D:r<EH5nB+M-ZPCf((XkD6.VUT#q!V)O8p.f=<^6#',b/e'$2V_l\rTWHnIhTYCqqXW"OCY<G&:"(MQ'@'SlL(
%"GD/CTt+t?<Df?#[%?APUc_!,o7/'F0PiX`3lORUC)pI\0uUCI@%caMViq3FGLQV5a[L2<]T5?WJC%D"OaYZo3$:DQR0nadP><=t
%KnB(lXL't#oO&#,S'FE"'814.[8]O(a.d[pdU;c%TLB?P.`RW((rL;t9"[$:q'r?^-tGd7P#!@/C10Ro+Hp49WA(iH5pZqrlEMC/
%56534m^rN5(Ln-NWgFnkWdkVU^Ri;IfS5W1,Db\qnC=:D:QYu>a"U()&n:/9W>82?W/P\?+Mu6nOc<rnJ)\WCLf9-LHYerN!?j^]
%id;8k#0J.?5tF@TJjDad%q\/o$)s09Bo8c.$\:eSqJDCJY3E3PbqA#8\q1Drl:`BG&P>nAQ(k7i+XsEAI#&L!Z_Q[*80=h(:gk%9
%")!3VQ-bO:fY\Tc0S+M24%!i7K;FJmLm6)U24(mj<D?LkG,0j)XBH$GM2R:>UBlui)!=_$7R=b>ntbT=HHO1N$m(kTb^;6L;]jE_
%_9taF3^C8IgS@sT]rCd9/t@Q`,\0?=OY)71;esbd16G3^#R;ZEK]t8X73ApiBdS+b&D8r`qq-QgMFh@k!l9iABuhD^RjQ)'TT%3q
%MZHm1Yo[N7Jhkc03\G!jW5!kc@E-"%YR,'6,Xhu`nkKrC(o6alV$R/@R,Nn<4DqGs8Wj+Nk:FKl6\6KW>+ZqR"nH*-KM"c<P"W^R
%*h!eePL4olj.b':Kmh\f->FOJ8BOGir-)Up)=]Tj//ZIifluYF@L\DKLCjk='<Z4FI,,HD'V2,>&;E4r<b$e\AeR]:2A_H)#"od/
%JBo,!!@=)NSX8gW"J+2<>aSc@M*rMokf'1I0[Q7_X5GIQb)n_;Yo"cmA2i?:jV'bM'JLdFe!"lu(^inL0`c+s=La;EV-AZ"A=.>f
%`bf*#btD`I80SDa()O5Y-,AS=@j<3/oG4^Q)T836V@8HpJj[a/aNDO(k5q5f5hP]kdu:c"o9g[d(A_'[%$\lR)G*M3@W@7K5`XBV
%W8N<\6m"FnRG+4LSChK:.<CU)k\;2a%Wn4Qhn8Os=o4T76<@%/E+Im<ZKLF0cV2i\9_HW$/f5[N8HE#[&Gk3K:mY`,0FL!9HN(sX
%FbNYG?P@&r>EHd7";1c5%1+/@,02U+:okiV:@]]e/0uFTP@hE!A?Eh4M'P?HbE@)aR?\i/:sis`fT<;O$]pCmg7[3E/5O:<!ugo,
%j*dW2V(j[_IP,E#&H_T,L!]\gSkp_$J%q"MImlujBigf01ea9#^+o0oM\fq96VqC5RgMU6DU(-a!e0Y&4uWdl,r(CYU3V]lchNSZ
%G2gYCWuShefJ!sUTsdRafmFfUX<"!F7Z*[\q_4U/*BJ(KggoIpNesbPogFm48)994<G68:+d0+.#_fBmi=JAOkWCg?F*,c'?D\KB
%"*#i!5\G[T7h$fI8W?"aUkDhf;uoSs'JN-YGo-i8D\>udV`e"a&k[jB.KF4Ti7^cpf05!U]/?i+o+'_;02X\?+C[V1#Eapr:ln%Y
%;4cs%coctI0g/NFB7SX#NVa%''d[VmRX,YA/U<9o=NQC*P/iHbkN#7N`jQkD\2+bZ+:#.'Q6aNg#s=11r%Mho9QEEB!Wt8QOD5cj
%:#o_LH3aC:TM<XFK<P2Ij/l`,J8i:^aAL.oF^C`mMj"<$2[ElEY,`uW84230Z7lL*j?S6ni,PR&0,[Q6@;d,IX;@"5=kku$lXB!7
%$(%Af@W^V=!)Xa.rP^J+@%A;_,-d\3&r-K\)oi%E#0N#X5JY+b&S.;V2&;Y.F%*0"OFd6NA]Fp)2JL6!rYp`LFNn[\LP3k7KJi=$
%&N+M@-SmRC(gDVjQKsqV\SB2<X^W%LJhf/5mZ.G/m\;5YO^h&qkZ1'&mHC7OM4IJ?lZ88[6gH!/S\5XA&'1=La,tUk1bm(uesS*r
%V@GZ"8PPb?D%<K;=aVmF+N^)a.pN.qa2usNV0Ao*a<;]u8F(4HlnEE2U-k%SX$LNk59#7ck\*O&pJ"JRKMLp<PY=W"@)@S\0kHgd
%G`_Sa-Y>R%KCfkpkD7Xoj4HqBC-ZKaB@4CZ(ABDtqTD;^SR-6?o.FR2m>f*e@@9.d[$:h*OZi^cF*]N]j$dLJ'QscIJ+fn(IJ.88
%M(%n`^1?^e9hQ]>)T15/+]+5=af='T9n:,&M=iJ=3rhOY=+I_sLR8C)#X@8k[ahp#<]J4AGi:]&5(ooq;/<[D%[SntV!0eKS3.^U
%b-tAKDNC?T)'kD&(t(cY-H+]'#i64&$[&N^o)jqOVu-(qeWR&>*kQ<FFZsGd8&!Zf/*nej*KOh\r#Es&\F3FWpTUSA+;)NA#j.<S
%UuYtj`[<Srmn/IYjA08LIA?;I5PJ[eeMnB),C*,Uo2*b#lKcOX/-^uq3nrEp^gL(f_6?#8-8Jm'b23MT(Z#i_q#2]tha4O5fGi'u
%i#M^9`qpqST"U;#6OB/?eb#4MLOM`g!mhUZ"@rfKb<,&2$D0+m*'=*9LSa':9t8=P>_(<;$L<]kf6P^Cf-BhgT6"S50q8V4SU74:
%HUJ/Dn]s">-Ld\l'C2fLmkB1'8L%R"UG'e6$hMBG%Y9#U!QE)dAZ1"Cg*j>Z_si)i)h/bL6!>/i0?EgtJdH+B7E03oA7<PG'm\8:
%3Yj=lTlkH/Fd;:]\s+$n&mIY.nD]8LO.)ELWFHEI(KOO3LF*D13ONgYei<UT,M"Hl/1_5F'P=gG_N>N_'bi[B&m>]l,q^,+fO,ZE
%lI;)Lcr2&fW.:$i+;A$`L6p!s'sYubG_JL3$M@bo.O(t+W[3"b&pn"!^;6RAdbQ"jhacZm%Z;TeI@Gm3CHOkGm`VDOE0EAGnPpKK
%!jW)d+lSp/.D%E;h/Z%6Ej'^W!^g'6.g4X*8Ga"rTgsd6%asAEb4HR6(]fdrEJf+7M%QVnV2>CCAYJ=(LRP?6*kj@$RGXm>WSfWt
%6G^aTin3Kc6]`P"[)F^*:W<&fo))>P519'hXd>tr_HQ!^47n9>N3(LZj)Y^g!FL8h9*'U]`$;2D>=H+/H?jmLUf+j:dJ]]KnA_C_
%L&-Q<C2gTOHkq-nm8e=W5RsX,69lQ%EqBYFKJqSSi*'k2,03>CDR)p,bB:?>?ZNR=mT87+\WR[u3tq3W_Ot](:b+SD4FFs)#8f.G
%S>`t6&"'XoaL.km=FH.a-hP2coRQ:,F/1ctBU#gCYE"0^:1O@%!]uS/@8)Ho%_nmWVBD#Bj05nB'GEs1l([qXoMW/-.UW?0p_4ce
%P0LXu5[]oQ9do8)/#BTrn\N8a_A$75=eEO\M?bk\V"Q5=9K7,5&jM*YhDVXf14V(2Au=&Y7-&_1K:T91F!Y>Z\'TRp!`bTgJF"7"
%Yb681f"Ec*i7B^5J\3N)N$*$^Rl2iC,]AB83]7[q"T_2m>Fa],6TTiD$/Nri?4Zlo?PrNmXEtEsE!herht0,m&h5na!UFpLmC&5l
%&&uW]V"5BR3k`K?:1"UZ8:d2D?kn0jo`<Due@\$BH=<259^?Cus$*dV,?g]lKUlrLs3eIp.5LeqIQ=OVgqm?6ldLKjP:qA"1XG_&
%oSI.t6@.rQfDV]\(?5s"HH7T(G:,V&U>pE6+[?)>BI;Erna6*7\VGoXdQ1PVi>1s:M:kAmU+j.!G6.UR`l2Orm]7_3AVoi8nI2;i
%)sHcH21!5JOHTi"Ai[\;RYd"(Z]j8[U05\AO>h(?Y7P7Z[_EZM\@@(=M2PFt^]6k4g)b6VdO5^5Z&p$aX7;q&cPYS(%Q7a+D]Xas
%Q*7"TQUE>#Y5Fqir(i*#k&tcO]1`;9QkL@hScT=TIj*f"Cs+k/=$U@2Ye\5eR-2WE6p]TMMd4WJ`Gcm(In4'8,8:1R603+IM]R6%
%,RfR,'1aI6/)j*:P"bD^c@rkpg@R+A!lm,UMH=sRYpXOp+2r5O0Z6V;,_M[c:6C?M3Q-bA=M]4_l@6k<C_LaI,jG`_G4B\s`\suU
%>YqAsld#cCnLNHhQC!8akj1iQ=q!rVc\Wo//7rF3n8N1%8?Vstl]0SU]afP_Lb_0p$_R4R>^FA#AA8.34?'-QZIA9!b>.VA;$7PC
%U?K`ei5%cY9G01[b9L45pNd_._Ycnt#TA#][3#28=It(QX^<BgZ^EI]m)tUh/d:MmN3_'>pm<ab=nk2KorkcpM`+XlmmXAmBmo+Z
%mV5su*e^)/EHlFUBN4qN\'.$^c1CP*dI#jn2`doqG2(8fo7T8$^6!");7G//DpFYt88]E]DF/nXUK_M!Y1N<6FgtZE_8BpQB!8Vm
%3,[TcZ/ATN7oAND?*6H<da$7$W7"s&/[-29Vu9r()m,EAXi1lPL%TIJ.ab.jS:$%V0j]d&pS6b\q`Lj.h@1C<U3a-l<#jdE2l`_K
%j`[[qjh(2+UYIJa#BASS[9rF!%$Qt+T%khqD:J!\@,a^#Ose_sO:9"$6;<`WV^8en26*4WG5=)FH$ZefQ2A>BO.,`Fk<,nD]G#cI
%fXl%NDX92n2qu$kC$D;DX="ZI1U'Bk,.G1kbg\H^B?k8m*_pY8?FaCGS[?SBdon'$rg`.k6NbIHJt`U?ot2'hO5e1U92%i;375dS
%7MUdlWgCq7o=WW?!P-lJ/[t4-jpZs68\OsD&8@74YH/-[cW\G-LcM'7bLINXs0^:lgI@rc*`Yi\lrH]/2Y-:%Ulnl$X#FsE^3O5K
%jpanFA4_n_M$C_aOsSeE",tm!!a1[t=ckSgrXIPF/_QF1fp+_RQNK6I,Xk`J79)05=7?I(/]Cb\Rl;$_nJ!'hD6&gLX,<p_&0jP"
%<=Ii,<*/`l?ObL]P;HE@i3B0DR\?.<V:h<4\XKE">,\4T6+M8.=*76h6.*&]>Bb0bpN8U;=Z-s]2)N3)5i"7:__jP$0L?F)<@[4q
%VJ2I,M8*+0R%Ygg0K@<4/G&!5bH`,2[6,tD6<g`1>I/J,Y]6#.A%T1)jt0)D'M!:&7s>B^Ebrd9>fUo5-ZCA5Fqn)$2%l*`\58r9
%\[G-ul$PF?'Tt.#r3^7hKAh'dB9<(K\51!h#AN1S*Vf1K"XK4/,CPr*+4P*KVV,$Q;H_FMdef1nhEqq*aKA=[b*--9cs)r0G;/Lr
%&ki=b#Cgd4+>Hrb?s-pfZ4iB8OL%2,Z]1mG4/N,Q_G'2J?OA%Y'XF>fY^NGY1;V2'0Z+)90b<jbTEK<X=?]E6A(_X3FSrZf=<e^7
%8hrc_^NkHJl#^>K/JDIk+L&//M&LXFab)Hp@HCop!<u4b#ADHa-=e;[L1Fb$iiu]uY</g!5S7N/BVNP?/%Dc]$R*oSojF^.8_=ns
%&?>s'!siJCJrft8e.COSd`i`2a-+?'`KCN=O,4SS9V=tO8Kk!+6_[6?.5">F5rM@O9*S$-9Dg*`,_mrH/@d;l1u5eF\-n.s49[P7
%h[a]o=V.lUAJ]U-*0B_JH(dmfR%-.H+b0[lS9tt<3l383"7h-&Z/T;L-;!j/R=!g7he>ZCZpIN1-@PL<GXK"?i<sD5jO][H861GJ
%]TiGZ1Pl2L"]UJXjS)3,9-Bk2Tgg/g&eIIJ0n<n%$:uPb3>>UbFMUl`J:esT0aT,ZN0>A;nJKISaAZX51#XYri@]-ZkpguMKK,XE
%fT8ij%t=U+NU)^@MX`!#M>"a.iXHMLP"_0`R\5][96$6`7A`ifaZNu%=^peX1/g/B2G4f[0TRPR7]c?]PEnf*JA`cFC1LD#o*Pn.
%!`0.(+'=LA3'a"9^^Q/e%l>D>$;?*Uj<3r??q@HhppP,:-K-HnE#o1[#e-T4^o]^00GG$`#$tmC?djS@WHd,O$nrqhKlRgK748[D
%$3-(mn*gYPE!Yn4c9\sp$N(#%L.(fk%m8Jj>f.b56O+)qq1]%9:AKXf3/7h$?RM@26/DWQ+>A6))o+ZX`]NCfhBVKN$1A.M&UK+S
%fS"GcKQj@[A7`V<!l?s&_Da$_1N["+cq!_J&<7@@gqkD._I,Jm62j-ZK9,2N!^En,0>K8@'gP]0[%G]mJ51krH5#MS:>crI<$K[\
%@?SL$$2C7t`2Nmn.#ds)U)X5)e4:$CPEhL)(P:kn)hd/fr+30EZ"13%YiN+NZ,FV:J0i!-_L"W[YT,Z2DJ<!OdTFq#i_B$2`=buZ
%=='HXC,EIPGqAbB"Y;B;DfPDXBZf!SmXX4hR)fu/FI)^;H1UrFZfJ@OZ:$Y&H;LB_;SWoX4WKl$Q8nbB=jgF#=^i%no7kMEc'u0;
%b@/M(a^`G*.:@ug8Vne0+@<O3b/^kF9f[LIKk(J2'Tsaf>EDNp`=\7`,VMp,O9-SZ8HS-J,[Rd<`,:Jd9h;jWW2p0/9(\&f=[KEJ
%j9WjBOs_M!E^Pgcp^Vrk-7MBLA&aU>8n+^W"c=:Lks@.YA.$EkOt@q,8PgWDd`KXIV0du8S+:o#i8.VnOaL%^*+)A`YMi_Tm463[
%;'AN1cN@N71.cupOgU#@YXXWR5Vl9kTK4UG'o3;)m6k#%d#*-!65r6)ePBIUCU06U=Vk<De4G&tj=%$l&rkDV#_>0f'IbV3<>T=\
%8>mb26DSocTkm!5#fT\N?.9'."&stN&?^jnKF/jA,Bh7(%lK1b.VbYV#6bR$BV0P%R?*eBbk94?EH9%5)tDHLjUu->Rn:pYOm+#T
%NJY[5PN9"0$d"=7!</57OfBuY5te";?F#A.ib*#f\d&%bqTT:kpVO+:WA.`Zj;%;55::`)8Xs:\gU(;M#Wc6L=aeEY90f[J,Eqc6
%Uu`l00/9>UZ7[5K;/*J;/.8sf:mqQr=@eT$E^^"3[^[T@&mn?49HdQLaj*UUDM%PBFX/\e3Q]TA5rM#g9_7RG=nX''L&EHLU"kjn
%K1q*_[PD_hj&S#iVXSJ$Pq=9N6'G*-k:nb1d=*&ZPYptt,d;pJUD%F88mk15;]ub&iO1Xj.%eC"MX!\9DENp;.Y0,\>84X]pu2i3
%>1q>##&je;-&&]\[3d)KkJA-&<Z9ZrCJBE+1e_C'P)uUs;14:993GQ"?VegZ8Y@:/4E2r%X!9>..E2f(rru+i[uU^>>g8jr+]PcY
%Zar<H?'cib:,]AS44IGskke%rZC!KqdJAjT`^7u"At"3Y!D"aBi[7U+_lG!&BB#3ALAY3SQ.D)IY,AG^n';=a')WC^LWRP+/O[fX
%'OU6P7_%91>E@ut\3c/rYpOIK;J]ElYOm=cD,'(U>pGcjS[e?Lr.h[\aZ#JM#.7!AWt_g4`V_Ld,>2^ArU#bTo,:-5dZUT!P$qgV
%"_p_Ic?V1')9\+oFdri9=cjlj2<O"F1<aN+Xl'5T8(@B@aEItH9;7P\IAc+O:4;c*VDM;Dkc3-ZlGi\#'RNZ!@McC\0<3@rW&!t?
%U?rHeaS`"iZ,fe7Wm&,U3jGVd`.!G!1S8qnARYo)hGl*"YG)I6qFG__`62nmrN)[?M4RbtEmn>ql=6Y3<oRHi\Vti9?/eopLc8<\
%r_ngO7nq>3CsWAk&EeGf%ROPL1*1WNBRq3A!@[+R:4[Ep6D#>&!E'sF78Yo6i5l<o5Gi`]o-JCD?pZV-MK.Yh2pph?EC4MXm,S@@
%DY/#&$Yjcdo&A`:'X5LrAmFud,'dXZj+],c%?N;%k-Lq6CRS^R.lV`oZQjDFjY&7cEhBTYH]`q_Z01*X<s0.g+?-?8/En^*;_p0$
%_?ua''dmnqj:f>@^gDP\!mueK]]c(;^#,15mnMubDJjER9toEP8gb]qFQ+b-*T4+$'8Hm/PnP]kM=iL+kp;WZDZ*4EK#rpQ&"uI5
%E_i2<HXe6&-7X"EY=o.k=>pOggq5p`DOqL<W$V5DGr"BDfNf0>-@8%<WaNI#!d.s/9^KNN9fTBl-NN06*q@2"D"i4qXk6gJfWZ%4
%G/%ZdV)i)>-\ssQ5(@l,BW?n!b<aktrIlA(Eh=LNM2k=&mloLm4S!)*Gr(MoR7H,X,B(SLc%sA#O1^lNhTR3_k)hUoaI@J9brkQ/
%*dKQ&]U;:HbTh$YpmRHdkE.^paI@J9c.J.;Kk#$dqf)qlA>=)>j);4838#,gAoT%26m31uSMRE(YptUL8YU3L4:[-.*g=L9Ei:h9
%XDej`3@#sA3<kU:H%Z[4b:sHal<"`UR=u,YeKhFV\'ui@8f=-s8EI*<%M<P0#.#"Y2'S24"<=6tQ7!f5_ejZ/l'=b['g9"h.7>uP
%G!2jt;;3-ePYGV8:esFd+1:S%7&X"?G`,0U\+?<U(,/sb(]-Y20-p(;E5)Xn;XEB#IZ;:8iPp<SRm[[)rreTYe^t*=HQT39gLpET
%;LSesT-/FmdP_TO"pd(Y")Jli07f>W%rg6aNB\%m*,8h;Os5^*Toaji]8'em?kG8&Cba(%.6/j#8<V3P`1qeX;q>tE-tOt[)Fe<"
%h<iNG<pWjooN"(I@I=Qca)@e!\?[ho@MG.?a2MMsoZXs]WB!Mq7f%2Wil#J#e.`OT+KHIBIob$jj#L3<HI1QmF:=N[HkHpn@;oYp
%:Qej8RI/E85$>aMAnRHYLDiU;9LEWB^%aO+-,#QA03RUOm1W_r_aTXh/)n5rq$o7dICMg3Vi86nE$tT^ZM+@9jU;jps653`53T_J
%J<g[mVD;@qQKF!IdtuO&4gm"VSdeC`DB^-"dFLB'J"]:&ciUc?d=:a+B;3C3qI@;6.,"[6PRa+^]+<7@7jJj=RFOZ_BrSWlp-4Sc
%BF?2dnIJ7TB[154\hc$G@JjdnS(q+hMp$OnCRj!9YOO)W]O1m5a=&gjA)g+c<#f%j*-*Bh//(Yl8!AMtmYDIs4K=>gkXeHg&s^\B
%q*JUIO%j66aZ".Vd:Oq!3K@#"EQU?6Ea$\bkqXo(^q>sgMcci2b94\XJ#(%GO=lGtp8OC@q%a_-:#nK+PPGWtVpL?MK/BH.@ZeGg
%r`<a[c"7sYlbmeV4IS3fj*,du/rS7+Q;8`ccaDehga!N!`S\[T[liB18(f6Z[3PtEk)D?p<fD_'GpFAjS;j<%P5)L38iDNfKq[D:
%_.-u/W)t2aQFRj2C.-;le-s7NHGhWSkTgbXeBJpX)VZMLfecQI)@q8YJ]HP>a;PE\M[T-]=pA4n2K-T,E$iRr[!sI3nMGGc9,;5E
%,qJk'AM,oC=sJJ9k2j^^ILebo]!,F#Adj$9'YBVP`==ad%+b%1fTSl"r`F>80Qb?1DSQHVN+lormu(osj4]^<p*@(0Nc0[k`>EeR
%c<Z6JB3:IVG#(Q>a&2;U?eO(U`CmbNiu!"q%R(mB0>tf8W-C*5))"J"VdneoZ1@.8H1lh.rOrtV;Eot0I49=n`,YLVYN-rd-Y^+?
%Ni[pQdrDgKOuY4!kl`kI3DobNaXN<:Vt/Y1.;-6`'@`Cs]9F,]Qr)d88]8AF+P._&K#lgSTuFVd#47)bh[:$nU.@[+"E]T4M8a]R
%-[/ocH>eJ%MKh_d7pn04Sk>tYPZ1m^.SM7#QkN0%1h&t6iCWF08FN:om\S"kW6!XnOkj<j^WRh5gVW=7G<r%Gljeue]bl%,1;oFJ
%.138+&#;>'?Rb+42DNK7ZaZ\ojnhl\4$Zo")Z.4PH/@9SPje!6G*A_#^;kIt@M.f+][.HfM7*$i;m@6>*p1eA$*BpYYF6bO<O,V!
%2W04)S#.as*=8B;/P5HZ!-C!Tj/QR(Z>>ejOtN#18]$qiDr/!Jpr=,[*UF4`Aqk$9@oLif)=uOITuf3l">Eru4.7`ME)gaOh(Z$+
%-ipHmK!2I/FR-5IAGq^C:gjsX1-qbQZA&f'e(R(C/)a"AP]Y(m;^'8k60g6^YucES&+.O^9Xn\@cGF;XAZ_FO?07TTd\!_0XC'8!
%5s9_+?4,2,$-Pc;_4G&9*BufY++den?u.(fA8D@/``CPY@jeJZ9cE7]c)dZsI@(7`N[Be4I[=]uq4;`T-dL#ijVb\47@,C!*'$1&
%M&E*/R^"AaOQBVeB8XM1Eo&=l8R.[3G;C]J8X@PXc;F!h*B3)o;LQ2[]pU.U>;%F2<K3Ds9pn:*2_1b"Mok*\DHu7,<7/AB0_;#s
%#"B53((/fQGRutEJgLkK-c,1$Un*:FUDOs@E-3<L>pC;HGo/RWZc,1N.[m8fao+m5H"-.a>mE@kQ%_VOaFoK7#)d*r``#1`:h+tL
%GWIjqb)i/1ABrDt(JA(@Jf8_!?TcS.N@AO284P);aL5l;CP6AbR)qKO+HWW989K_LL!YYFLCf4FE3rhI_m_q_h'+ZC$\iPJlioIl
%6TB%;+1FNHg[L/P`5sDY@%ACK_+iQmqb:n>enFi)Cp\B=G%tp!QJsJM#Y*<K9aoT3Dnpi26DW0c5MjtC<m-#uRC!!6`6f;YDoCeP
%pt,qigddR#Z:Y:K.:k#`)Z.d0Gq#f;%SRurV!k73RSkKR91`2b,Ct"jhBcUprF+pg+m4-2q])LnEJ4o5+WhF[Y4O*X9V5).i&'4=
%Ie*csHo^&!W+??O]Vsqncc/Qje2ZC.7FQas7UZs"5bQjXODGM2V/WERgN&L;\U80Fhjd?KkL'gNA;fm#)f2"H:Q2V40`g$>K7cV:
%brjLHLUcrkFro(,KA(T9]9`k;GF074)q&WBXoZ\d<$AcB#Ir5.d@]qUb!:R$U>&#A88%i&DY=eYE989_iWC\$P>r_[G7;u7?8rgJ
%M)e-\1!NIQ!jqjc?j@>f>Rb7pC`aGK#&)Qo'MAG<#dlRA<"39"5U:6L5e'0P6b&lFDZG\$'[VgOai9hB[MqRnN)\SUPMLIN2EH?k
%+qoZsDBu.7Ds.BF\cmk,_F\Zdi7f7H7L-ZXJS]L;)pN6.Vq>Na*XoLI=c9aQW3Na6k*mLQ_b<D&R>7W.2[%H)ie^<(]TYs2?a@TQ
%2=f)UcrBcD25XaWT;Hk>qPC$hW\J)a9k9aPTAmVMh,o7D;0?>U1'$1X==5Qe3O+B3X1"a<BXBR,J06'kf&^"p0;U_:DF):*XHp63
%HC*FGcQTobH;&5SWGP=oEc#<*]-K`c"l!.bh'C4sOcgj^lmH[$8r(2TJd"UU/J?"Li5E[$ONhOF/V.(;:t9PARu++E!(2u5@6:_`
%%N@=Y0itW5+E6EriQ?T'b:!mu>W:WS'&fh246***#\Tp%aRZ.q6'AH#!U!"dJi&s[:mi<gM)%jr-8F/m9>:'SfmMJfrA&R!-K4sj
%3"b!O1NLq=I"d8rWPgWfPJAf'BYHUAb9lML.g1.f0JA:$hnt>X?nX*ah\8e-Ag`p]9p$!6/6T5W22,*m+s0#.R8o,QJ6:s6.]HUo
%!.AQ]1)'VN&s>I'"`cdUOL&QiN+#^SCgl3orr*acGf7p:6GjcFp$ho>6^'d<P*cB5SKGaFO28/4kfGPSHj2So3t/UE:kL%dTQAF=
%8eVL/abbUk,1>?0gsZ<\.G)TiH>MW*j&CKq*K+I&-P(GI&.Z[/-'%st@ZL*1$$]%s&.gjFNkLX'U*c`k8&lMZ^.)$p;T\)Q!G#2@
%A+]mHKImWaR;L&+`WE!_W/sc"44o<6O\!O!54%@`q!;-=^G\0%eeLprN)(4"O\rn2;Xou?c5do;Q,La-q])4l7!J.#I62]&H[)+V
%PWkT*j^i)tnbp+27k]sPNU?(4j"pVOPdf=]kVgeTOc[nWo2DT,OerUK,)&R#1@uqE9K5_)#\+Hu`]GR-!u2kt7#,$`+c+fb+tauP
%kY-tn`Iq>i&5RNj,p["iK0HO_7jpnGR08(KoEbp0c4UeXJ&:mmQ>[,Xgmm'pSCo9kr[Je6+!81\qC[E>/*\V"RY=aJ(7Q,?A3KkN
%d9c7rN>+[ur:+QI-;4!irjufOXko$;E#uuj95F%a_lN1Vc"]X1qmB&*engT*^ILCi0.m*K?>mWsQ#a@gXr[2H;.m/@$lPUZ]:@,E
%3N^i4mAN<k.&BF<+;Vp,nR)#LrpVj/>QFQ0[ods`&!]%Jd[>QLlTLR"1od+:FpI(qq28d9*q5-3;a$Y#C=V`dJ^L]LP8[,WU&6Ms
%N8N)IKRX@<iSV`dTm?8TWc['/Y>L!+]$3Os'h3:=d/@gVf'O.g>:TBC7d4_03q_'<q+r+q]NV_YW%c\@YoZ[[:$hT-8%j5uW'mED
%JsI<8)fasQ),R*=hlV#OK1MRfS.<Yb:od)T+?,R4@O).'J^FQ].X.Vk*W>?@Z50.%RJ`6eS2,D$NSaJ+V-Eq!BZ7p6P8Y+/fB?YN
%UJA"!7-*8D$PJppI?oZ]Gr3L$%Rq$>U!LVhINj\JCQ)S_Ah.V_]?PMM77jd[2jDi2K.njqb:qPD#.!.Q[4;i&-EYa#V9"H"%;=br
%i\f%dbtbBF$sg$7(I[g4h18(FFBi"AX)_,uS@L+.9gb;KEmpi,Bld;B\6T;Y\,NsAlcbX)R8E#QfH4^)QRdTHF'W[dbKY1?\Lohm
%jo4SWS9DSf\O+3%&RB9C\H^bmYsD'o4pRO:)uYZZqkrOjo:NSZWfW1mkuRcH=07G[.AR`8fdFs&M->8:Ci^eq3NDfXEN0nBR\,jl
%SPH<BE!MGA]&i&UaAXZW&ZZQjM+,E\KJcaWaIA'\a4+UEoD#g/FbaAB%-.0o);@hoGo]=^N97/tlco.W5Gs/,Q5%sK>q]Y+AGIPU
%Es3a23kb6,\J":2b/FRLb!%0ZIl**Z/#qt.#3!fKdXqjOkmBZqN4N(D[tB07bsp2219CI!',t?LnTiAKVct3XHqBG<<B+%#ml\h.
%3ij,9`K]]+T[Xbr`r?ASj*q`/0m9%o7X)J3KkpML]!9RXFdpJ^1F_s$4.!aM#(`cJ$l#!9rnB3Rm!(OfN<5@![I3:)e1K[(ROLj*
%5X7C]K)TBr`;Tg#qeXV=;e(oeHOPP.;lMKbdg\rbOYNdj5_!Es.pepaHpY9>mV]Qn:d^a/a4XFDa0G9^8kd:+W-o<;9[9H@;]O2f
%kB^BI0BQ+qo-g6diQ0V"b,<V?9YFT8^_is(W;3(=[,Em3FgiA[s"!#f]^Bc5eQTXk`%=&LQAXuC`$DN%fURubl1BiU+jW-Id1f]F
%RISB7JZ_YC+'0e-2VY@_B"`IfJC.,c)KIFOfUR1\)tCM6/QgI_Q9"L39,c0"LaB_=`9O:O>@MdFHNLf9XpW!X3!siC0n.\3`YT1g
%AoqO1JY;+mgDF:RbY:7\.3^%`%-&cjQs!i[1O_U*TF_Hm6l4[N0]@Ed7=].Lj".><[42/WZU:i%$t^Jo2&W;]!=,';>&H0kqL2D)
%.`ErHrC&%j^:aTn[IM;h?Y%%/`ijMgol;?>NuHhUjjm,2SF\L8=28r<':KF1F9,+4^5m="j6-N-O%#jZSoLbZimdRu!]II>iDC7J
%@.:10S;3Sb?O\4mdnS_WCf?kCK0K^Zf[ODZ!=Qs7@"!UB>kd`Pj+:]#a0g6,=9MNMEXUT72@9kh>cIA@HUHTAidetkP8[I&E[M?X
%2u]6SA+U&Uq'S&@G!mVI!op=^CYd^J6:6[;:23c$=sGL5Lo%;>l]kPr+sG?#ek$=N!86]sMl7]Aac3!!s/5dAOKss[B&.L>+?-&U
%-T.\$K%"_OH!Z/]PACo]#n&<-&cOUm&\en%2_duT0U-=71WF+2M/!gf7d[i"cWn2a*aF>MfiG2",g'(716q/>M,Ik<ZXUY98"r\@
%IJ0+"U0Qa9gFI<7g!%F0'I%Wtc[)`m/4u&@bR3[(nQ;"WU?.?PU(d[/l&S9D*n9I9`M+%abWHYP*fKSJ\BR,OA]f+c&HO<31DZeu
%7@\ZFFe)u=M@=)t,jKY+8tTWW'sT0@?u5,5r]8#m'H,,r@/XY_BkB)sVU/M,JR+IEbLo'AY>Bo(HmNCnW/]J5Lb%l3,^XL4c7a:J
%%XiB7c/BsQLh;d!?-BR'Y1j!$7Ei%R3;$pYKQXq+B'+2P*4fb+l.VZ1blD$"!2jnL2Q(=pLHumIbf-t/$P?.PS>o:@<LZWsF/h,&
%<LXA3F/h,#<,F7gc)FkiW[<%F%O^2lT!g's0Elsk=.UiGi#I`r7jE)87KoYsN^e(H9#6H=Q1P+YI!!_^Kjsh1]T\Msr\HbjZs3Dd
%WpeN^^CM]rkAf3`\K.5"#9JOQ5J1PW%W<4R8EM;/j:6%d-b"2$G]q9o6-[p$/_BLAPA>8DLg4IAiuJpkR;nJPF[[e%3rG=:n6Umr
%E*\5(V/*G^U=Q84a0iqFT8HBP<%BGBrBcDijIN4R1<t_0dj?"3"k@RD-KOL`bDSlEIV=+@K(t65kJ%kR59]n$?hYX:r>,3\(c1Q$
%XO94L2*2odm.:M0WB[1kP9^8P+5KUgJTABR4["k;75/>NW'LFdfNAdfE&L#[049W")`5ji)!'p&_]X_AC(/g<_pY1pVUQI48TVqh
%U@Hb)`poG=9_$1S3dgI$0ZdI>7#\[bo::@%SUPY[n(dq)mO2$5h[(8b3,Pl^p]&P;^N9GDeVrcsrc6'7s#]uTrZr-a4hur^?;TFG
%qg@Qjhmq)-EXZ/ND?lX-HnRc!RJV@:nX]e=T[u@3H$-mc=m2jO;\!EgNr7G]nStbRYG9;MrYHX'e=S6t^i7I$lSTV(of%aZ:LArM
%NUD!iY;cJ!4iD[6jKo:4<[r?;D1N:2$V^*];-YPBpenX1ntg&1#BL:+oNTBD@GKX3Q92IaRHuC-2)g^n[@-CPIoUWC'$9uA4,OsB
%+Q#]T[77QIdTlfPCY#9KH98.02r!H65j.UkIQ"[->q0;d"Y@(Cs4,DAh*F72R:8oRkG2M1-nq0i%c7Us",4B$2UhFYU.oL"j>>9:
%'VDCLgJ!9i9sC8EN2G<@e7h>d:f5qJ(0a#::rc$Hr7_;'YE6Go^W==t=Fg8=hMu#@l7XnQKl2u@mukpeF2Q2Vn8]8]RN#S%F2Q2V
%n1lr8r5T4!bfiB_0?abjln<FtbM;SB2nWCY?uZW<ic>3"N&"JbOaX+Pc*RZ=RN=;*IC@RaAO;h)`$S'Dk(cZ),t05&aMG5*2GrOs
%KDAphdkQSk5A['=f]VmJa6WH*,kY>b[p0m99pd`W3HL^_`,lTc4D0]'!DCne*62$fVOg'hB.,RR)s8S&?*=p/``UjgktCWsQR2m5
%s-[qcp.rl^k!/GZWO]91i1-\?Y5F.""]r/`J!)?nk-qZ5pn>do+<$]+\+k/fTN,M2"b(<RA=@E.R!L<%*ZoU#/n.10WYQjcZ\J'5
%A;pOW*T/-BHTdXFBj6uU['7m%U<GL%=jYN+<Ot+-6;O@cO[F-.8T?jq.l*WEC=PY5FY)FG#.#N>"U7mnQC=Hp<GW48K\?aT[/W!F
%`r*(&"_2GjQiRY/DTA,:!SFsfG)RVTR+j?m<n!TsS=eOjk&u\t>FE#B@rB>S&Ne!^7mlU.$Un$$GQ$m<?*8:mp".GlOg&Y*DWH2`
%ePGDaM>_=o>8^t>8njlan"<]7Zkk`fHW#K[<XYFJF&_Qq@6=>=M].j)Z?7MoUrHHrm$gK5Hj9ZF=.p?B1J_a^PtR,hS'2u^=L)Q$
%%&kG'\aF!XIaHI2!DUHt6UdsKr1'J9U!:n$\f07s^i'C!RmdIuk2]!O*D]<X+qu*-S**423QX1YO^+NbP30dh?*WAOT[uBmeU][)
%VGV;]qFM9aB7emi$E4=f@]CGePLnSd>/XH]]`PnT%;/-3^5<>1b/:oM$t14D2'&iQ6kD?u[)Mr-A6J2X'$KG*K]Qog-V2k@T26[&
%B]e(VLgJ[dC1j]mc#pS=A'J8JRqm(dD/QN$c*b+]+oE.a\H7raFk>d<iF0'icP8Du@RenY![F28F)uJAY0P;B\[acqhcAq4l_VlA
%)U=;?F"?f=;!<cG@]n-RLJ%<TfrUdPb=1([Fk>d`aNu_j*5hIF0nu_jOC=$%F4nWY<<Cq!T.;W\+*2n6`!i4f0u:\3+6%E'#@pNJ
%(gRA4NrJDAg/5Og3En/a>Kp3Z;X=<g.qJVFFFVo#=K,H;8\n]K?^IB&4=W=^=[Aeo!H0<ikh9/u06Zj0e/LE+,0X:QQloDpOFnUf
%lUBQ?qtKXgGjRT+p2RVUm8qHL,_8qg\[(]p_^PErTJJq;MZ9X>)#-<57md<JRL[na2EK[b^u'<..G3;dP8`7AVhOj)f$W.Q)-2JH
%?u^_M!`QaX'NL%=]i=EO4DENZJZKXF#Nc!9c?k88B5u3g/M[@890U.'1'^/_3:&)o_mb5H#U/Yi`@&Di#i0YYn+-$LG(`]KD+:/[
%dbJ)r]6+!aSDUE=)2YN;6$.M8_8!*a,:XrFobX$*;1Wq7$q[Y;aF?J)RgVY`+r&:5U:ErS\g.*27a8;:FR;csf.B75/?rk@jNW\?
%(L<JM]@K,.NsZn=5#W/h!%0lZ63b^^8-K>kfk5s.UrFNQpGr]i\k%fHS*i!>3k6Uq#'Frr..1W5IdVI:Jp$CemV]Qn:dps3a#S5=
%qi#+?R:?i'4D0]'!DCne*62$fVOg'hB..iX3;^@.(+mW!*ug_NU$$0(a6]nJQ1eZ6+_#nTcYT02F.JA&]p:nQG.i>4IcTHN1G#lW
%pq]A]AZ2cI0b#p)_r['";Vn>HcKNZ=O%!^ccSu<"2>(M>)3jOt$+ZO6.RCN7]GcN?dnM0lpE:X1L!O*(Njq[?d*/,EZ#Uipa]L!b
%8PK(3)-:H^R`KGkrmH8J8Rh].+#7j'@d>WJD_p;r)+4CnHBNf]"C.UPCO$ifC^1Qn7=JHb-H56>TPgWgW5&VZ=i6u%(T=MV_>\Bn
%[DQ0pK(b7>>N'JqW6"8LKQU0A(%>1a!P^."ISAjp0Js/`NQU*OP*,&5A?0<6.U@6PHSu,88V<FYrJ?q(dGPS1io$-jK6FfQ3A0kq
%$<%6%f?X"Cp-s\6[sEu\Gg:s^9c%NLP4[Q%Ogd@sjNX[Uk8MW7iH62NGr6b2=4DjWIg##-ZR&8"6),@u(_XBWj/p5Nc,MBc6;@nk
%@JAUAUt-*Lgq<0g7@mZSfl"J.s*)NpZTs;9C@`i'\a<_d[.LBR.%`opdS@C]I2qpa7%\eeHG+Jgq&de+ctq8TQ1RtT]35R-jmJn_
%dOOPaF?A<0.i?K\*at\)4tVre+<;)L!86FoV9A>09qOH5mQR6;h#VnMfkCB6+Q!ap(:NN$hKc5#mRF%6;8(ia#BdK,!"Tc(Jb8kt
%inTS#c0mNiaj4HKGc0Y,UI;GA%*3BEO'&"8r*oQZEoh+*0t5r;<Q(c'NG>ZJ*L)$od9sH=mLF!<86<-7%UW?Oe0Pf9(m&aF>\h0g
%dPZaF&YJ$P!g)lDeu_H$@RKS[:)gFGGt-CRj9Mngc0en;B``0OajXl&0meGfCF'ST8u'Dr8-HC7O<E*hW"S%[d9]eT6QM."G-%(L
%BG%e](I8]7-3qfpB7A?f)V*,.K0Ku`H<4tlDM%Z:*j/Zkl;7JQo@n^'VMm(ZEZ1P_P31@WXa9e%rCXU.SMpbgYZ?+td&NmW[\T/G
%K<6Sc%3I-(YuDJ,^e9AM?+"gm1@U=C1TRfr.RrZTK72jtHlmgt[hnPu#@p^(dQd6b<U'*VWDpP;O8"`R_mP@0LQo1L5e8*1.Q(db
%N!![O59;\%IEtLHn`+`Y8FgQ+jsfZ=U4HO(+sTos3+.mfP(euuFXq)7AXl"71P<Qg-++0Lr:#h&9H#sVn^/s2c4GYNKF?P]/-I:u
%;W)U'c4kd^HpXM7^s"\^e%-/Gb?sO--'Zn&?eR*lO]biHLqKV6-$o/toP]si&5tG3P]6EqF34,GUY?t[?'/0!6]sHE1lj^t0\?)j
%o6TeO%/?I$J]Y1ujXSm_a2*<KBUVlt9;)($6'9Om"c@e$":[*R:W<oJ>sPF<_V7g"r/)CS<He3[<h+^"c62&fSJ]S.T]I4<:+X%p
%T^#Q0!A7Gh&ZiNPcsEm-&qSkLj+2Q/V-Q#;\T([t$Q/"G/hR_g\3B/Kk/3!)/]M!mAd(Nn_D?22_W'(KFmf+KMqka[719#0VZi;B
%>t);+Q;rk,@@!b5"&q/.<b0FT.&I1[o:^Q*Go^gDrj(C&Km3T/Jq'Of%m*-#nfL9GfSm7)at&$b=[sY*_t;Z@rf4!;#(0]Q6i/)i
%fS"5<:M/^LZ&WQZe6h$JT3kD.(!7?C6fZ;Qo!4q/6DKOc@d5[1XZ"L@s,5=rI(S&`GG@Mi3b_)]-hl:8&G^?RFVGWVE^'RV5lq[k
%+,8kaG>ubR!Zt=#KgtOdCUS!2L<l@(TU+DOVG0tcG-/TdVd"Qs[[O5\?!NT9RVgRn]?M6U;-fK`9LZQj]+PQtqE4Fm6C+]eTZBOM
%.s]B_,AMG,j];*_aDsJ5V:rX+Wb(HDMJdHd*Inp=c4D[sZ]mICR1"$QZE[2SiGgKc9f9B(T%TjJAbBsiBEQnQheokp*!*?=96`GK
%AtQ)s.*L%KQ;oNGcVj=8V:2SdabXR)'t(#SA+2SPVj0YIY#VX4e"og/mJj"45,pOGYE`OcL18$B(oFI_&#uIqkdE6H>M%7_Kt\uV
%n&UBf)rqKK>Q+BoFXhM\,d*T@Wu$9V]HEdE%he8^>,Ti-9"X1#M<C:jmQ'OG7+,pFMPMF2:fYcg1c2D(L9@909edp<,W!078Z&>X
%a\@n76aA%,aERBLC:ON*%U4TI+7;%u3R68D)@02+TasO=01sG1\MaB)g%Vq`/DZ)Z<DrDE/U6)04uU/lrQhN-<Yt7@@(n_gqXhD5
%EpNGas#hM+J(8SKS0mPLe;L>!gmPY+Ndge@VJW@<]8Hje\K,*&$EuPbh[C0OAAbcnL,<0_<bpGF1teaXO=DDL[<[-3%K&J/Mm#-9
%'u[)*l\AF4*2idjYPa:6TX0DG8(SE>[(h/aIm&8/e>GPLq$d#@]mBFRW/9lmc<Ks0'=j3%@.0/!dt(A#\T9$;p.5`2:Q:d\d0GZ2
%&4JfE*.PG&O1O/'C*'uW<5Fh6R1.(n82R8riLn9gD%I@?O=kq;KCX[<^uTuN,]r:gs)>-i%rU7VXc,?F$h)2ua7>sSWqulXJS#a#
%GB)GI_0^"9MEFq9d`9D:??upM0!CVuA#pWMQCqhmP(^CC1\lu0%=S&.og8&YmThc&Or+tSgT@^iMk*2>`*tgDjjW[fcem]D[3G7\
%3,SPE]1umn52?0dIakH/<W>kM:mALPW!,'uI^@Ha#BoJ:.tRSQO8'/0/bh324Uu?8HfoDj&)N-IRH(toJ#f#2C1YbXZ$V6n\,>&D
%>e&\T*<%Fs46n-cqa"hA0QR2@gm_(8lc`.)UY-Kt.h_F'S!C<njKC;%T(&i);_c(_>,)EF*doLqj9:q(O1MO:BF5/Ib^PsFn`Q)k
%FB@S;_dZPA_ZM+j@7HBESi@jO:DDB/'djBVG<,^Fa&rH!X*Hl4jR5],FKJJ2OW8Wpi*gUrr>U!f5Pd(a^YPOJL!#tHJ#34[B7Q.h
%lF"e-+lcbcC*#@oe#7G1=pY)dXA_ErMi@%q>.$HU8!MFh@l^GrA1L*'2Y'ggdXg:S18N=X)0s^oD1,$r',s4BNp!@o"efBe3puFC
%CF>kf8g0bi0/PQW"!NWqC`!u5%auRd!+24QI[ipa1:<5DEG+W&m`_4O1QN6%3?`UD!G>&k9<kH"A>3Cgm'H(KNMp.:D+D*->>XNm
%,^8QO<(/3a-Zgm4ml4NpWJ*7.;Q"]pX!`6pPD-e'j`^Bs=`.;6(&YT\%ddCm=6$N`<k2DY2K`?oS7OF`dqX'4q9&@Ka/?kH;/Oia
%3NqE#=j;7SR5no\jRg%.dU'K5NS<1,!DOH3V8ab='Bk]#^WN,G,b(LnW]kC;-+S[j!#kgB#E-HcXE<$,<mI/I0'$mC=tHk[BSn[W
%@\qS7%1XW[OCTA7X4Z6jR?%urO:uMe=^OUgds+IkE0U'j::&dji+0W>e0#^a302G(_)HhL,u#<1l#g2a@j@F=K\ho`*3F6#Ip3J=
%=fVVb(10ONW2Y4Z$u5g"8dEbYh,7(OFj!:_HEI'+)'u>k*tPj(NK[]E,V&1>>OfS.&b)IHb2Ao]E"=6TnSoOopT346.bFEh<j1@O
%c+$U(-%&<9hCn`&q9j^kIpVQ[+CIT7Hctl>a8%hKcF_o6Pj:kJ;Rsad#H4b5dlA'mQ&]?`e`'N`r"ZVDBOp9#^*)aBd].P@kaAal
%p?HcaiU<L!c3$0Ld0?7P^"/!3*>2?&acHu8%7WIbPrHB3Y&nA>qA%P+`KIIb@a/`kW[kh.geUk#eL?^>=<#t`9"idW&4Df`?bkY7
%(d]STHh%Bf"`WO!@DrVh$hM`&8:]YT5_29(6,C=lKQ@RDN6EE0G9(`OY0@@Tosm7Tec<c&m-^3`Z7@BLKMhm2]YhaqT3;e?:pu!e
%fKs()9=CrZ!@$@aY@Z4FphE#cKXsZ<RRaDD309)1qNB)lqGXP<i(;k90-_O/#395mKq5PRlNfcACiO^og&SGG:=LP%YncRLVhpt,
%S`MlN%^3qF'&BiHRR^SAj(9_^lg7TFR36dSefZrfcD[NEs7oYoXnBsCP5fYZ-1m9F+"$3=H3QP]07!2M,,dR75tPZ!1"0X"\X11W
%'J#uiTCGaCEhgd%A!U,kp_tf=S+90HS!G8bV6<ifc9iEi2J.4W`2D!57DrlZU9d4.(S2\:II-d'`<o;c7F8NoC9LNVnds$\9NCB)
%jcn6F=4R(nRquEY2IU=jW]`%Kb!<;k8&m=+C?ar+a_q8-(6<pgQ>GW<nRA(^[NgEGV)j_t8L,+7WCE&'FLV*^Wjc'US(6I\Dc^#0
%m??)Z*G:dhM,9_7NU/]cCE&]3f<F\,>ci>6pCM#3R4=3AcmaZB?'$(:R5YpA:X79e4)s3)OA&.mjGh;]BfB6`qL./_Y#alQe]H(c
%koI`Q;tCpnXO]fh.6kufM/sWekK[fe3[)OB%F8$g2S-iQ4"O<97_Vdgp61k;`m/99pgbWU.Cn,.$B%]k&ibi;mGHK0TBqo2#t;TP
%]n[TP<i%f+7q^H_O;ueW0p\7W3!-"/pVV+F)O7#7J`J:>)U3`;7:3Kc"M&P*;NZ[BX8AropX'Rl+V;PkV(W5Rmrrri/=(`6"%EG/
%[+`db>)ZTVIOcP(7($,$:.<Ii<XXLe7!MOs&bf;]l..jb+`^@0R,uqXfi^LI0o"b+<H3KQNT.Wb<CbV4QR0a&%qKI`EtDc2#TUkd
%T=1a/ceOLoPA[?eGUq%p(-%VVR&g(>r7"J'RU7u+mmN2qR+Zkt_K7[#e4pqD*#h>LfR:]>ZpX.)3CU_(R^(X.WccY2_h\]_V4$$t
%7[mWe%eLMq3MKes=EcK8/D)&,TYoadYh;LVYWSojORj:pB"VW:QpPi"&N(cQ,gt9uoWhe@'p(CW`aLV(@C8r7m2X#@MXk;0;o3hj
%aU:bl`?93X3$)Ut#PFH#cl-KoMu]7&=k#BGTV7@ff+p\U8'2``904W442[pP&R>C/6ul-IG=!qiA8\:Kgela'eA<&is1I,NlXY<J
%+Eu9*!h%$!(W`35H*6(j)JH;fq998O&.ZTg.N,\Ka3DV#N$kp`3>.M##S7"k/*^_7W5OdiO[%QJP_nUhH!*oM&MY!1-k5M9Rum1s
%;B+RC.4C2L\Y:=6QC-OckmV9ra=,OF=ulUGP^"N8S))OAjme/O0FlD^)Ic+@R%B\HGAI4Jp"cQp**':<Y-;bikXH?Tl-B7R9,m=A
%5?KRg=FQt#hcXqXgX"/@f1m6n?A,eR(ERh/nnR?jnb.69gf`BZqs;ETmHN?uQNs]PgV&I^#0JI^SucXM,cTi(n5#@H]:8-D<Zc3s
%/@R[0SX7JDBP)=6qc93LHI6k2T"it8gsDdDYP.`_`Euo!E73@hG4d(:B_p]$2=o;'Y5dO_X*n/SG0ZT3*G90&Hb/jf\C1h6mI#>q
%8,^8NBZ<9&?6&(XG1X*^c$+(iIrPt2eTZXM(%\PUh:sst^M^2s<mR-1ja4[[iE>gjRN_8;IQuWPq8Zk"Rr3Y\raG3H4mdQnjsN/H
%,N%te'm]]>k/PjTmqG5;l&PN*jBE9]h>c_X<OZkV/(TcncMktW#49?aEjZ.sfKU.;.R?LQZf%BhL[,o)4n\f;qg/)8d\ccsD<OF%
%LJQd?\9#5fWKb`u;f*sChEIc1bL3/kfrj00^/k.)U?^=u4ajQ_?M`)k[eK7j_uVE,Y.lqrTc%A=h:GB!;0d,po_?u5,P1iVj-j[G
%l5Zj"]<W_9SZU"RPnj<fk8hd:q&hHMX&=)Bjuk33,0R/20<?]pDVa)2VdoM3I;dThg:6`<=LNA-o\j_:2XW[^^#lf#NH`q!CWb%q
%YGC#&NI*@T-cX%c\1F83pVr[,:=U$PCsc?n!;`k0/]hAg]^d/02suI1Q9M^])$:t.,INUad#<'gHV5SjQC`aKm*iuOi$HY:/I10I
%D9>@[$R#4s[.NENYcRUq:EHj"hETk!YPreFNN?aIA#O=deTis4bC'tHiG6jFH/\97k))!9:VZ#fLLe!pW:NtE4rHR7c@Q"*aZk7H
%nn1cO5Ig"t7rR;;]D"M%F`olkf0A,qrS7>HFmT=#EOCi4LNGjI):_O!TtL$CeNPrSU&X0OTi_,"4Bas5^NU<:`t)aK_^F>9F0F:k
%)RT3fT"fAj[NE3lrPe%p3]h_l.1.1'FBbeaQCbf@s.i#.@T_a:on2[LkMSe<f0?dhj9d]Z(ZRm[(9_Hp0PJME%2$FSlFdkmqo2QA
%$GUDW":d?(DhL<iaM[*c[qU?8Y#fpi`Ppqs6,DaKBr=J`#tH48eVig-cJ]/!^s0ksC]/UiE;Xb,OZ!\5.>rDbD:"lMB>j$$fho7u
%^U<9r)LH,5de7FC^an?Za!Mrfq`tqtFVD"Fr&tPWcD#N')Ka3rb1f)"r1q!OY/B]!qR]_g\"<gSb=?a4ZIig;9+RJ2%UN/%JCluh
%I<YSK=^HSL<[$A,O6//>:S:8$1[S1,piL_t`SLB:kj+k*V'jU'j-Gg<BJ?U3E>\J^ko)'6mg/;`Q(Pfq-E[-*^:,/p5J#Bd\))A]
%F:M&1gk@dq0#\R4K&u-1-+q!%IWkFF:EMj,YP2=4C&=-Wc:.d._/f_TgH;;X0mNHO3N))f_TT+fC:JQ[p]JtAn,AGmqVHLEYL6#*
%]C5),I'-[<l73g,\g;_)Rn5@l?Uu.(fg;_TDEO+!"B,86mpT@h(>pbGl'A0@?EiqokPKr(A=au106GGPk[:dTQbiO4[(b'N#5VW9
%UUtQMrn6!)rk`/@D<LfY`cH&5Z@%-,oO.R1.t?h)3r?Sm/U9rD,>EePkF:k]g3pPC,,.9t\FF[]CRF8-nf?s`p[b9SEoB-2IoTQr
%.9@Pdl,C]`2LPAj"R_O6`I%0491iSJ@b*:bq/YH4j!B2jVaYs!(1P7.$a_*]>:YAS:\Wer&"dHBR9Qb\\:^/AXGA]SmUths\f[8`
%EE;a8GA*VQGGH#<"DNUNPZ3Lq>'0N'4]WL>(MO)3B4i[]FLK`e%5p:E+!&VhVaBnih45"rp%Bj4qs9-F8_RPH[`Kn;j,G`!F@nb\
%Gg1%"js6.Kc(nDkIso@CN6Fm>bp^&mnbId>ZM^>en>T%)#gJ]`V*ID`#Fk/M`1YKl=V`asqMA:qSu04GCll%B!$4L8j3t,IEEig_
%oZn>!5aofa003>n)14o,;.JbDGpNG7N1/""125Em6Qt#g>Xu@e!k-MXIt!Pq($hWsIX"3L-<[YHdaIBt.VX@!N'*>5R#/cn%n'5?
%D>djXK,M\"mZBb%B)MfPS,d9nl6h965+[!8!_0IHCqt/@#YnmqMoH8,7#$?sTjrN?,qTcoF:R0@CkS8gU'&aENYR\+fM2OYkK.oB
%rRJrrnCGKWA8>(bZt=:a@-'#^1]H(iq`A^l]\9j4c(K+No028QJrHCIG6b01U+EVBSu=`LXedlrdT-<XAaq47$$Wio^EcK+V2n2l
%2W$Z"YeANBhC&?bbFbps,kj!5p)<qUk5Mj`&IQ#?c#Yo$bS!c)em;#B_i9rM@5IfQdI"p!TW#S?"dS2%8$9+uX9bi&llM_mdDOmf
%,'"7rl:'#ok(ZH??`Y86]+ZIucsKWN[d.AnR#5a/'n"B$fLkb_X1^.rFpnO&OQH.2J"jRics2A,onU[_!R6=VK/'%%i8CPCS^NV7
%SL#25<F9T-BC#'\hAHur5.kikKUYY8;Ur0R4G^_r26Q+Lr0OSV!*WJeEo1\^Id"MVpU*X^Aa./ig!#j6;,ndds29/ml>QVTbK7u%
%idm<6QG@2s2rE/p&"K3"0*1D?9du#J4W1&:cmaBP(_:+=GimS:PKuWUJ7]GeTYIPTNrSJ4?3GNHAcp:"(&5/kIFbuXAD9cCg?Wjo
%gB2PbN<bEp4EL5^RnHTUjJQ89Hb,tg^:e)6FnXa%"S6c5NA(hjT?ckLVdF>D6&uNe3=("<K`SA$'l_K*/V0Y%H`Y2BZA*\C2tp!k
%Hn0IR_n<?W4g.Mg<%h.<[,H`Y_3`]^(,Pm^p#2GqB_2j!Q$`587H&%Xm\A*o=kS8_^=h>t<>Ifj^Lgd=ID"aUH+j4f<HA)sr=>/f
%F7[+VT(S+eV<uiKrE3b\C1j!tka?/`ZC?S\@`Ss:g[3J!g=iV%:Itr[daRmXVuV.lZ0cB7Q1)*8kH<BW-$f<'k>l=<5(@Y?op73!
%K*1N(C<`I+>-PZm^A[&:pi(4U"4Hi`'VOQ&"5).1(`k<d3lSA(Ri=lT)Op3Q/DXYp?.uI_2me&GE#321T;glHMZ9FLn2l90I^lp'
%4J>nf9MX,=%#l">\PH<OZ.Y)QA2UVj%S($&-]#d8/N/['>,PsDo>A^`&1W:(?DbjHec;E#2n+=*F#6qZBAUfmag*6t[pC9o=T#\`
%F^BN]X)op8^O0>[X6913#Jl,KT[#ceI.-kOb+)M$\"9[!K)rBg]mm,e7GmQ(CoX)q5'#tiHSSR3h]T311dg#FrRUf`*.GNo)7k<<
%C\+J$D'<M"V_RfE%6!Y2K?:@,O9_<Z7uojadZP'5hk,a_cWKu9#msMkqcBou1d@m@bmcOdJo<_@LENk',OIKt$n=ou(Iq]6hZ,*Q
%Dc-=\[BJH?gj&\h^;"esqs<V:5--e`*q#UZHO!1eim#/L?VU8gY-pb"L,,.:O8Q-+gCI-_fcsXM<c@?fFl,6iIs4+>]Q=+JIgf9<
%eucR-relKL"X<L_<.Kc@-hkmd1@3c]a*78RF'@+EXmU=`V2*'qaR=)]>)2OTc$+BDh72]d=QYfO7X$p^V9ma'<``2F*o)pe5!Re0
%Fi5htfQCR"3'LZL4a?Q*AA)P%oKPNhQoDNS5(*a+=o[4Rr+0!5G7VsMQ1^\AQM'IriYf#5Xh?o$Y6E+o:GS#'?$>r7nE[FPm_]9s
%mmg&fqI&P_#C+Fm;_$Wd2*O.o?@2.4AcRM[52*J0K1Pr^%p"#JV][n'Wh`X^iV.SY$h9kMXMZM1l:]$>*<(?"iRbR36pP>lq<cHZ
%s*4Qje#V<=Wrm`b4&4hX<\k8JaP%d'm5-=Fqpk3]g"BL9?>cpX/Q"'3IG7lVCp2JSUsPTkq6g(Q5IS<k$9go7qjAn@J$^:;J1U3W
%UXM?]H&.ZM#+8SN,%&)1h1ol2h%E!7a^[]_K+e(*#n@s(hBVUPTn!!;K1q_3%G'G"G='XOH4kOn-[X2.5*iYtqpCgqT>c*NA+SNm
%<]St)]0^^l0&O4Q\b83JfsFrM6Xn3^BdQXl+-Q9u=P>ni3`[a1V/+b/<e#8+oYc.N*;Rk*:[9+_eP^s5"s#Pj^B#2IEI[T9nNfsL
%r/'s<kHF;R=#SZ:s#:Z;GPHAig^Y8EF5=cZqpSEh(#b_d5>3ZFKDM@lkhC;Fh2s&0aRbsos86*!j"DL._8bKjHZ&p/5Q5cNGFn$s
%5kF+rYd:Z37"AI-(P(^`pHXHpGiTqgZp>duNm@l.h!0:crp3s9lfDaUcF9s+gha1V^o\&noOJQ)6Q\Y`po0^T&_Cqt@PH2W91?&R
%mY;lA8^YjZrF\po73Hg,#.<5ehL4\-ora&X>LiJHJ:9e!n\L8E^7cau>=s"UfM//*>ZeB*pA0+IQCe%oG%=YXD>`YOk/NV9*>'a2
%F9J59O+`@S3m4.S-Z?E.d8sYg6'<DS1dc;GY'pbDK3TaG45=]V'tjWBYH0A=bgus;gj^'U3df_*Ra1H?J7`3_?Wr*I=9,$e3a$g;
%U]PHt\::Ojb,1i(Xj%skM!an6(XVuNiCM,?n-sp!G:BJ<D!V)_o@?^/H+Ac`SjB(7fuM>uEBeK+A*NNA:G7A-!]K]$Xdbf(M5J*/
%U'>ojb_J>,*IDQP`uFDjXJ2iVeal5OXk-e71O?b8B`]eL$BCpA#GQUlW\ioAVd>D1Vf;s44d*/'h!Y$^4$TcNJ3*#8h+mJZd`hZ_
%Eng?rRa/$Y(g).2ZP(@*kBkrOSR+NE^OI?4q]A9O,3;?!YCM',X(9&OR3@1%qYOZ7kJ7eTiO>(\q4>5#I!g2URLWEjRYGG6f&(C`
%eAF^P5gS#i58XD5Q[a=b"8b/g0M>2&TBq5-,3d$C4^NB>p^oBNf8jZjei&nsbB&Amog]2t9V]=9IQ.WRlWL-DNqATUiPir$:O[ZI
%=c_/%T>RW%(<*/Cr&c@d-)&[].oDaWp)NCsFWtc16@M/4.6e%\YUQ[rpS)hs&2t^-O+\.NO-r6C=uh&Sp-&cBqdI![!l2P-4/e/D
%@tSI7A0t,GGQfen?3)3\j-?sc]Er@po!"6kL;7J!l.nOFXHh>j-n6,Q+9VVmLg9>K=uG0MrVFepT6ehse'HS!W.Nj^gj#TCo3]5e
%\/kI;Zc,a9$d89sc1S8Y5pA2D/4n"TcO(6^:M7ItO'Bn9?%8IjalO&&S]),KrKf0:JGqWJ/!%:4+Fr9Dk.tK0JS)Om45OKI6oT"%
%/GHm.N$gh3#,!;+r#'C*'aBmWXbt47-Vo\uFdUIZH[k;MVKpoD_$JDOYF`:3D/Q#FhR`T$-*`9/<NDC;25U4if<)6t#L>S]qTsc#
%l+2`MO(N\9mALhMs4TQR#`]-XH!4o5+)#1>`!)LKaa8+uNZYC9LXgmdi&$Hh3\d0u<V]?L-X9N)gITll%cl>^4da-JpOL2qkp9+C
%UqLs^hO4\ko\!lH5IP"ikO2>]:7US;mt#,ZUlH[:]P\%1<&.hKK8g!5@I6p'A,5.Xf<LXNYeKul*"Ba<=ABbkqg<s^kSJc.j]7nB
%Qd=(JHL_Y\6:pk7c#)ARdHC2nqrSDgE?>?KmY-5JX9IKFSA#0\Zgogus**MjcK?:.fPH=M#$)ctG1W3L`E:XG=,VtoZa'18M(%^n
%1\McL"^Zln!35L:$<B>o-a*/L>nK>pp20WD3Uf*@NLqlI:EP2n]`?d<L7E-8Y3"VP`1*O0ZcE'sg;c8V\A]0pocJG*q4Kdu2r<e2
%FiE7<Hg`b"J>BjRE[P+:kutST]:YCY_A&dskXJ5jC8dom_9kQA-Y,!_oHt>"Sl^cFRi>9ifu3eT1hfsiVX60T62CD=AZ,(jeo(82
%iN%Q$n\outlW?b?a=BLQ[_B0@I*YplnFd,W'89,'"Ft!(j+W-j@[-m.TnP.oS_mP]o<hEEP&;?o"g=5.^qQXV^nlZY:jMUOWd9$,
%Fk;']I(jBg]LP[7qXtnGqQ&MDK@<F/H\nXZo?]W(pJ.#t=r>Q;.J`m,B42H[G2)G6,7aF]aDSLkj/h,%Y#^uS@G`^Iq:fYSQ14]I
%0m_2'di0gVh?rEmYTN>eog?/^&L3^51gbDNVcZCaU^A0@\6o4M^$=.[[8oG21>>buNHsKhE,^$cZ8Qd^r4q5#?SreIb%\J5*r4'1
%)YE[1QaK;*B[A4^ls[\O;Jt-YaE6sHk9CE$q6P8?\!KMNZG#\D_N&o`*O68$KL*LZr6oJS\YC@1$Z3a&:f+tTGNm,<X[WJ[&ph1E
%XOlG@H21+TMpe$1'+Gjc<fO>lMNYH2@))h\iP#rfW#9MK)fM/TL2Ouj`V=ut:8Qc/.X/AF^S>uGS:]^].'0EKMShrAcnK"'_`CI<
%l&m0':C)A%ZE3gO5@hCH<Y^q0G$GutgO02qUk!2^GrB+?'(5ol@uQg*9IS>iP><RG,#S<'66Aa5MOa@&]+o@F"#@lKP3lfKKf4&0
%E9Q=LFhn_P`n4,0qidO%6CD:K-GrE,^rZ!f)Q:Y+\*.fg[:n2>NOXC=K(m[?]3=jQL^cec`'M"Yri4a;HQQN-1P]h`iN4B'h%U^E
%??Cc^)SRkqG6W`3DN4))'./(bi"Te1<,P4&mV,X0q]SV:+ulQmdQaX,UXUam_J78R'$g@u.EBC5,T3G!#9P:E%R8rd[Igmp.YdsD
%=tWhFmq/cQ!pD9<-:N"s8N1=Z-hs_p[0A3a&sdpU":`Bd1gn<qh'Q0%M+TXGMFP-U0@OsVn[PQ=Ws+05@VhrD3Q2JH212\s0r^,?
%bh@[Ql9VVCa%;&$SPlY2L;,(?3Z,I(>Z]XeenFk(]/!l8F8"&i^C+K\-alcskZ4o%*4hPdUI3Ckm*8%-4@l#(=B(k'l2Qj5g@(=H
%<KMGc,M,HVQigGM5o:[tL_7Z7j_aT*k7s:8FV<7R@5EDg6Wr#img(@lZdISr5Uj@!gSo%D"0:V'D$9*&BO3s%BZ+q*"L-SI\jFSo
%'2r_TP1=]=/XF<:4?a:T_!$;V&SO?FFZ`*IP8spaXq^s>KXGhZ3]QMt+#V3KHBE3o's5GF*fZW6Hi\">cl=ltm?rus*b:*,ceQ.?
%kdDehJaWgALO:hT9^hVd?gO[glG[_XNK(O2-fNq/7SkN?Tu-T^pDfNehm[glWR<54[>uTO5*9W/CTVl=))5Sg`.*(Yc5p'_89LB9
%?0Caihtc,=<sR+Po,Ieg.h1-8h^."T_n#&VpLt`JgS`%MhmMD;[qOcPhtXOU7Nh=Ne4/W3S^uRL\Z?V@ApNX&rq-5`9*qbMahN,s
%l0mhO+$KI'q;f<e:OdY;DdE<#k@t#'l#4l/k>/j<]]e7GcOLonr:U*.9DnK*gi`s/E9:tO)cP/,"\i<`@9`G72k'?)eo=\YGF/"r
%]C*L1ABE\P>f_EnUn0e8l&YQ\n[JPmci22Xs6SY@]AN4>s1rW`qI92f2Wn[jS=XLHI)4UY)JkbhdoNrJ]ZY)ZBt\n^m<.!gnT5%P
%DuBs^CFstK5dGDnK(V0'44CM$CE'[pHs-8fNAY(WikG7Ma*H=(<F0lPj]pC7o;fUnPr^5a%-*KBf2V%dNU:kY5CQbq[?Xp@<G=rT
%I9H0S9%!gbDN0gEo$VsJFmP-\?a"17Dh97$g*t-([3NesB1TIK*9X/C@m67<$]f7c3mM:R]3=jF;ALRlo4uA3C0dIAp?PoFF7K+/
%V6_M0Us:glM4O*S,Umkq9j-"*Y1N82q$c5-NI'FmP$H>ZI[M4O2(;+6/P>jV9fM&@>NQ@UN57N;ZGq1L4J1LmSiC&#gA%Z=?2Mi#
%Do?%Lo,;,Rk1M4;.jLZ>)A>9KF@A:;)s@45GMLbnQ8!.a`-L2WnFHkE]N.3h*0Q_5VrZWP5B,YkG37u#*JWP>(&[g/WGjsup.`6@
%%%^l\'TOsf]5YJb*Le_8dodf\qV'5Mj$Q;:,F6PV:PGE'$^]q"nQIXQouth%Wa2h,9E<[!g,eK<FV[mC]^1"JSqr)_p%tee5tPd3
%n?(!5aL^p>rct1^4?)C\YQZ1dA`>Ml1.-[D8/=/139t5%VVfFQ6]t(\nJ_"8QBs9'I+6BMlo[FP"OB@+2IB'KYBu5I+"pQ>V54%C
%C<718ELp:\=n@&N>0E>bHj'+)B/bj!WMSjnI^E/$*7o1"pfrO\,nnJh]P0G8[\S?NJ^$3[hn'qsc^4#V\17+?`C`>;mS')!_]BN9
%L#G(E;3RT<cR;(:@_l^$RNtgpER]e_jA2C>8PAfC1QX[s2YL;'OIWMo`1DrG.c(/H?8Emt9\p'R4=c,ljiPi:I7Vd!*gk5kp*N4/
%`Y]U3b[K6'^c'M:rCOn,0Y6%_BlHm]gDlZ(`o[F<Z,Rhi2J;.J\'A>2DaPnV1c[X/@+ep]B-*<$*BLnua*enFL_oC(!ITYY?o@9K
%7pCs+OTq'g(7,2$k0PunQ[XFcY"h,b-SI!RD='qAQ#Ld&m>kG5g1hQ%ZeSS#Kqb>L$CBhA!F7Mt2qcS)WHYE<D7tG-97^tBDoJ:>
%3sa/?mS`gKHPGl-1I$lBA7ND>Sj$M,WdT>Ts7n\)>+9k%3I-,E(Vfop/;jJupYQZunN$U;rp%Q&e2_&43C@$f[Og!Xa&,tH%LF\<
%,Fd^eB$&d48]PF&C($32Hu[D.oW*7=SWu/gO@M:m3L1ee$]=[LcG$BEj=qr?B2[NO&p,%GBC&5S]BO^$IL.A*,\c<"_?6J^GiMZa
%WT``1!J(KIrI"7tOW4P4O8:N?6"*@h*NcbZ,EIrlp"mdF[V$d?h>umrnY=G.-(NTII)Oh>7/VM#?EL'hM8qg5PjG13?LUu'^OZ8\
%qlo?Fa31,>6!q@U3>1AbU*O@VE);TU,NVpk<&A3^i?Y6HT=F73ff=jL-)KS$$asnXH<%%ehH2I@PJYhq+Tfd5p5A2KHa&`EJ<]/Z
%Wb9"Z_7oE,<YrcQ*/eH>'B._>R+ERVV#\VRei?7A9`\\?(+TRcV<Yj47r99gR5#]Z8&3Biqp$A7L@4XLip;G`40NVQ!U`#V[r@SD
%eei<fT/!!>nbVj)5:%>mr^^X`J4:5;\]A[)CMEKTP&eK"+#PC!Fu3akOI!=tUolPfhDU>QlFjk\QY"EDW(4.6j)QPp8<BhnGS\nV
%Xj%q<ZUigmF'I5?`gfD:(.$tRd3bUa3_FE==Z7Ym0WWso[M9cIkkBmcZK"("o,_g+CI>34`I?\%CccH-W5bPJ`I[TVQ`'_@p>-Y#
%,<S?F\X(QjWg'=4$RKZLSEf:^Hb15:/uf=^3Z=>A/XTe<(o`C\3"hh5hA+'Nm1e]O2D<gqi^R$ID/c,SL(/)I%AlM:7-0EKY^iUd
%503sd`/u&*99PR(hA!!cX7]bm-Gu/6P7p)nH$5PT]5X5ZDaIqkRQ(3X[LR0$cb*`LZ'd?WLa0\hn;>pU#G&;fDkjd-7FlMAoCckG
%=U@"-#9E_X4YZ5i*@&P[7m$0tfm]9lS[4HqerGK<Ud3<nEgG'TE](raLZIedWMq*^\a.8W]jB(i'l+9lBP^5bC2B+Sk@;R#?OJon
%bu_?4rCOj\@CrtCoZ#N]#nrcf84pirK6Dgp#g#q>jXMFb#Y0+ZMo*Z9KHW@*O]k?jHE_7SrOu,V+bYj@%_`HiHV!:^*^%&:2s0/D
%>qIm])3tX5IDMe8@.km<JUqtia5.\R?`IBrFr">\2BHSs1+XOR$FDSG@$T*akFME+CJcri>IY+pKp5us%kes(4q5$:0_B].SK_j8
%5tS(F)eO".,H]/fM]4T>%qil.C"!^?rc\!8kJ;1$kQ5Ci_906(NjAmifGE-1/XrB=/+iLscj8RG;W7:+XGkkB@.qHsF['J!/SKZ\
%cGecVBjr4"e>%<S]H]IFVcKapP^1eVh3,R.`uCOIA5eT1lM!_;el?f90Z8%ta7J<7S2'F`IQB[^ki.kMfuQUnA8JurZ&\[d%bf9J
%8$ZbinE?q_'mDi\DD#fTqX/>?H!6WO#<S)0lb1]0#jd5.GdK!(VZb$Mm>T$OR]p(A(a$9s$)qJlN0*:ra-*<:aDG6l=SI/=FrJ1e
%B_r7%,0;i"Rr0cUPI'#4pOQSl'h/SVRmPmXCC'ggRkC9X'lN8P=0[f3@AX877E\\6cS!pU)Z'5lOrX5-4IJ9Ui]5KHGB#]e5R9k8
%lBkfekHrLFAmVN,Y1\qW]0k&;'4UIoGud29d2j/YFmLl5ikjF"oH1s\mr^PH`Z]otT.hF.c17O)j1!!eFZ0U3J1sN7nnb[f;]Y]F
%bGJhg)HN(?gC:bG6(Qri#OEc)4#l2\*1*RDDta(Do,S38<26jumA&_5m.B>r2\-A+(j5[B[I$)PqRKDlqmBUeA=^#=nhr2!"p;Hn
%:UDmr%)LIV&pbV^'pc9P:B!^K?ca6(qdJ_XcPkJ!0l!EeD#U+Q=]dkP*&Bs;:R9`B)=16,p&r<d?\1^fD#CX"@Bprr>Y-#>MljY`
%SnX]TJY_EP*Curtf46G-#'889)o%^6(2&G2)Y8gXP0_3GgO2%fJ$&F[?O=kD?hj0^kJ)<<li6j'RI,b,ns@\,o.L2glS3XF%<7+/
%PKb?O*E!:t2AhZF!M!BQO^M7=&aFCsh[8k0!!]Zj=DP=b3HJg3Po\O.VRRn/kWe^+Zd`fMct>Hgi60lc\)Jf?71U:5QojL*O$1`h
%!Kr'sO%#9@?fWcOZaY0(N+No`0]aer=Gd_,+i(.0`;ri]46o$8TAkRNL\Hd698!E`<Q.GfiZW>`FSla0Gb2L&V\sD)3drItl"H]H
%_h>0*6lQm\7'4<t^kcsAig#Qn?9/=p853*o1LjTfEHKe'M)8B-CVt(\!<4AF@)broW/\1_N,a:`U<F35&q6Kl9t>RnG_@'?r+M@]
%,s#A17*!h!'!3AN")6r'%k/5I7+GXkCm7e=Dh\Wg;*E)VmM.nh.1OsVVWB6$-.+`t2atdAlOo18[%]7(nD#FgSI/6;_\60sVF3U,
%6j6rV>B;Ahdc3b)?C:$M,%t(88#'dq.-f/@]_AL-+JP)A_kQ\<?FJH"9d#7$$/crnpYI[c_KII8?<FiHN)i<1a0K55h+8V?g"+o#
%gYURp>2-%Bbpf)e<X#>%2G8%G;M:r`Ml*95.4TUI<)S^&V,adOc8b.#g^Os3"(=&D=S(0lWH>mqo.^7pPVjb8>>jBs;P_W'U,/ks
%DES1uQ#o946)8RlY'VgcU5F/mLpjk_4Z8NXe0\k6#*+A60LU2-C8jDjMH^ah8C0.L%4_&fN-sm!4XW\!N$992hgkIPfGef/@4"5R
%]((TRn!ug1='nU]43te(AIVsdiFQ.b3s,O8QlfH/Khjl/%=<j((7RFNC/hnZbuQ)nX'2l?mhL?s]PqWq;T)Z?/^M_Q/['9GLf:1]
%m]BP]ebG,WlJl$oKip^O(7,]=0^0:4ee]5n^tKs;67H,6m88h_!'%CgC^_B<0Y>KQ`m+p-7i9rqBsSi%'#Xf,!)dW48SR`9;5'fg
%;8IFNW);M>e;[b:l0gUKJJX#NUj*)#FCDtGbE_4u%7(-Mr-JF%i0,a;.bo5<`6D$h9b`KYQJmFGiUdZO\:S6ji%bJ]7u$967ViAl
%&__DinfXZK9S>VA[HeH%:I;kgJKc]sh$HBe[:d+A9<#[d^i'Qm%UL8GEu8^t?0goLM[iO=XBf!A$3a;Wd<%dD.Gn=%UaW$g"Hf33
%L_`<$'G66SNR8i9KWE(T519$.bY.P)g`.Vj6r(XfLNE<n(:VF(/$qZZeqJ8B_UA8"9n4'L27FY$%[dYX?8/u&Gpp:EKEXW,'+\;(
%kPN8VAk38AlT<M>hhqid(^d+U!<PMR;5@,'G`V!b8I8;%gLHo9hC3S=dF=DOV$t#!+2Q#J7!l,I[HgA"M`(Y`K*QDfAt`mPTe+kG
%0i#^>&a5p!'`Zg["-4VVi<%r55/rFK&RcQ[hKt7_E%+Ejomm3EAf;7gKFOBG#gI@SF=l/tq[:S=5#3>fku\:g:mI:9SE%1raVWBI
%idsle?b>u;/7ZP.OO?2OElX#1d2H4Rk6^HW[Rog,l=tpJIV`A1h&t^f!7@1eU@&,=gTbrqmpkIZ6U]*:,(V`XOE.cSG4pEK_/c@$
%85on\PL5:^,,u)$Y[4\!Y("b+Suk]*3F]bt,!ue`JQi]Q&UO690Lf!e[b&tN;QL8#M?=Qe/PD]!H+M]dAKL0QM7%a3"D(pGp`(2R
%VHL)`BRH`%Cgb@I2qHLF;,eB8=Fk!Le?XXKYS;22GOG^,#P%mVJ.&#?+C4cmR_HdsNcfboUupo`l<%:2W"jZ\U[sd7qBKRYQ;[!m
%Lo>ADlBP"W=lK%/<Eqd0+_hAKU)!liJm&^&GQHrI6u<BkE:Wm$@BpSb+;\h:$)=F3`rpeoSe"7h,IeQ6%'>aM`<24;:/=YkcjLET
%PWGNf2<J+5Wa/M;)+`<e$'#+D'[MEqS.-CrSOIUmP^X*1[:u+U7VO/n0W1j.Dn;:4TVR*-,bf)HF/!^sn_U;!449tm<Bqo$f#*?h
%cPWA4N^l2dSi1)k^Ba\dcKcD/OH=:,KtWWob1@l7</2lt'8ga]O0^EI=IgX=]+@u[?q6Zbnj*Dp><u`M$R."OZCrh\DlkO-m=MPk
%V%6?62_?:W"-C_A^NOb=OUdf47nQ:=,+5kNB`PB1j6,R3*J<SUMQ^:gMBOJ*Do2G^;4[]hF6;=`O/Y]bOZro0<PoD[WfM#KPThSa
%heU[[;QMm7P"r\f$sE%GMEnOc*Gc]Se\=Y6KBm!e]sPee<;\'T@,"(:-(>XHijR<1&a<++V>0jDBAD`o4GmX<]?--sU2#Ym&S'3"
%&bG_04jt#fhGa'\[LG^i@u-pG+UY=Y(7mb7>+20l/\9hCF'M/Qi-U@u$P^(Q/'Y8QPsp9%_BXWplh^t[+(<W,7ZkoudH!hp<.*)'
%=qO`c6>7S?n1l*]UFBeDO_e/gd)Y0>Bm*D.LVGYl>-<[_GKs94Qj]W-?%J7<.nE54Ue!BMH#;=:p$TGpK/r@b7m9V9JgBRunB3iD
%B>!s-X`ST2X8T-I"cH6r^`5aaj<X<"dA)P&Kf24(jY'L)Kn(g)+hA$f<GL;=e7Wl+kKgU]3!A,k,+8_o&ZkriZ,T<[d\[kiK_WPc
%P/mJ_4r,g]>QKil<W4]GcEWR50cWfq@pFF8?V?U!EuUW=ChJXd.?DSlmS9n6p/KP5U9-R?_>VgYjH3)4NMe\,Q:KNu"KX^H\)8f<
%D[G]RMJ2Lt(<@E@Bi5)C^p&Wi:!oOJmH*9ce"/n9-S=dK)P@1KfBJhRr++H3M<uprO8PNLGA`?m6U^/4=eRAY&OJq.@6RTK$W:QK
%F[(':b*oW<"lNTp%;a([TO`HVCthDjq5AgJD>+2p>+/k-oUp(t3`c"8lk.fl,VqcV3%XuCbP-ie!QgpMpaG-"S4S#PcE*EbPqCHp
%6m0lLljd8d<5SLK\MuR;i%`VPkF'JR#BL(Z*D^@bhX^cKkhN??`=D3p,!gbkiA@3@dP*YT!Q4^O#$!u23&Daip2s#<52tK`U5^h5
%.J"C//Mgc;b5[Gl*XG2O>VnsW1UF0OF'G`DRH+(015I?I=I$Pn>Nn/&IqP_lJVf#@`k`"Y:C8G8$G!d1B];#TOB'J71+jH[&i$gg
%d0S-[Q*Ng5Ui^35Pj7pt7[R@5kBRE[+Ul?aMFgF>[dp0M.`nLBZGJ8_6Z05K2:=^%(b*7p[NmZXLti$$bk5KPDZ*d;qC`EUot9<6
%o"2$i+DeRFF=fbZ/PFFRZ@froQ/4j#H!!I*g%X3KJJ8@p6q^S7&QsVMnE[nl/]K6'p[JCJ%tUL/=;=&D,p<=$25-U3`*r>@Sr7/2
%N$:8*$Ud6Qq"kVilO9K]h?$W7.0&ru^m)f@$B\3b,NA1`hAeh_V:ZIb3\$6W!%eG<rB?$RC.#Q>FoEjW56.)aa/"MT%RdF'1;/Je
%Zm38##814jCK.E<8D5>f"jV"C;5t$\8-iu7')R)J8LV='99*-^I=I$>+6aJoHqcedJ/)8hS?L8=g6rTqd"aIrl&$_T1gWBD+L5`H
%U&]9QQ=r\.<`>Y(,&2Ra\4e''+__9+IM59r1:@SN/W#EWTl3LHj,h'c$p$/h,I<Fj@'.*25%6&JP'!Du\+1-P0N=Yf`P3NN7RWVa
%/+dCGS![9:>=H1K^,>]4FdHBt<Dt-&,8#CCiAHB?.,A/F[QV>@d9$[2,D((s+k=0YJN,5+)@/`s*%sf$$263>PN!C05!n=_JIb%7
%kD4q(87X&,UpeA4\)lsa^E?j!4@F&SQq/#\p@q`ZYUXpjh(M)BlMQ`K,*0"gJ_BI[K^c`!Eqkj>j\Qr*9n.b#-jUpP`Jbal*\1)B
%)2JEt"K'=g]7>:2@Z57IEP*sRJnpAk@?lc#6YK7,;B4s9GtXBhS>C?SOTFE50'<Z9;>>Hl/>Qd[h(!\8<6hOL,Gd."'WO[^_"*l3
%UT)P#8MoJj#`8.Zj;CWA5oR@kVq^`s\d/4?bN$[81@*h:0;Mj[+oP_Hf#rQlKll`/KaU/.O27gCV+@lTl!Q;RO<g.Q_]gi-%[MZT
%:+L[]CEVB4?7_C/`T&+1j:WZW%ks8&Ijnk#!_#h"RL45&_@]V)e36AZgJqg@i7/G/"]f,u_aUR&BLj#E"SF59dGtErEqK[^%,Q;I
%W5+O2]k9@P>L9l1(k@3X!Nd+ZaR/OE+RQnI-oT#n1<_"3/+*jW'2jVPNg(Ak7GMQj^Do`KW%^V6[N#k2WUq0$N>*QK&'>2&LQ<Uq
%mY&ZDX#2O9>[+mg%<P6j0=Y(MiW.LaOPQpr.)Z1l_0B`'p]o6ia#;WA&nqJPK_?9eoYM`i7GA*Y)%5nW@41-J@?3]"7bWQKGqY77
%]#9[SVV8VIN?r(-1g1BOR34*.4oi\eV[t.Xr[jR/8!O8W#LSd,#,uHoV'QSmA)t#<(eJK4qpYEI_5%k,UpI;YqgACRFj5R30\!lI
%(32n.HZWTH]dsq>_DXh]cmHMCHAo>;+:S?`'VZ4]_*NXjMungp^3Mr%Al3-(W;?Vf\0/(Q&!;C@g+Ts18H5b_L`?Z=r0(]CfM?3&
%FK.gf)e[SS9*Z'&Yrk\gBg@or:R4ZthOC]\SUrpRo)`Ca0j%9b^l^.l:j'GBH6$F\co_J/bER_6jF#r2)+T370bVjI+ESL,c9BMU
%72F\%m=[Qs4p/.R]asV6#hl;/I1-H!Gp!hmK6B.,lg9lC*j_qEUch'/SZNKaBOCB=.$7)ZGR#c=4;Qf+,BO(hVM;_#!$i@47&_i[
%G_\-jNWaoLFie^-'1\^o#?@YB-Npt=ncfb@G9FLXQpr"KR4$AEqNb8N)MY.M`Z%$5Y*l"\!JBa/SN"g*(ErPR316/MdEG81@F\;,
%5!1F:h-"%RTN[%P=46qt?_LC-`(F1@9`<r%@-KU^(dU[soNCI!@Zr6uof#6"et`?/$d\=h80A'\$6^=I.gWYTP!1*_L^+VY(4e_2
%J]JHh-ikDuE2<,&B_?BX]?ZHr*A9TM_:8b.<ND61NdAYG_3(,XF1LV:2]WM0>gS>#dh*ahhid@aIPS6:3Uc`1P%iFjD0hO*i`:bG
%H:=2sLhLuh)5=*o&d&4$_S_JR5O=E(F,"i,G)*acQSqdI8"cF1Ul#W?FF3&tc8($4M!*6NG4&!R,'9;j9-kN8/kR.iHmam2a04%a
%-_\ipJZa!BQdgCJZ5)U&XNLj93]Y;A'L7A:LgD]&E19S\'Rd8%AP+j"G8/0$LFD@U3ueKE%KJ.LjR?*<#S8F\VM&.I]j";S_Z'lG
%_DQU8#8">A7#JUSMp]uOOe[H*5$:Y))]KOn;l$%,"7q(H_I6:s/q`JcN'X70'L`QU&P&;]Om@s19gV6)S.c>*7p?J^CQ`b$#qc+-
%Kih!X5MdT?r5*f7a'rV3%1XDLmtU0"L>!b-g=&4V'_r>6i#+rT>Ua,]M>+Gt1&I8T&()*dN%c^l3-\#TB.!FdDrEcHd*s+@%q"rJ
%OX"HL[2.('+!4BU$UbRr9!Z8-]cp\jql]qTLohts>851*J4L_s%>"UKaf62"6'5u<>n)a?GBb7p^o)hM'/M)%n(HOf:a+@Kq_4<A
%aHS$a`4[M,5\b$j"r1Jh0:Qip2eeX#\kFg-'3JjFk4Ec!:<h!^(J@:6L.!#AX`1g0ODUsAQ1DkB<2?B9F_V2/E0(HBC#lnhM2=gX
%`@,&MM"`LD#"<"o5ucEh4K@n1,>D.,a^K[QlX;>-+Y?N=.9+P#;YcGq%25T..kdAn.C*8/RLa5U+X\+1,[q7OOHdi#"Oa)U[]^XP
%,9eFPLJgeM6up&Q@>`.>ne(^r\DF^gqh)h0aj65LK7,4/:Y#t$r%,a(6l<n-T_$D0"Z/#S=EF4fS1:"^7s`_]66%_J"<n6TOJ2J;
%_n5n6M'YHa?+R)SFl9^T+&>?0`J`\!"0gFR7%Q[ndrd(8]gQ$XpCo#?7!MUV@MtF=kdIOjW[pZ5NA=V0=_YfAUfC:!ZouEK&/RbI
%+>OSdNT5%+mSU4/\FUBhP8#-H^FtatY(OLWJP&_Blj/7HSk:diBc@CScWK1ugF$b%1(h#7onssX0suT@[#?tMQ^6ZtmG(B[nLgKH
%:8qsN;[shoDhHCY%f3C0ntjbD_9VM89$qddgOZTt]8!t?PHA7ad_&,`UPH'Dk^<I2(F'KgP=@ETRDFr.^ql]In>2e$+elrQQ)?V&
%%ePY!@DBVca8>^mZgZ'Am$\\Z>eIf\;EH_q^ql-G\7H)h>Jiub6mfBn75feAZ,3^4QYCEd/+CuSl&.f.pI/>@?PWNCpK$9r&.LW^
%0NpnjR1YFS!G@;]T%@;JdZb;SmfYGt+YmB>6uA-%GN>#(\cuC/_mn03U#DMOEr;G2+PILRm;?,q"K,]-?CE3<fi/3=&Dur''b]d9
%HP@;+LJO?)O74TAF3nlM&!R-ppb4WEOL6fI`#`F,G6ECMZIp*2NpBT]<.bKh(QDj90<%HPLOj9(r/m^L^,]Z\MA/=41e#o28V$[U
%>[#)!4]#92R*g05;d&Ea@=&liq;u'Id9[)J,a/pYGUD+\Kk48kP+<$\<<NQu]mC*<=B.6\75S'glA>SX>?VQoM_e5!9od(/9NRc6
%\67'Lh\XN\[natA$]7&7!l@2&`eZsG`+K/$1P/"miZ)Ch2]#t\kR$h&8QUU:ECVdHgV)3p!Lum4Bi,gCRin57MR8Y*=O"@`?a_a$
%CPZ*8MV\Ws/4sGm1oI>Legf,O)HaA(&e)c<9o^\hB7gj68I\0nFBH#On017Yg&n%D8G"Sao=F?/gQ;UGaD(`(UgkITK+J_7*Z<RI
%TN%n"bX!Q2,_mVt9GF/@bj-F0a]FTW9iM*ZabguJC#ag"N[(/?;/DB'H1u[r+/1b)OWoK7O9RbH--=[6'KR]o=\Y]?jr*["+pmN(
%cTg;n,I<]QT_gN.N$9^`Ag5juqjQ7Rh^T;Ofeh-M=OP,"/`B4/H:'!ClEG(^'MXE$-*n`&n+Et:r8!`CEM<JnMg\EDMGlpmJ87[6
%a<N0p#uE)kU3Y:.l,h9Q9$c!kQM-LqT9YQ!HXh>6V4M[2L_bsa&lufap9F@_+,Mb73e\cuEEaF?6`e*CC-#EA5B6q3Q/uKu[AA+9
%c+ugEMjC7O'8jZ>&rAP-Hfd*/N:XG&:)11&N5Xkcekg:*'^?0c9T>e^q;NSqe::fh1G,S`T:od=Z&Gl[N*6PgDOu*$Fc0N@l<Jca
%;NHEOknC"u#>auSgVfB?Hc;3QX=8Lp7F^pbPb>CQ_ZWu0(uK!7'A6=;ge",MLa*'ZalYm[:].dFOg]"?KVtasb:!_FFCJ9rHUmX7
%N&^]u;W[!+*jgS]Ffpj`X;tKbob.[n):U1X9C/L"M%PulRtu>Xh=*I"&h0r/p"6ZX!3.fTBTKqfl?I!"&c/YRiDm7YZk[?e#5jE#
%L(N7uGOng&JD(arU?T[gNS4T210sd[?JJ#7-V[tb<).d;OiWEEQ6]\`Lgtj0"%Z?gEa!NF%P1]#6P.NOdZ^6UC=C,`YoOLRCMT;\
%7!36cm_I[FZoOjCJi1)GAb=U:CbZdl3h^=H3fu%r<i^Uq3s(OU<u$inai'HJ%2?,KS]9)\Q!`p+,X^K^><``8>(T;T$b/=uKISq,
%\&S=^o+k5a,fs46T=+l^ZBb_*LidLmn\n?RjE0_&BmJ^QD,)dW^#Z\AD[YsEe]0<Lkt*'o1Du@?LiBKXo@+`td5BR>7q>/c"cQTd
%Wo)%]H'7l^(S:6Xs3cU!oU(?&m7;S5b]]e7/7T2p]&u`"M<rG8!.gjVC4j/QM5GKBcN+@.gj<R17XhcJeh'BM[DUKT@\F:gbeA?n
%KkjAueeZesU0_>7%"#i2gR;qGJ91nW++Nd*m0o>NH9A7tDE,P4%j5(D<=@'>B]^Uu/HGL!R#9o)N'UR0R=moso8Sa&QmR_(A>cG"
%<5p5D31Xi>';$qeBK@^K,&c3`Xs0[XboD;:cA45B"E#;s(FUam*sNr]/HR5rSOJ?>>60Et@6-_SP\N(Rll+cN2>WE7*5VtV_Gh[$
%TY*RJSN=3o$6^H7c:q(c6r$RG/d;E?.SIu7ZeGI7Z"HY5_3(-;oa;(gbM7]Mq)G`(1gCA:_)F^(nH`;!!.l:G*$K::k%7.F$:G/'
%Ai`>].fd;GJ3eu8PoIj+_SrBI%V!Za"sID?4dVh65W$W[53]"S8QFd'Qh3TViSkJ1`=Q<k33'#U8qLKcehKTl*%Z/@.-gI;XdJdn
%HW<+#U+DF@0AelNLD@`Dm)#R#K&YN%Efntp&Lc]!fm!@-SVaI,i^2G;qARN4j!a@8:3)3sUrodrY;.?b$lj5AG2RJ/\C5"KYUgX$
%!u?@CR(td6F53\%THu>l<FUfBG'`In5X^28_J.!((+$O7D"guZ,d/p&;9HK#TknV=TLl;*34SR[EV'i)0Bp.BZtL]=<J/e3MeQ.\
%d(3+'+;3<fK>e*n8h9<=DUsn46C>'J!ptRQj"BF:m)G^]&9ImUV]d(h&0T'qTmBCe["3.<C;_*#&+guD&+N;Kh!1>WEJ(0Q%OJT"
%f)ZZQZc<(VXG;TX.Tc%XiG<:a-D#/aT($QDD]Z?mB4_ff):6'IM<XTT4KH/fRc3WP0pJZ-.U*07:*[_P05NkRHiVTGS[))b*8g!!
%4O^;6,/^W59ME;L6lMfji,;]9@47qF0+19?;,JVTQA/4"fmL5AasD^RnJao=Q;Ypj.asAaJdjJ/)PhK9O;9RKB+I986$FdZ8CbH%
%kucCgS>oOZeRd]Ur)BM@UL\\L;jIFk@Bo&DKP)crbE3KV$qUTd0^;!3,'/?WUHf#O.Cl71hq-q`YktLpOuA&,^\I!%oP,']U1crN
%]S5+[4HV5t[kf/iXmXSIeU14@b.^kZN$9BU72+FY<_J;o:itTj4I')iZk4j]jjig%-u6,/fNV2EVNLq,CLfOg7^)2ZS56L+=DT/k
%8p"h`[34*Hhl#cPOkmU$_;/uihS'!o8tFa[j-fjXD=+PX+6fQtWU<Qs.9bKu8;Ne1[:PnleR%:9CWA[iGB7S_m:Ae#VeCqQMt0#+
%%9rt?I'610N"saF*_-f?[.IkRS/=mHE<I'=I1MZgU<'%sV-V+1QD_T.f*H\ZT.it4;m@O#gfM!n4j[2b+t$dRJGk9b7jGNeaCX-:
%QW5D01)]LS%s@<UE3t6AkG,If:d%W=MG4%>BM>HBWLtcPjA_"9:g-h44\=4qg%G!ibKc.`eOZcCOS`@;^P+\qiktE.3Q5-^CeiEU
%nc`Ha[i)T=+;L\@kn[^`!:DcicWG\H%*CM,J2C!J!Ci=R5kZL/6?in.@5p!f_T+("?t:4J1jT9UA*1G),R8rjd;3IY5UIcc'hXjb
%+r_4K"K6W]fh+>XC>b+R)a)*s<ZWWVdW8"oa-%Xd<PR5gPMm85.U=g@H.1.LMSu'@#R:*oDm`GZ74_=+1[#U'io,UW="e&.X+8=(
%Up7t*)h^8lSoU1f^kbbM<J\kVUG+;6<Bclu:.b/=mJ[l_,i<;T!lRd(gh.O:;2sKlOgC\(lBi'[0FONWf7V:GLoN9[3#lEY"X(s^
%Cdm["b][Yscm6[ubM*_1:`/Chk8gO"W39#kF3Qch_J\ra,,_PcQQ_,4a:qQLDKs5@K0I/!=Xq:*H4s=#I,P^>d2?NS5g.Bfbqf`@
%L8E>eNkA+CfF#G]L>QffQmi=Qg%4Mn[O[9d?P\5d?uZ""c\@f4F1:';b@%u9Yo]1O&-cC#*"o1@+;.4c!m6C]TW)d$C`%A__tU9>
%Gs/Isnh$BIYT;C\r<<u0/aPa3g%Bqb[AM::Jje?T&l,e.cNpo.I@Y0Lc%r#AFeqP)[5eP]e1_"%o4HHMF*0i)$n]Q2*fbKmmt&Q8
%E\Q;9+[<h;4Ep".c`!k>!d`pT%EGnT\g]i*#_;0d7>5N_Umh*<:WYoI<NX+kQTa,mGYWA)"b!`nO@om,6u0:$(o/csj^J<l9iCa1
%eLsgp^'9`<i\hTKMhhudHA=qI<XTpoC$8U33E;UGNNgb`)spLa.r!4#`0?nZJ<>0?_H#9S*!$7'\=$(?7,F5gG6D`&\IQ<fT+-uP
%A/chPSWS3A@X]g/0rF)`fqpGZC,FBO!fEWa*]TjZE7WH6/0tdSYUCMc=KZe5ZR\PMef/hYc2"FnZ=jfc'*e"b92ktCd'k4sdEIJh
%`[%5%(0PB$oM]le3$K(mNY')V`\W@M_MqbY6Q'so_2`7GBp2/k6cVFM$tK!:XDQj0B=hL#QL:u!B.Pa-Daa5jjN@Q\3O1\uLr<As
%@Y=`mhSf(C!V]+4(EnuQ[$\E1&d-QGCWR8!7(HX]GXp*rE'2BTdftV[]/\c0,V).HCYsn.B,Y?5PodSV.'>s!muG7re\tdAY<Om+
%_^=cDfV-7_NhWPuR/3QXjGq`CRcJdNmoV,=Q3?O#lJ9le4jljq,_^<Q!tRi2AaE$HA/CL/fX-`T%#Y';+Gng_/4!;NM/HUb;Pnh[
%(<7/[r+']Q&qGjRL6SWO!cm_[gi9C\9VF7m8r2ncN)5u_*.]J@G*u-2]H%0^8t`c[-Lma9J6\Q1W"!KCLM?63V+V?MiXJeZ7!pqh
%j[E4Ab4;DEJK%^"bhDn_ACfat\335=QF#TC79O[reerQ`iC*.I"SPa-6.-/\U.7n`59Q:#<R\M;og;k#,K<:20JXN!5OBT,TO!G<
%Xg^skUWhlFTnQIX'?/^iiC7J4Pa_uoK*:a>M9[,pO^e8SOY#g]ZjL@HBCEQ:L#'.)V)m'_iaCh]I-gc/6k;0kJ+`8%Kfs[tn3W"`
%<q?\q_DK+3%pYB:9Dl(*C*VP%#fMaVh#*Df#O*Aa/3AS</MSO`Gb$Hu0L*U_G%C9Nc,u"#BF4%LmjNtq1GIts.9bk;*`;6Ga,3?g
%=/P")rC=3tPA[5;)c;crb_&#_.0+*d;iD8ZUl7I0ltd3#>2D'q8sDFZ7-]:/q"3>k&jeJ^_#m2.4h:5gpGrBa[UQ92cnHP"gZR[l
%7`-cI7eNnKL:BhDpPjT=_?q:&j6]ZTQ]@f]n(&O/@l]<?OBmp(LUn\>0_fa.oLa[jeroLpH,pE^/u-='(/2GWMnmP%[2HQdkB;H>
%377\0F'Z(E+O\OI,0<q\ITShk'k4l'E70XY0eHs/BqZ>GNI_/l-r0--<!b\u@kK-sND?gqol46u&f=NB(=`*kM5nh8fQLEiiNP%J
%!TMqq+]6tH2(E=k8s/6@Ruu-gAOVf9+sC_5V57FD(T?Drb\P-Y'fB?2Vr!$q8_c'>nN*l+c`c6%%hm)gMP)FSB9t3^#o*=VSQCrf
%@/nII#c^]eZ5IIn_EIN?GBe,Smo[hQnmrj*_Cnegj;euRZe[@q.e7)T;`qh;F#WJ)YKBCWl"1!-`ull/<5_6V2K!O&$XV)\P_OMX
%/d.(5@bPDH!Of3N[>XF50IbBtNjkb$Y+V7>4E_i=.e!P0Fk_pj3s^*S13'Mj'G\F!!b:4^cOoCE?OlB":%sZegLTcgIkrF6SU8c.
%hBni0-^It;FXk51-&:P*)$PlacIj/>'@-(E+T3abje"1X4bRW<E0&Le7'bl@K\$EF.dB)&=/k3qpN+A-PQ?SDI//?85['rDU[65$
%!.V?FJ$=T<J!0;%=$`]_(,T,FpK"0-TcM"[=5B;dB]sFD/J=dC^1WIhO3AiaJoWP](sq;Pg_ZBk0]*4Ni;Qta2iT:O&h$@/[$;?*
%VTeO]L.S6R7F"k]<'N[pR#@^Gkf!=_Su)cT\W$$'3!+:"fe2QURM8/5$NcCUZ^\(iAdkWe#9[lXWXL[ZT>4$S(`<+*%t574=S&Xm
%k3A]0)Ljhf#X8l3h2r-6@UgBX_k_H)h_^#4d_7nMfPg;=+?:]g!QluE_jJi;aQ8d07cH49n5Ab!2#V@E)aXJ2E!/lW+3m!*TpGXM
%Bp"^f]*=C`8%3>)8^mq.2b.chVVIqUlSkOm^;"eY9d3-e$^>ANp2I!>I&`IT0MU7oZJSi6.U5rU2B6%[*')WWS%!3ZAa:=i<Mn7(
%CPjSnpZH;*Yq$Xe.,d#nG>mPAc1e!;0@2#aCO9_.]]mur[5gnt@1*d9b?H1'6=f4/!_)'a@3r&q5%8I5,),38h6'Q)Wu#ePOX7H+
%Rf4p&Dj(*?`ZZ#?712VRY,M>-4Cp[5k=Re<1fFkT]Z@8!-)LaLN"n0P=bnmigg.Z(=1)7A,7:BZ-oXT3^aPWe[4#8np(IG>*Y5*f
%hC_`C,uOsj1"cVk8-=Rq7D=q?&@gW#+_dr1&liAgUHTMCkH<^-(^"7d]YG2>#U-f\_i.ga6+CWil:&hX9=s`k'q;fq,D/G7m(]tA
%KeD%6\?Nooj.Qn'i>?_AU%Bb@L%>8$hQI1r"'D)`WA<lbb45?F@r"$8FX;g=:ci:aj2p/2Uu(c`6g<Zt&)XCX$t?al4=9U&MN)n&
%qZa$'$7oV'B3U!X/qVSrP9Mhn1Z`*sbi2jo<R!,I#GMJqD257I4Z&oDhH*hmXr]a8i(I,2OaB.F"9Tk".GPFR#/]FFH@d>V+?4&(
%N6+@e1BH.WAg)(tiI"@l"qWX0i[F<:W<Nmg^T[(l^=B(oKWLkJ+*=2f=6*4fBKfk&ot_JKG$O?-]:EAM!ZSi6]dW@Rd^LY<;jH0H
%2&V7)81gXW1Bf@\8AM1H+p>@^C6F:59OOBF]'?DS4\[W>`FYA>;A+8kkh]1a;1mZAU*11"XJZ!@VBc6O@&r=K_blBH+piRU7qeei
%1+Is]2BX[]0B-*A7>\Wj(r1?a1_]uIg?s2H&s)&satMIrjDe&cl/#\mVVZ]LMEjO[BLNe5-Ct"i./rHtWt6/G!6'd[IZ;he0Uc$g
%gtErs.h*=L1.@qK<]<D^]dS]#obN47'G_TUr]/@F.1pL\OUF]]k>?ns(1!Is+:$q[IVc^jo0JHlnl5>s"iH$`/c\!XZ3AVcajpD?
%a>>=(S*dQW>bg[PT.<FfQ=6XD&&8d(C=kp`D&=Al;<4E8XP><)/FMoS<JNk__DXpCO^oKm)JYn7ffmX#%*YakH=BCSW#j,gW0k#5
%@s!jmO2C'1dKlWIfXPI@[^e[!RXMl_lC;nUp#jCFkB>p1XFM5#o0mGUWik0K\F?arc<5@2<=aYsc0gb?(b:A(OZ,j5$q\2D$ngN!
%IVa+2.0dH*AY"FPY2VnsTE8X*W.,2pcKsf\U@r_9d#8HDQcKpk,'R@+o+hg%W)<NdFq@lI9,2k13H(EFZlbNRPat(a^&K^aJKhVQ
%,`%^iedJ3)Mcaso#Qe1s;7NHl?N\\m6t*"YQLTT@7esh7V_I7s#[:FtO,N-7['/:IjLH;g]'W7IlT,%,E9X:ZqG:b\Z6^a\qpI!;
%-&Q-6)13g@lkiU-E/2KSSeqYV!Kl13'=&"\2as0]C%?p%Dg<a"fH,*U))6c9[_=JTa/q7@]">(tiGBcjZR9I\hgQIn.`3U[pYMid
%;JuVAG=raD#IhF!f_b?=;m:ap]gc)apD2-mg[0L1DSs^f!Hef,J^"Yhl7K3Ym$ssIF"f<V.BV_&d;""r^X1&'aYPN=]b96`hNRgN
%Yn?A%k'i_5"u_>`Cs0m)U(-[2,/d1GaD_PL/A6E]*(O54-]SM^0"WTC5+589&eh*^qdEJ0VWUC!83@pNHsr)u@\1<cC9Ett99F9W
%>6JrLaTb6XWX2Qa/N%$H#HZT`j&R?OZF8D3]N#iQ>t9M'A6>Wo^%k-Di'Be@_N&qZc1Ua$ck0C1grN\DV[q\5Hk.Ds$U5\p+1H-.
%!XWN+VFCg[6ejNp<Z0$:Yr^Ws9UBT+'_"Y[1oF09D2X:*&BX<I%Deo[NOD_\AR*;[$=XB+?*(;$*=g$lUAZN0Omu)=Q*^%6.oC%X
%_,3%??5M=2.nI`r&;I++UM<'#2-tUIF!)Z)%acuNLhVpa2;0_V^j9q"2GfY%.^<9'ngSN6"E'9Cd[PKIU(*`6S*hn0KZMBXlF-jd
%/XJ;MEZ1Gk+E"%tFdE[<Gl$'c!4XU:W7\,!Qdc1%9B6ppSf8lkXH-P*0EI'uTf8q_f=NF\G565Z771U#?l9L:.BTW,2?Uo)8'kn+
%_;J@7Ass[K:dd;>9g5_t9=U6:oC`T%8*=Gj;aIp&QKXh9)$da1>I!0VI$+ItPRX$)FT>L&F[7F>qMJGuE[i)EGM>3!,ZWC@SQUs&
%3?PoD(b;1dX=c0Xa@1QT_kV+s'm@/uID\WVp%ELO:="VBik/P(`AhDHaJKTj3G!eA\T^^oFJ"S&`5YXg4*@Aifr[oR72]M[4l&G#
%`RXaoV.VJb+]ZA=)6bGV9D9>U/j:L#q,p$YNmso'HSbi@LdS'qC8>#mD!W0BYZhf'-o"b`1pZ-4s&"]U\F"kM>n6VbJ4m&=L!"Z0
%`XF*rdd7%('>boh>FVDU!14JNJPC4C+I\YJjA6<Z?:<f72UOF)>h_+JMlSdGI_HtgL]j5k+9u>Q4k8RC8csOkqqA8',,FBCL$[15
%I@./TKScZ1s%O0m8/3?XRKu8\#ZoBH,IqdI+FhW$c1J27:LGla7OG[M^jONPOLfDhnZb*sTe^J6WR.5(XS#W"]*W?TGM9\O)u7V)
%SH'k./\[NK3r;hkoAaL&i?P[lB@]*R;lj[*5\-Dj##bu:gPfVOG%;472Q0q2<q`i.>"uopSJNUs@4;V?(?In`b5HTpl'C$_M^?!Z
%M$"hg@8m"29Dn>Kc2epsTCk*4A+MpmVtig)[hsED%=6<h%J)ZLgr0O'S'Mfs4]AV&F/6bq_m+Ys&4M&=/70*n>(ge+Ud/$d[gcF3
%3Iq!EWL`;qXK9[\>[`/e4fYBWB&[3KnI'V4EYqNK#1AsP(EHf:!$5_J3oUWS\4p2Be/'P(hGo9+0pKW5"i[`JC*</U*6CTNBE2*0
%QDmE-#/fNe)%KQ:]28%8[:Zm3'4i^e[*N=U!G*[lgm8]iDM7Zr`]^HEICi]aV;S(d?<`O?mKSYt7]i1O1IoWT*7Z?KrM._j%.8X)
%ET;Ktbs@'ub8#sa3J%nb*FB3W+?=rIJZ[&PXKm`:DD)3X(_YT,Fh@!&!H9:)\1L>E?lY9n;%8c:H<MgW1MTZ:@8q$_=o^#RkBS68
%.=+li4^ft_1*JfL=mpA=2_*C;![T/&r,<5@:%+/6S%+FdA7%b]!H[;d=A*0Q(=+BUhV2@LrJP+,4uqCH:>lh?6O>.,+&`Rq(uWI`
%ml"EtN-921ab?!RS#=Gtg%[a'n@9i+KI1Yi2%LZPX1u"nE/*1)de'-bUe6tcV*,`GU48G2.:K`p'fl:3BlA,4\r%K5bfmBTRXS65
%R7UC%,%3GePA,e?afQHJiHs)RUFQSs>_9XoHRgIefEtBgCGt;8F:3O:Fp'*O._[ZkRaVUU'5GrUR#PaC4Ui+0^2-P-FE;XnH&d62
%ih=3!h]t/pX>F3!eQVN#"Nf/h>m#jI7lu'fBZ.HU0csOFldciTnor]AfRA=g6I;[+(T36hgS0&>*.^GmWaj,PZrdfqKHQ.L,>j$V
%SkNebhK/1U!/Jl=9R[WU!Jn?!E>K",hP+nd(Bs"A:j#L8(DU.cU6(Em!A[0-/A&=-MtB!7@TTr_%TN)/WZrAM0_1=F>+u*Y&S1gh
%fIkA]W'6E,Ou4H2G9m3c'pWm6plSftrlq3[#-sM@:j%Ti+l@T8[2&i*/:&AG`H#!9U.%7RMASF=hQbBrXSg%tV+oN,1n)<"=/42&
%'6A.OjqKX[fI<bgn&jhRH8Q'Fq3.pY/q!;>eS.<:pt5OX?(FpEp1Nl/<!l8/jSD=pX(_T34U>eG6#pF2\uhb@[a!Js..5Wcl/.Hb
%I^C#(Sc%6Wq=hZ&a+*s/^]"")J,AtipYZ#@J%babaSq^bg7tKooCDAMlTb@.hu;I3GkpsGpl"$YrVHEcs75pao\XZUDdNDR>koK3
%rrg^JW1Wq":cJJ3),o+E;#2)c,,><F6?*JTbRjFK^,:pW#"0W7,Mg/'cB6>trtO:F;4%b;P``[pSlu?J](Z;_KK0?I.LuE53h/d/
%W58gos$B,:=[8n;8t#=D,f!H'GVZ3EY\-M<+L;ELUISA#e&n]/]`^XZ)(W@S(HsaqG39bB*8FUCa2=OEbF;pJcRK&`JL$&]>;*"E
%.qo"o#=W^'>Y"9EU@&7SkA0ddG75a<RlX`4l"&eB<S2-#*-O'1hJRd:``s!$F]=.j-ro@9KH^0aQ0m$Hl$b+tZ9E0QN1Nq%)Br[m
%g&/oFJ8,\:6pVMl1tq&c`-&"fSOHsa4VL"g1Hfg"][A$F4u0UFL1s(?U!#"Jl5I!$O\?gnG)9VGSHh,&"A;@_*:_XJ,?!</R#`gb
%:+m+9j3&(UZaa-:&XA/!UfUi#&CS;kN`<1idU=h+9r9$FD91fGNWd%Fb'dQL:3(D&rZd7W_c!SsD?_d*dBNm/TZ:4W)'PVM[qTX5
%3%ud/q_$Q)3[-O)is'//_iW>:FLaeK@V5"U_K=6AGp"$-NZ4N4C'3^*D46Ztr,]NIL+=Y!2@["&DV^FM]a]0:4TpSJfb$ndcnluO
%[US]YRgA6ufWit-e.EjI"5O!rJ8dh%JZ)p>Q0JH_)JsB[`)pD:?nl;JVZbE;U9a6*BAAKpOZXX6XH."Q5.$tl"X*W;LJM0C`L0j=
%RG"$WH$W@t2>,psV3q:XL?qUG\._ri3M:b.f3FttC0#qcpp$5D#d5Y$k>b.oZ(!4.>jR%NAWqnB;>TFC-+b.5`SR<A$!#bYeRB67
%'?YB,`m.bh:FrtSD?@4L`C!8%"/$YTp'`Oa4E)c%Oc,^;Go\EQ/h:jDH<4*719emS`QmcmBmEtKVP44(Y\f>oP>"ipKIsg)Ko,ea
%X,^8,_gMT,+?eRXn5?kOgcVnS!G("i4SSd%Lpa2\".97U7?%rr#LTe=VR^om+*JXm'k`%0SfoCl+ppij80-_e1_E/k1Pq!LP<c)\
%o"lM*:DMB1\.F"@h2.:ChjVQiDp1u<RPFm^Z^p.p@25=*<eNa(&BKq/1X.&1:41^X&1RTS"!SJnM*dFh/(_Fu,nV7TbN/cH\Vq`(
%T;,!MSNZNKc)34fPF[KR+(.>3injgGK\_R\r<*)HrrQ'7q)%0^UY<gMpg@sd!`4I'+d<WZ[W[uD@@]CE=6C='QA4,%?n4]D/5u.\
%8PuDtKJYr,3F=]DH8OX&R7W?J+!U=?B]/eZlIhhPcVFLZ%pJJW,no1s>38Sd([)8-(&F67]huUenQ$@4@\<hR[uXV2>EPL#P9"d?
%!CC@nF*'`&)sOn\'0(,L[C1!i4dR.%38KCsT"2'?V*Y>2*9j((o%P7p^t\[qOoMtuNX]?GBW7!__G$!t!u!J>2I?KTGZ=?=c7mA$
%a1DI3c8->A#%/SbQa'rWGV0*n_S[++LsKU$GG`RIOBe$<"<7#C)XMDq"J#4\qDDh6Ajg'K[&KmWS;I89ZSoC5>R:*K5'I\9bKiES
%9'r>Y&KlY2QosIr_ntt(&+R$Y<2[M;;%m)%eVgAM!_;!]j>T6r$rbV.NoLM]?u_Rc7Pq,dm4Q/1Hj?g,qo6fAIH\>p8oW'fd3e^-
%P^i0`pdJC/4=qp('NJ_^S.djgA1Slm+-sk8kmaSRrkq``2,hh&;`"SSJHatGpN)Y:W]fBZNZ!rc)UiuW:aN,i!s?_lALLR]<&,[D
%gJuc/%R$[//R_NfhH=Y];ut.AEWS5`*0S@&#TsDG.nhbQ3>p`^@hXTml2OV=d3V2uVTcJ?3/pIa#'9lN8Q[`1bj'NUP0tUa\d@0;
%9iI:;5hERk=RH%1q$7a.`F6kW$Et@SMmAhZ70Ue!JF]mR;K+N*(G[1:ML;]f2U5*\5L.T[ZQQuHA6#]n'^a^1.;J>t%%n3Iq1>bS
%$P"f7dCt,IPP\$*#EWnJs#s^&gl(6P6!S0:FCo+o8XIJ+^<e7Nl&WUgs1^'Ee-ao%3s+Ta$Qd8ro'OJQ=b3,K(U4d`1nl#kmaRaI
%5n_M5NlahGJG7')noj+\9e9\RFE^g3Te_Ol!$%6!$bK%&A5ljVeU)hJ]Sp_mit=;QCrUiP&kIC),6uC>gQYR&<DT2b$"(d>]u2p&
%U+f@jk(PH?(YYS`ZrLq.`m7N_Ni2:(Eeblrj\AkW%tK^@44gRH$5S*6bH&;`7:E1,`5Rah(0[!j_JofKX_7)&R\k!k@)Y@)[u9-J
%n=7%]^huD2MsWC3YLt[1RBW*5Fh,E21J*r=+>QdKCm,+kUg1[3T+?$"UN2b4!N/b,Q<Ba?ihjiJra@DWd+&UO/>Ea90@]5Wp9*0B
%R\M[K`"?HVWYCaTB+=q^2$lE]UMVJDQKi%HRGPSY!%p0E6MG8jdl4cD]"?j.fd`8QrVl)d;?gS6V[1BrjMjQ/-I]<C(!.c*?kepY
%')RN97SQX`_?@^#g+u/<*nt_mIHcem2]2I?>?N`AAY8/"lh).u,KT`?Gg_R^6[KF\iVd;!P"V&A02FOt15>@Q<Z&3b^`1Q5A+^3H
%Rle3Hp>Rc)@ECX<,/FEBA<c">pB4tf\j"4GG.)GrLRN$Dei*g%La'P=g`Y[RI.FO,G"M]WSG6I*4!l_-U%-If^l\EK*)(KH3$-?F
%,>b;/Z6I7+Fp?`gGD6*YP'-mS)`=@^:K>]j,j?C0dL5t>G"h>_#@s524J6$]e+$7("tp$eBJ%a.cmIFmHBWGlK%O"H-7P6\&2"N.
%D"H5DGT+EX&>Kh.99e,!X??RtPjk.JIA"Z/nr<YfHNYbAnG,ARNdCo%36rK9e:IE+mT3RlVA=A5'"`pbAPiWO#](8*V]DX`%9C93
%b-Za<mehl<KIh-b>-Kut3mS?D?B"/Ee2TH9%,Q4_A?u(aT*pQSUfPo9B]BL6Lp;T#5W)k3q:8p=(A[(+^f`ce:/->[_'DbX8CGd?
%Nfg*dabANK-')'G]%1*+40;&BN6EVN3`&jAY'06W$c.[M$An<Wni[R]i+oJT]4iTg8dKHg2q400$CM4an%P,?ke+lk>,[@Fm/*&h
%ng!kinCVo]-B+F((^us`Zp!7[_iG;_?+/AA_=KtAq2@QW:^Qg8Y&]]^pe4Tt5^m*sQM+Y:I[pa&+uD<'O]dpSJ@\8OUOC_P#JnYe
%N1)OC@3=l1%!9VnHF+^;bcfV(JOtJ%QOB[0rA"Z^U17GKN)5jA<I#^hK7"H%MN'Ct+H5&j>HQ6X;U<p*'`Q@KQCEURe%"C(<_^j8
%rWOG7PK!/]h-B`4Y',hAbBk_bW4%D5=eNC6j.3'9jlL.KbG#,T:us!s@?6$U'+9.'MtMHjdsB*f"IU_1C1[tdU1g)q'#X#>irhq*
%_LrKD#&8bf+Yiam'qW4]_S2fd^PYc(]SZN=JLjf/*dmn>+$>u$(;\R+Yb!(0'-sd&2*QHn7^J]J</l$C>/=n!,\#?sR7"FhRF]Uh
%STPDC@!Pnl7!aB_9l-<pBRNJqHWU4iWT+':P&k4KN?"0gcgc%Os1ZUm4^5Yd6[E!.4J(S.I8,hP]M!BI$2hTd?_.QF(RZGZ*SJi2
%?NIcWH#g2`q$RP/?=ZJ)a71(<IU0c`rFCle[=Flm[P(\+ZarAqZe"%CYB3H)r97n=,Yk%BD_k]9DU,lMdj6QRW32&q@^NYepR;d9
%Fg/Q!?rt(aC>SMk(Q6.?U%_RSDD2ts%AqQ?CFU>"-G=U#md)M`[@*1ibFE-7MK>`.aNNF5X\[8b!uV]SEVA1D8Hgd5j1#$?^%CmM
%J,&+X)b:k&a!.Pa]ZUT/WaZqS8rVi.`.PM0LuNUB7_7YX^E$_G`(2<B[=EdJbbhJBNp`=RN*>fB&P8o/a"oko,]`7X4P"N]L*:'B
%eni=WWo0SFS.X*fo3;L5NZA>6M?W7/Fu+9FIJ8^ce8><jXo+&oUAVVWm4*u)b1=@[-3HT1H%7N8^^`+\Va8MIkK9n(OcA]YHD&Vd
%b6Uqt>Cd7$SI>W>]1-m-5UPtKGRX(bSbE>/2_F"K@nld%-5L,][$>//QioBJ]q+Z>&J[P#nOn?caS)P/;^h^5inW.0&KD+H0riQP
%26fdF&o%cV2O^qK=g_S^0F-55\d@2,R.6!C`$KrJ(@bBgD+g"=-0'1_CaKSq":q.o9`RsiGlj)$&7t!m-N.(O7W_?K=]k7])Q"P7
%Z<!TFi"(".^=++;>a#]d^Fm-V[]>D_1Mes>aj&"F9;2ud;c4bO235Ek`.`s8W8&h'G9Q=:R0u[?T[6":XsV$oU1j%YP:P3<Igh(r
%MRY[I&Hb""T_2hU%bYj_e]$ZIX9QfL/Bk3Z9i@9>nOZg?^p6Qi9__l0A-GC'MJ+`/Ys=40@fW"Tk=_$)-OW+3>uQhe,=+[$2DWpK
%_]<CCJmul+_([daA#Po'ZPJD1?I[9bFE*Bq9D)C.D-dgq(lb\0EN@';e#Z,T&gW4iX>5eHaS1^SiDU)c0X/D-k76$&kmBdBPAL^q
%?!K[3Ja*i!XhK",Bj=2PRUWG@[/+;NrEt8a7loIH0=uFrTtT+8BY[+\EE_&t&d"g?oVB0:$gqkQP5r>7MS8#J"CXt]7@+DY_i_NQ
%>_9FPc@pM>YUu";7!#\&)49)GD_>hYB4t:*5I<>lYg6.e^7NbU=Be@tiV'9XDPV,ZPAD05+H1(JBJ"Z9*CRPYh;P>DpSq72,&H%U
%1n<fF2n<fpAG"mfs6hmffNjC04obW1S#Djc)2@Ls7W&5'KQX9\OV/qaT0lqUbN9rrV,!AMmKd5<c9Kp7"IKcqUdN+3=VhO%%CnFX
%H/pRilp55m2I&m%&GCi.Nj+D>HT5VVSOnuV_^`S71J$1jAl2H`b9rqZCQ!pE\I3n#EdB_hB\#pH&e$M7kY^BZLT%gQT-$68LZ^Jg
%B!Ig:rm.lQ]6[cbbriblF^\](It2"L#QcuF::nWLK,:4[#8F5;K*6UGif(C.f9c>5;\LZiFJ;,.$?XQ!Jj-J+ZUg=QI.+h9l1E.p
%DAACU`W-;kVI.h6$urT"<#1DJ,us#YZX1Rno,F-i%MhI'\kR2r+R3!ZYJ[a+bl%#!XG:3q/Ye$<=LO^\XYE=/\Xist/CII@)[I_"
%W`q`#.OL^/jDt;1!I\b:p,.'P_oMcGd$]il5:(gagnW"K6HSYjfAD:jO2gH45dUM)PD1\b%ihL,Hl;F(o/;PnVfI"'HKg=I=0W$O
%e2o"%8Xtr]""+k$HhQkd!*@p222biBl?"^!N>,#<Clkfd!kmuE#pa/M!#EIJaDle*]5kB?a)gG(fD[LB>H7#A0Y]/*!&ilaF57Gm
%>q:#<4gLb'Lt4Zmai)%=0R#gsdqF'j24VG"$4LJp=A81I(Xglu5I%^ba]r?qk*`E>Q#_(r/;#$6$a"Nk!uPmMj#+?*pPSSs\6aU4
%\7<m3$P=l\A^FP:a7dPlrNRUDLY79on@'HI["%U[!ckiOf'N2l9b:K-&K!q,/,)aJ%MY*1\SkZIMShNVZ#>r@6-^1nYSg>U3BRM/
%K\-Gu)#(W%%:+2WgKYh$GK.Q8!a9Cl$h00-7g3aN^I@XJBo9'D=9J>PYc!K`^C6n?EV\[BJ%bGiHgOVVL=q9Kg!@542U)#Re'e<b
%"k+HY.EN\DXf#oLPkPC'Pf:?1c6@=r9L8?Z!MO%%&PN0_esVka!:OKFRBYlm3PY9)Za_*aO>lDd)chTYng((CY9as/^]Z]F$[p-Z
%,lPj:r_]Q]3M5L0dnck4#)0Z!V)n[_SFsP[r5N\0f!71B#Q1>q_YJbB_>jK"s/"Z:GPgV&J)``hpbonaea<u`67c6,qge=tGm'"\
%'3YN)d_f08;M"1d6`8*6.fs"?H4#&Mp*hO#<MKR%7"_lL8a$EINKqQbP<aa\jWu,.&hnj3A-=)^LFu#8-UaK^.X/lli,BeA8PMR&
%Muhh.'W5>rLgmJ?s+%4#5$/esqO)jbTZKm#K==0;T]"ASFpa6t-a</qkdgA$:@1(]pp.i*\-kK(X&J=Q]Cp<O%!i.$KnY<HnHVGf
%-So!q8WFnIAJhI6"gL#VT\L-BnFRKuZ_ne9:9m:U3>@NYSl7+,j@GUC`(77Cph"a32Z,(%a\etTKj`_0(h72d#DF"LM,:@R">F;2
%`mJ.iB4CqCYed-!S;]4ZOi/^9^5BHJ^,I_<qaN3`)8MjqD%VT!A#r20W"+_.4@JF7GTG>LaMr-[9%jo>a\6G*+>_,@q=u.>M$OR.
%#S[Rs#8.(_:SBrQ=^ks_XY(..@L'VB*Y_&tU(W$Zb>q.19P*D5p7R5n[EYp!&Xd2!UjDnj9D#)]g1k\0\3`&h?/FtZ.4p'%*Mu9$
%BR-k>isR%NNjPE0<9:dTa^hlHC9h&2p;?(k2^Zl>mE/KUgZ*nqUB.u<&3LEnDTM?kX[N<H,DtWIqn&131LG%s@8J)Dic.u>kSl%6
%9HD>bAO&Zc?+h5'(=a\jh_mC/S2Vd-4$Wle$IQcURd.3EpE'BA=(=2rGRL#a/f*1'W1S^b#C(2$Ns^341r$"j[IPc/dD)7Nbnq8g
%_3oX*UrMUi]J2C3=/\`'SH:Z<3Y[2U"FiXs8\f#5@UfSXb26RMoHoV7QVfIK[]3?sOf5Ik/)%HH>2O!N8uIFjqtg:Pl>,HtU985u
%M'adf3I$RZfAX$cQ'0e(=fe#MST`&u`9X.J#LdnN-'f[n$3pITOP.E"f@b_)O`K3]R<V>soER2n)5!09MdK>R;Pl+uDTY#!+msu;
%3a$"IiUa:!E:g0j!6-.DF8YR\rhElaq4IN,>hG*.m^o=\b/BGR:.jbbKF!8?,jNt?.ptb;B8m;$Xh%MU;f<&#ap/&0RC>jN$*A'/
%?r@gTO=t@_A5ii8amnh"*%5HJWTLZuap%2rRbWk#$$Pd`jlIV0<ZI!rU)<;;HcW4.!$/H/nf_+M*31Ti(\$95G(tBk"t<aT\^-PJ
%4@qaLrO3k/l(95K]X-T-)/nN[,NG6O1P3Wsc+oAc-_#jD)rFbJUedF6`"cBC-8E"9Fr+P$Pa,)O'K+s'2NPXTP<'<RM&J-T)J6"W
%*s8TsL*m?ZjrDEEQ)Z7XHGQ%IN@'t0KjU(NR;TAQ=_`[!A4C5>d%-gY5"gP1&s%SiDG^aq?pNROPpT;@V!Gh3e1,'l.rXq+>ac`o
%F]bH@[DG7tfboe-'R$hCQKT#Oh2#3d%JAsfgLl8I1[F(#X>I38SU.?$O,-X%Q*M$U8@gM*Nld#oNe+>Z3,=g2>:,9G_0TmnrsYM:
%k,#s#6NgkO+<%M^XR,FP54jU[5%\=Zm>Di"#dq<l4Hr9s]'LdqH%KUD%>WKGK4^n@[djQg/]UZfqPjQaTsZ#e'-:][GuCR*^@.mR
%"`#%T@ldN29S/]n;?=nIcj>#7XWl<&NlCr`<iD8D<\[='P+-R]]X8Y$4ZdQG<p.E^W6<5%=fh2d@=Wgn"L.T3[g$6$`-44O-!,GT
%=`DKg:1oNriL'R+ljWR8'V@j<dLmV1=as*h-7fnVO%%n2"S.DfU'(c;8?pPq0#r36Si>i">e.9e-b'H"V0[bk$<#>qQi"rRTDCp1
%nrF?_J'k@q$,Os[/P^rV<8(A0*GXV?;O317U(5p#*6r"0M*Wl+8;MDnP6e?QRp\\iADSaH(aeMlfk,5DZC<[i<b;[AZ5I=?UuYG#
%o;5U0Lf(E5cF&D"-bHW=3'+)bYb98;kNI19&8KIG^5$[I55Ehq#-+4=DO5i:\;>?2R"X(>:_C--.V,8G@&-Q&.!tS1bC(=U*;%!8
%\okeERpW.fg\1&*+'&-?8.pT>$rQKL`Sp$]pg.u?<BbXMZr;_<,5Pj2H=3B+jK#`d.PhmkAW+f`-Ym-[XGi"fT7$*g*RLG7.fT=*
%8s[6lJ8"og,q\`T\"H??+tWtt0XHU0dE5P(!T7!*RR^j97MUZbc"Knl0'I:@,_ci&M%8tf=eDi=K0$#,L"kOU\-RnK#I"CAgNI1P
%J1Sik<qd8p8hBT1VBFJFVOMHLQp`GRZ*k7i2g@26\S1J\@Ff!j;f(TeO7%dZKEH:@ZJ#KI__X*)KkthXfCFu@Zq8r5OJB,9Z.In\
%lAZC`"=\Fo6U@etj1[.Ek/a6+V+0N-/=1S)M"(uGXN]8o!l!+#Wemls:ckaJalI%,I`01T@P:!V(FTG4m<k1UW1[K%qLU/+KbK&r
%R@T_"<kU#q5UdJTQV^j<Ynd]raY6HD<0nH+U6q#C-WJX3E=nW4SCcjLo6A:.Ssu_?/A(W[\rC:$R;>OqK)TFUnoe;D%SIS"^_NM'
%TsO:[aWf<-FG:LnKoZDtj;R/$f<&L9"=WmD;>Q%4Lrj#*5SiadkUmYaHTAtpZU:n%Win+iT(M2Z%aUYUQS_+QX/j.BP*_=W<90FD
%!,?qfU_5s_Y3Ki$U*is%A!N@ER$n6N:4!W/4EtJo$&1!t6F$gaA^Soj0,$5th(&X&%Zm-D&AathY$q>W>[afa\[G$jNu#YbY/X]_
%?j/%;2MJKN.0f4'1ee-c=?T<"[")$FTd]`2/]f%AH=-A=@pQ7=g--?K;,>9j!r__SH.B!+b6g"eC[FN2jRb-U"T+aoY6"i3EQI#&
%:.\LJ/Cp-[8W0tRQ!LUF%qhWA[lVD3b_TgRaf[Kl/'O4>WbX"k2+\Xs<L?TBZka7nPQQtbRVk1')IH0,`6oIP&:J%f.BM"Z:o:#Q
%.W@fY4n*&`T!2rf^hp)K3L&6.2uoY5(sY+MOigLTU];/jn]\l2X`+\nWj79Z<I(Y\Q$VGF+Ak7X#*:U@Y+`<iYC`m3MY!MOW>crn
%WSbtNWE<=5U>iSc>Zp(Hgj7BL__Qd>bB&QY"4iBFNF@a^Y_C0U#?Ee:[lnDQp_VaK077mGjJJ)db=XbVpa;T4gqTq(8M(1Ta9;u%
%CMK"^WOPBlGU>?Y=8$#bCl4$!F1'h(an(Uj$&Uf.E5\-3p@3K@ZBH!=U;KY-_f>Njf7R4'apcVYZEV'CP$Wo+$F/qhgiM3tSp,M*
%&UP&MR6#+V6,Zs40FJ/oo%rbm:c=W9l5rmJK>km>IuZBH(r)C!KrC#iL2r7GJrIO>fF8EeIKl!D5(;tT<<EEtbIBs>-f5XZWN:,n
%R;'&7D<!!_)Hb-fLd)Dse@Qau(8r+Pk)3pb63pPBc5Om5#jSBE/Qg3`R<H1+@W?69o8qnG;\?648QP*KTrG55c]M@1SV)ogU&G&p
%LBnQY2Hcq"5?HkF'?-7+:m&dubI9"<o*f+4K'J:;(7SjO'eg0LJgL.<[>TJ`8:V(L_PUk/*e"E!(bW%jF-PH+'+1X+gm_9lDS![q
%\cL1/^``,G"'WU(0=E>JTPoG4cZsAcM)DG4JX`0T$pF-eO.U1K^inp(;3?RF"%tp[;&20]X@'O32Gqe>I2)o<;?)mr(<OV_1SRY0
%RDrDhLn/-!&?'T-C9aj/`rnITBi6U`+M3)+du?2N_ub]B0>]81e/jiK4e:[N!Cl3G_BMo9LMY+sCd)9,+20LP@uf53.?/$e!srN`
%9LP^hU[4IdX#\&Pmc(e):a9MjXgt0jhUlh8-MLogpWZ63[#Q&!Kq>CceV=uoA^dhB)4.=kUu0&pPGNAU]srKk1blBi7Z?RpE:j(R
%[T5WghAD'J]#n8]Udi$jl9]U6rri+SVn39abV#:/]L16^l8U+\0"W(qELem9K%@!&;6m&K'KtZfZJ!X5.Nk9<:?oa!SQ+\IX#Vd]
%1H`-$^b3]2Dk1Cl`Jh7r!+MmrV6bH_G9]YNI.,hWlDDgZ$oG?7I5aTG-/7Xa'=0t#IT&\PA^uj5:`u^`9$B:*]GAISEA'pVicSP@
%P?g/4_9+I3#t?6)&jBUR:_#d#7$8Hq)gjpUhGG22aBY?5I/FuG#6Ajrl[bC+3W%ZjEo+2$&e-9j1:=69]U>3oCf*'in.><XKib(O
%@rt\sW@e([U@M-eqmu.re/j&l\>0PheUF(@,mVDe.;M2s#!O]e"HBVuPR8h#B[DatZ<He))UNV"a`94s`qHp#)j)0'iWNO04gRG:
%M``a(Kh#%a;<3k=kibB4U<4^/[MtF'0#O>>gL4C!'<hd7h`t`'noI;L8oS/p]dS54R=Bu!6X0j=n;ohk``shE060X%SpMsp,r9<S
%Z%D75a"g?q_[RROfDGftYa]D51B:2$Mb;I0$5=bT%@Z@Wcf!"-V@qJLG"@YHm_).)RdLZ;eM8=F_KkkrFQ'[=1RLe49LB_JqY7qH
%aP=;*;.?/2N`))KiA@ij*NZCb1J:gBgDqf0G"JM-\ZIeGUku"m`C1drW-YW4WAE#XR&*911tYhSrMr4o<NUtEQ0>2Idh/N!)p9IV
%?*rt.&7YGb^Mf5)-GsH=59,;6/P]p/LMTg%-V*(SYL3XS`S+<$T.=Bl18ubDs4t.J48T<Rm:%['?p)2>CfK)[AU.]kZ:o!d,ODZa
%'`8qTZqeUMNDVc2f$Zu76e#:O\KRh>d%O`eOf%YTXLRBW4g(]O]fP*^EFno#PoX@+a6JPr/@'0*RDnpa"\tD5'Zl.92uT&'+8b`2
%pWo;cr'(*5.&m7B?]oKQ.#q7J42#f@QF?lT+X#K?599!)0',j3rKnoC,$0-q$FWc9l).=,p8:+pN&ZQ<*WKpo-j#:!Im&4)4Y$G8
%g1QCmO`aVA3ML0JUSn5X*%62m,1OX7VDWYZP?dd^&^@s7*RaH<3XY0sEaHVm-*-ELJ*%QR(D'M]]%YT=YH9:I,:=%2AsD2YL!/nt
%BD\>XKb#5j\I\k(NAYYMj*d4.J$Fl+Y@@t5-."tFS[5:<HbqRR(`Z)2BS)jYaH9nE(<gM=2&6DA\Z\mUkOSkA<dV$,SH1*,D!hX_
%S)n&74r_B]437sGrC`"?A9S?(!\<RrY[$4=#.=LD1jqFM)Hl)Q,nDp8'lG-l_bhU,;tWW5&Ob7elL5pSng@#@*,756O&fbc,`R%g
%$OO8pF;8OIb7Ijs<*^4Z#EfN$od<>]kaBLLifiGKaeiYYpa@/=[]DJ_89#1/jMHYCS\\[7a^&b[78`P9R?fB[\Xdl&!5(VISl?Nu
%mF,MAU!ru;7l]QG70Zn-bTH,em[2jnU+6;@kPQt!dnJDN%0/(F#]-K""%5kjCBT>j[YWicW:k%[e3_(b(nsU_o2.nN,O\ohpZ!NL
%.E+&GgFsk4k!C=p?:`JS`&jk9aq5d"jcV@"U'gMMKq'f+ZYMR<W5,nG2aPRpBHB%qbSVF24:Fpf!!r*`DUEp90gBkH\dGO6AX$.p
%m";dB9K5pN#r"Dj5(E7P-^V="7p3KdpR(!:Ab`KKHS*,@d8[s<'<6SQ_MTU#>VK].6"FP\X$C@KD.aJcg^A-O)[WLl4!*'8Y>qi6
%+W"._18HBMbl\hG446i7QQYR4p&q#21'd`%ne:t,TB0AOE:@!l/gGuTP3N4*?'bG_abbM+#p:se$d=[!8l0/%/[$*]8*=/PC4f([
%-dD%D3,IlV@?E8ci`?2oq%1(Jh3s8`1t^NLqmqbQOm)6:aHJ/09%hIQ;WPVZUl)/"$,,nV4j'=@*')T'pI/_EgrTq(!$?p])HQP[
%@?2Y%,3H"`^?U?%n)/5d@W`8(!Z&`Z<!mI#qb,Zu[;%TfL_^0'=n.l-/?/YGM#o,p&!]+EHu*lJR"O0@Y:DXPE)uRY>M(`njF6Ps
%>B]!LPH1FWYeEM-[A];K(,3DD8nN1ch-fq"T#Z.,C\h(4BSGZt.YHWo>DK9SUFjJ(\8F_$$:$@el>^S]GP]e$:X/1m"(biM!a8!]
%H<(e,[t)3$,FRNYFX%nTOP.-jOqQ'T#i)SNCXK1'-R[chCXK8>=Br0@0)2/^XCigt;_K%4a*QH$oFiI7#0FKAi3Y7+iS?%^kZsjE
%ToFDPG1iUb5c=>1P+s6=#CYAqhk6hd!kg#k-]=lMcbCNl>P]t`1CtO,9oM0Ib8RDui6,jXNR10d+Jm08=-2R6]kM9S[m?n6g:DJV
%0\fd,EPJH::%n[OS!O;(m442<4Vr@VhClpq[JS`'qQ^@KXYFe/JO%45CEAcmhC2\(,t#U4QZ:=mO*pN(`DIsLW&`IqF#sG0::SIC
%9gpBGRC4a6blSZSk9B6>bibMp/Mr^Gq3''O/teMe/ec$`MaT,J+q@"g/C#ZW*a<5oBrL6\!B+iIZ"5H#O_rJfg+C=;UYH'G)lU]F
%9=K@_Oo.Lo8V5'6NkZZ&`VP9Qom?IV.0BL.jmckGbm<oMSIBd"#hXA;;-";C$^+I\?;Gif0S=6kM^MKrGd;YJ7utW8GH=n]<U)Jr
%g`[SOL"]FOW)c<@Kg[4K.&rfAIbQ(jZ/#5$guooW8[l:I=(=-aV%,=r"ndCMfG[K#5jeUV/pO(l9(9En[UYs!Un@20<E#t+UaYdY
%eFa#JeYHk@/JQnC*iY<,lmQh[3VGNo1I/@Z#la0,ThWjfYT-"&)\I0$O(1:U[k&75r2Nn$#!IHs)@do)jof[&S_p9bK3Ga!)YdW_
%0S5?X.h&0);hH$550+4mDO.e4]u/Cb#SSt!)T4%%eZXD5,_,"^68$Qh`C+c6*[*!u?]/tKBp5Chh5Ue>pe_:o/C0aKL0leK>FGa:
%%gGaZ*QUdHc<V,q2,.gk]lAF<o"iacQa:5VLf<T;i^T%C_640fH^DqEn2Qn"q:G"@`LOS0;:l+ZBe3W!`FJ"=C%>S3@?Lm"4^"i1
%]ruBTg2Sdh[4je%ih]TWp.W&t;a;&$,g.iH4^]cND6gIM;m0GsX>o4cn#L=F$U9YNj/LF_XP2SL1En0I`5$:k2dj3!V=,6K<bmlU
%0Y4\]X>'^$^gVu_Gfp96Sm(\R6i/PHKo:@dI/sagVL-1TkNqiC=`ogKrhB6Me%k='O=R+qjsElD9)IJLL5W1rkqY_S#a2/0$HEJ>
%VCm9'f'?*1&4&uG3W\j,cALRLeXrJB7i9"m_n@N:-IhA5d>7<\B#Z4QkLY-r_*ND[o\Yph!gsuqU>lT?kW)Vk`O<f.'SW6K<&KD?
%1p2haNpi?i)8K[5`EXih6[,BKgGt^ArF_*I8*u'>VqkF?Gi]$*nm[Sb>D:UOR^WFsGsR\.%\%>0>=_=i`1G-<f8*rBbJjpZJ4+2n
%*bC-oa,2k1h^bEir3<eX(IZ0FIg0gmU=aT[>F>093*1+jTI",W^K_d];m^.me9dP0b@4Cpf&2`7ZH@en*HAPV3I>m0[`:qpg9HP6
%Jjeb[f!BHYFV0E@KLdHLeGI73</R2DLOKW3E^R.^kYDZ9L>Kjc4V<ZVpN,.b%KXH'FQ&gX)Rq52iEV$/Z:Bg]SsT*$@k(]WrP>:!
%^][c7$7OH%XuK`fbb``1d++]QFtlEk$*'DqMS%7te'koqboe6hl?M0?HAHZYelKS@9ZjZ'KDO>#DsWjXWknnfI5\o,6u,=a<fX+f
%RpGJa98(Z*2Yq!tn.@uSN[*j3bDe/+BDeJB`^PKIHk)lASMi-m$BPRg+ht`<eNRVki>NAoh4'2-Nf.u[HT&Vm1Y2ZR-C:8pEe;CN
%f!-0GP2WLC`qmn"B0;>oMVC$)AAM0<;nomlLMpJkp,lns!$]$9Ud=7sN&2dY=0:AJcnfLMFYpphaGpSE<)q6r3G_&p47_6W);d0A
%DXJjX%tk`GbKo*C,2i>uTq7^JF6u.-.b%DbmN'HX^b?]lXQ8kad\:l$eYd]DCbo#o,ZlL!,hK1OTU`>'/RQ\9*k`Q=3:5SfYZ&:)
%ZIS<3Kb"?*_q@,??6Wn;l"LlCPr4],7nG(a_Lb/=\*2[Z6iku[GO[]%cCTsH6O\<Ahb"h//")raokSE_M@VZs8YuC2>=a3))u*=o
%Nr'h)blHA=LNDiaI0f:`K-N`t]C1pF*dpIi!H*\REB.j:+M8%M8u6+Idtf<#c8#=7![9fAD.eY[g5*#.^0I*^1i0f^MXX8rZNZV_
%V*jco'lH,Hcc',/A$)JkRUYK7[EXe+[t>;\OG3AO\lh!KXB4iOB"E.U<Hmj*h4@CNZj!\C<n6R\*h,j`CXQ'1)Wmb>ZhE5BKjCbE
%[bc"EH:%ni:/+$_\(t1d7tdUQhG;'a2,<B1T[O+B#qR:M1Y'?1a\Efbljo5,'MdT1]JHTih%pk^g:YeH7<MNSAeeM.jkDZ'Y`J\P
%T]?Rf#!L\r<"u$?bUf1hHCWFNUCF3Can=du_ap(R7,5_mL2DZLZ#k5+NOUO26*7P#UOj[*3Ikf=oO`]O?Q&MoVoe`D;.>E!?(gm@
%!\h5ArIG&9kh_@X&;o7NT(9M3_IJ49!"ULWAS2pYS<DG[CVr9[K#Y`r>=/`sa05`u]FD`K\K9ppHZOC2X(?#@CGrFY--c_f1e)!E
%g3jO>RfU?s_F4]aOh@L(]W<\<!"F>r9<W@51hlaE7auf:%8d\6cle][ap%qf_K#=#.L:j*mYqufLs^0Ul!Bu2&-W,ph,8hRG2>[A
%_U]t^E:3-7Y@n20]j5JP`J,eDcTl=jh[pl\.h$l?)QSE=SCX15g7gl(^1m=1:LEfYCYVom`*JU\hSq#=L"Asr?"Sml<1O,DZ7RWl
%m&nO5Xu'Vfg&Am^p8O#i&*`R/[/]LIJN"7`&>\Fh%b:U2[a/!s'dXGU;<YdGoB0b"1s3K.cbDHrN(QU&<jkZq6.SDK5cQEj"7S\n
%'I\"qe<)?#Z9P$5]+m.^!o/U1n=h<\]41.sFi(dIMPr\?4<,MV"8[*-:Qc3=-RCGN<.gMZ!cA&AfMF]qekS]&]hDtJamqg\9U'.b
%#$%n1'Sh='+m5W*4;L#CYOj<F@=a6?Dgijne>//GLgTIV>I#Ploaarqlk1'T,QnJK2:U1*43+I7L/`mH:6<Z;OBKDpjuso>m\mYS
%nLH(R^gh*al_`%>7<KJd0t5^)^%MKCksXD6Q"]M=^BCnenp%%0cNUI"Xrq-)mW2>k#><$2D,3#m;/K7$&U\6Q9J+/H3sRCaP/BXS
%?m%V=/&I7MZBpYUl:L#P5RL*3+GOl(Km70ac$XI-icmR2C"5!c,O7-br0sYt43gmZ`O$m5Kb7)g5o:@)/cOTt$Ulh-_.G)T-!Pp5
%\u^8&j(?CdK]8YbP+F@m-5.k.<!1Wr*?;+N&LQtTe1c>LLj#qp\rEM9:c\W=YeYV[33t*@CoJN_?[H0tPtIrn<LL8'3V\OZOjP+A
%;+pZ%Y[*#cShbd)/g3fHS.aU<P/"%e@$i5X4@,KX8:%;-8X@9P$Oc^L<:okY=:]FRN?jI?Lt"so(eI)-&2b\=)#Ncn.psF%dQ*F8
%c$rS0`iNa;"Y/H10PdX/<nuH?LT:1NnekS^`r=@ZrLNnU9rr`EcY-TrS[pJ;#KPNN2ua9Ms4qR*<0l!`dQ,4kaX#07e-?R!M6s5^
%)>d`e/:$JsW#oSX+oN!I`FO^(B12Fn=1;sAMhk\e@Ftg@*_O:;5q2Z!YA1J'a[:Zg5RE#EM.Bl4aF-T[/$)AaT<!37@9f@Y$1mS\
%ISf`g]e8uc-&LGo]@J?d$Dcl.Z2pI-etJMen!;[:dJ-hM]aofd+pc<qR_4A#bq@BNDEc8CqGoE+0Mm]S5\/b).<"MOX6t@],Y=0b
%IUAb__d)o@5RJ+k*oZ'J.S0XD&s*UWK20:V3O:!X[1m5\9Bb+\Id`[p7V5,4<H[I5a]l5SAGku4k4YB0P:?5pFR#Ba(.H0s#!QX\
%1-S.=0B=EBDW:\aS<lJ.,Qs-A^`V-'7t2hX$D\"*q7QFD#c*6VYhm?,8fSkM@84->Go[9]&%Vk4?SgU/iO2N.%IRH[@r@f-Y!Jd)
%f5;Aj/a_Ae1III3LG(tTg!M@V3Yc=AX[boja5]j`_\'.`:C\"7RnF9>b`S=#/]$BmW8)=^Bg-cY,e6Z&k+r0n-Pei(Bo"1hdPp\&
%@0;4[RUs\80h>;hJ$k1]P"Z2in?QIse\])K9-#[S%3"`dSU+<WZ^&sU$:7a\/9c<bN5&[(GMSXaCB!(2V3:p('O8L<OoD(ZIW?(6
%Gk#/DQTdq%2s/0qZ16C@^D.fQ>Dq.*(F*UTciM**LJL*U55@<gSPPiKbU5>H6%&7nO\_S*'GpW>?N09bj>5T5"B!HZmY@[.,,]$E
%;6rQ.(fV>B7F$WQO^6GL"TkAX0a85$:elJdV_`@k8R)#C)6Y=A-C%u/,M8Pb@"0/[\!*(R4asGfO-n[tKWdP!Z2eg%W7buaQ%YO5
%j,'_q9*PP1;!ZUj>(uk3A&#UQSPTMm-V+#UlJ_;N6KnA/r:.bW_=:GD$IW4CjQ('GB2it.iRCUipqUIF#Su!!5i<N`*fhpY[e)[D
%$EDp^ZSUn#,t6jH(\gB]3GBrl29g]gn9pHLSHN=U/O:<s?oSRGmAen(aSJ,^5paj6&_),D/uqa#&n#JuT]X0;B]r@?m;.i_10u5Y
%d.)`0T1`&Wd\p$j:a=jjCGORtGf^2mr)T^K4DOXVVk`jV-$;BHOs?p^DGB@SW)W&C$&,1l]OQL]coGS,_7P&6A#Rb6rFGK()=HIf
%NmKPM^I[+=O"?icO4^P/#%K'^?s;\9cBQHrVTns'DDj"=j(@>#+=]Kn9''/1gLVIS/pR6:)c`?,"PBZ*29X4TH?XP%;Nfe_3EORC
%>3)%a.&q@(8(+7OOe**=DR)WMd*-FRp^(-ODce3?VAZ/"'iW]cgg%-Rq*dR)RQ[Z+X,J:B22@h<St+.L*YG-d9+1D?`Ch%K>pF)=
%Ld7`8@ZKLM8glp2da`p\<^IF8C`ALjr0jLp%8i'&H%7UVAJ#*l?Djh-^A4aIE!&BK^:[ZG1+cODN@eW\I$$H68M[DOSM`O7)CAH]
%CB;S\J+r3NQ(bhlW:U<1Dq9U%EGX9C+r-N]4'IAOs"Y9_;UgN<UgUMBZ>g_'s%!od<+Z#Ofa,(/G=b'g4thek$S>&qkRcL?\8&\H
%f_TUkKpr?C)WlKF(F'uXP-uZNjp6O:O\8K/66(ih9%9rJ(C[/7O$>aeVs!Jf?(180dgOWd*<hHOP6J"M:.%rV5=Y?%a_nL@[)Nf<
%E-X;#2,Q^8ZP<u4T`kQY9IfM_]]XR@6OcgZHlX&'Y<8UWTkI*X(-IZCHTXW/s/./3Tfl!oMH1l@0Lpi(I6eDiS;$;LS(HqGCVm.p
%aK5rdoZ<$<\!5#;nq*ld=r'a;]Qb3qbLkOOr0<?k9=3jGWImZ$V+Qo'V4&eV/&r9F:,*MtYuo63Q/fprTaqPknbn;Z5@W;"8dU`6
%SnS^Wi)^qP3!<]h_j8"sp83U`>!"PCok[m-C9INd--FN"AaHpGG$a=00Vqo$;[BKL]Y$460f%6\?qX_$gZRS`jOW&0$cWg"rJHBm
%FdG=&^W>^@)u;0WiN<tIA[l_+B`LXu)4I-B7.t@*nVjOqBcWC)(YPbGSl<4C6l2X's%C7[-n0T-W\l7K)DWW1&j3CPU/al!Epo6D
%:3_snn*t3UR[&qTpNVkQg/H1]OKM^fkqHJ)&-/gS6pN/)ZTX&>$P@s[ZB__eL3t*D0D-b(>5-\[_m`./E5&1%C0,2ncJt-c4%iX'
%F/8n:=//XVC"%67pDK2.d_XThW7AKsZqtj7V9+bf6RW)+N7uhsdrag`eh[PD>'2D^VF7Wpg#9o6QE6iD^7f@)(oq/7]K8DBAqarq
%o.#Q@!h)[(;,r^3-C#E*,er%"Aabq\*(jd`NL4W5-+*':m[T5QmK5)OF;3Ml,5*j8'bj-7lI)?ni(O09TpM^L0m09hjdL1$8b,`/
%)eE[t!*.lhneBN*3Epd-0qhCC<Be%g;mVDf$1^q40,D"<^=m5#bXCk!r#U]ObZh"Q$3Vk2$Z*6S%([e=a>=oL#mbnmiW<i<S^n53
%1$JuB0TM_daR=]q:NIColR[;A:J7L_EtU?Q+!j'J,nl_^:)2)-XHY\P$qlP;Tc\RML.d=K)@iILUbaTurm*#qU),7Jb*HKBrR,Ac
%PhNrb+F[qqgRt!/<A+u?Z6=KeJ+afdDFV<*Nk245W9Uo\dRQEIm9@92H@kGpoX?=TY$<7>eKX6HIr#:/@B_4#ELs<#JOTDAb%D9=
%"$nh99r*aSM47Kq/N[rC@#3Soj[<"mOo7[NOob)O4@IC3Z;WJ)<;HaqTPUX@&dV.9bUDuc"[r4K*#PXV$U52\@6&@<`FFXY-K2);
%Cb[PECdPb-9Z&]NW%q[0KL=]Xm(up<I5$QAM+(8./WN4G;(3,n7-IXI^]^FMHsUc\#cf0",3fREEf!=7nS+!I(*X]S,DDQkQjZa`
%DkE7\BJhNpQYA#aa)P:Vh+g^B]C!Z%NjS=Z3YbCUT0/[u]$Y6-Q.!W_#DK/.O],/6Z6Id`a6MkB`\h6&S36jOX@W4h?:%R7L"P-O
%5qEeq'IRU<4=<`o/@9'u.*3sQ&%9!7WmtltQoQ:f6k?=$GbVKiiRSAeJ^i+!^WRF<5p4=-k&]a!Gi8+(=uNgVg+Z^[nt:ufLFr7#
%&E:T59`-uV/a@r7PV<#n@)391S'_n#NXhQo#l*M^bHH5u#%ED@=9OmhEcMOY-`k8VC-;b;0A/@S5ktkXT1UtVmCu'6Y6Wh$*Tj/5
%J2qW67?*'O6V$m1_\lVl=IEGN+;&WLlZ%_Sc&8&65V(\cX@u'X(kVge#AnQHCq42&9o@q8Xt^`VB$9AVIh^82)Y`C8X=]j6=lkV[
%M(7_&bui]eqSl.k]Jt4U;.8^h0^5MH4iBoe7C]j>FJ'3nZA(aBB^PP8QJU?#bS+^V[kO1+Y=cc_BX62T^c2oR)0S[:\fs4&6bGij
%7*IA9J.O1TT_[5@kG&6/D?kUA(6$=la@W4rme@Df^;-[=Z?8mpjc7Zl74<'hV/]38Y%b%(p1V+kBVoh7M'Go3D75f]MGL<)]+U2,
%G=*TQY[*QH[dQ+E$+(@3qcWa2?&oXf6ihIPEd;h6_i[oB]/O&4FOl+C7'ZtN#'QDue2q0PF5da[=*4\3a*.@1qXcpIckN4@pd7]Z
%@OLrJ\]a?^U>W*K)1+l5b)f`,+^S0"h(A;-<%fS2h(41g4923Pa]"F(Pl;1i]t1U0F"]EGRtXH(D6tLmQ,jab9L-i/40S5MMI/1e
%@A?p>`eA^m>3=oT4$*ogGDSGu9!EK!:&3Yu0j*R`c#LJYAeJ*?2B)!Bg!W348_]d38j*?%SFk8JOtYfG8uZ09AZim;j*qfSrGAGk
%345.(3.$j%[gn`!'F<Zj3f_1!Fc^L$<&fi6F\*@h@I&8E30l2iWHgR-OA!l-;%tS9T]t-D%cL2S`rD99kGX/_@c\$jYXO9"r0+59
%F\ON$g,52'Ci=K4N)qfn'*\+g)74T3W:1g(.U'gA`?p@\c3J4[#2Na=DY3qPGRB=.Y8^*eJ$I8`;NbT7M-5`UnNT>S8gtoR;hlK;
%Hi'j-(b[dn`hC/NF9`HDFAQP'.`XaI+umLqB$4T*Hh"lOGDpr'[32Ck*M@"4-W2K#:7*oa00V<c;;^oL8#+omb#N1.STKN&q[*aB
%fmF9Q?3^tZ*:*!?Zb=a8AXV/B^:R<A?Sa)S0H!9bmnN#4?*1>[i_h8b6:E$L"]M3fZ"$*fLh=<)KraF@S<c]G8R3&>/MOh!4A8WC
%fNO*;"L@<E9Cs2slGYHjM^C2=7%4@_:ORSe`b87=mFZNIk'G:5`f#h?!h2Tg`-$Y>%>h@n(B[#NN>@GJ(X>Nfp-tCM-^17;hs7(/
%&_Q_iSfR3HYu))k+p'&q6rAB;-m+@?*0c/kPA9>qh6$3Vir]2Y1bTI8&KEdRTPuO9hc0)1LfKdLq+u8J2k+GpDI+;eXV@j#8T=l7
%:ei^X1f'A#.C'X5$;N&UOJ5P=NH$oEE#>]s7r1d@6><?]ZU]Epec)+,n`YAMC1$@m;4-SEb:X)/*T]Q1G(lYh8s>m`8W%)K?;XD,
%W[<BN8Xh_UCS7?0VMe0:FU*t=;P8e,_)oW4:h;gRNQHuF::qLM6l"9aZt#k#bhe@78gfZL8j[B\0lkhWi"nq^J3e;GSaGDhQboB-
%+5VdRZ:]lA)G5o+6V.:$[Ko&RfGjcd=VU3!qdYXk!)Qnj7UCIA*Q?iANN5^A*.jC[%Y%61!3$da=_>Pc0r&ZHZ#\OdlP]dqhIKMH
%8FfIP9T0!+^7iQ%Nt)g7R1d#Qq:%Dk"pi-c&A,qJmM(Lb@N%>&Q#hlJHY9tCVJKSCU4p[WQqn)E1\gO*WY3d7PuP7^>tR=5hR;*=
%]*/%P>pS:A^GFW`$q)\+0r(+J(Til\=LA2Ogre/&on1:!^5*,u`0o`4G-S/!;j4/WGj;tAJh3YM5\SY*4%7^E2cC"cNhOlecJD3m
%$716\]L&I.f&2JH/La=/Plr,mn>N5RZ6,$2^K;*[a>6kA%CH=K\'-#f=aT:\RB<$$5&.IfqHSR@b/b]%]>Pl%p@LDA%@>F?P5<m;
%,/Y*D-".m:/8/\rma`3heHl(Fm'TC$`QfeLK(:P@RuuQ^6jMb2$WU(b@d>I!LLVRNB-"*6ZRTlM7q+:>BU)/u\1mSI12TsORI=s3
%/([]f?PM4PjTHD=Wt/TQ1]E]s<7F2U^E/j1\IKFR/uF%+rJOL-Ej,foBK6j)gXM>&<hn*cdSYk7rSD^S\+``3aqmSUBX#g0Uc=(Z
%O-_H>_/mh_V.Zb-28j-kH>@0(/g4ERCL=Dnq<Y_l9Rn_KJ^=>SXYD6L%PU_&6c%]WlQ-]<(U]crfg9p_@kc^0q_if(^I>75n`(G%
%LL.ET!)Su%e]>&AePa93S@apc+1m2)o3f5`B_>C[%D4/A.]18KZ5u+p7n`Yq(AWasYE:%1b0g(&[7!oep(Ah8[#VL;V(D_F(+W^L
%,,Mm*]eO3\cJTl?Dpm;('rB#*9GUTIYeTRqL&4ntY.KAhmL["*A5-BHFQBihOb5QIA3fHa5q"d/gE7l&pg$;:DN0P=[+J%pdO9_`
%IE9B3F;cKAl$=nDj[?OQ/D*8UV;?EQ";M\1-eb;,?9%n%H]rs^8Y<4I7:9Fo5[tlkGLdTeTl`7>(I?'j+kD+2h8U$RM9)6K>49#9
%(L\EAI<KiY,gRJ3CG8m.iZbU+>DAZMJSr"W'Zj:T'G&2S7I\>b@$2Y:U&iBcJQZ07b*ZTtDpi]rqqWGFF-u;?70G8a:km8RQE';u
%,MbDVTSD_a"H*].ie+N!:H0pCre;YJV9:k-&/&B/UQFb7d\5IOn>>`Il@V5#.>0IP"@gr,SqAIG#6`DbBK+<h00/*8K%LW<lKE#S
%Eo_r0)\i\drEBorKU%eC(2n3T8\&U\"812(G39bo<P;EMJ@MES7LVqA:jIoIG_3$>p.!e:<%<`UopabV0/hP;^fAj`N,jpqVC64/
%/iQ2DFe-2?Sr_UlXcW<;YF]-I57TP=R[Au%(T0@U*j]<$EU(ua8O-s[&Ya(l^+:tO7K&@TmriITON18?D/hTr('apj4UVKEPqE?`
%rG`GG";/n-)6[15;cgkCW)?Y?!3[FiZ7b.VPbZM?7)LHjZfBURdoT_9Cibbu+HK5H&f`n.o&+=B[^0]$54l;:T%bhmi8p1O[chQ1
%2<-[9>+@t8Yq$l5N]qaO;adjc2*RI<Q!-.aO#MJB6LtYffd(idd7TX(&CGaKe8A5&>e:jW1cUO("t0FT"]E@o@GaOgooj.09Ml-a
%"!8P#J7RBLm+ZFRlquH9=>Bc[3JA)#B+V(A?7fhhp2p861&+7:QPRGk?;7I9h=fGk:2/Bh4:uFsa^bb6"J'reNORu^A[p,5[Sd#5
%#q6!Q`Ne7QlE3Ft48J3GOMaUd1_V0%FQ(34KIG8-8F%uLZYhYQ?4sb&4?[o>Co8dTBWH9*7ga<*-8q'@j+n#N?kc4e+fG[;Y;2R6
%Y)n^M-AS9"c>"_e1kjP5G@U_4=Qe@g)su5;XA1a8&d>AQBP9d#@3H_`==I/Y,[GXfP71M"5"f`Y?EkQ\mNr4C7>W"<`eDp#RoGsR
%?s-.2_'O^3RegTQWS_kt5Q#Hi1ch5$'R0rO/>X;Fbq;0<;H9Iu__E\OM;/ZDQAs8!j'aBfUW\M^W*0^Z0!W-*B72)4^9$';Alp#@
%$"TURotW?s(G,e*NSW`_Ynj:R*?0!6T,;/S&C'b9<obNE7guSV@JjB3;E2C\(u^%.Osh<bF<!Ns.up5_Nh8@mh`?e44Q-"nZb4R<
%#_^&s%3,Hj4N&s&_(iHF[jQ[;:rm4'6G@gS'QSX-$5p@O1se,pEpb@:g_kI!O9iBKJ_Y",'67;<Ego"P[WRJ&<OVSb@u"bk$_0*[
%:+M3kE8#Sme+,lb[!c^AE?YO`<FlUGAe0IA!^8h,`cES[_C?j++[0!^q/3I[g9JfuJ5o?+=RpMa,9D/(Pk$hh,tg`SdghYE2lNOg
%>afJdHq/h"XElg5mLo#l81^At"`Cq'J_Mdt\",Tu4*TJgc@Oa4.rK^_(/H9-D96K4d<tb3O(bs,6o0f'C">O+b7;q$JS=$eCksEr
%JIp(r"4:ocBU0-Ac5jM*).I$@jT3!;m2ipYE>Ee%GMqR\!k_2gZK2;ceg1<'QN*r)q&\8Lal=:=Y;(^nd$tMt:&<p;ou:Em0+g`/
%(>=_$Y5A5^(<Y'?fJDTT"ad*VHfbfb&hOjdR60gCcn4$og>SX*j.>9@pOm*$gbX00;\13fhU6DiYsY$Y;+hI5lO[^p&>sCL`7Y4O
%]P3<PYLnHn>)2HZ$u@&uV*fDH^Ft_l"i_u_*atS8A":)>S@JftBecA.@&"s8XWs::,FZ"bR]Rg'it8"Gmh!_`Lh7,^Z]kGHV[dAQ
%[1mp)$]EBTf$VYed*&\HQ`Yn,qj)JI9+,hlkl@[+*N6%[W/NhnT9"[tVN+7!c*;@5jp%'7>h:$]gb?i]LInA'8X9HP;UpY&Pa##b
%=dtiKa5!ftUg@MLJrg#SecEkC!Q_eROHC>/7a:b-/Y9RZs7'Ekj/_H7a43r"43Oj/TAr[<6Fk)L8Batjk+poO-#[S*"QE"h2.@As
%,g*/?>)Yb<rR3jo`E$uA:;h^jlVbs>;5N69<)n`j?`I\a$!a:TkrJ%t1,62cA-82OnUM.@`[GQgEWa+*#lupC/ZL`0j8$X#R3KuC
%_&2oF\"B%?,'UZQ`h`KkXt6@%*E:/.<@X&Y5&A(pin*L2>,LE;8JU<>Y`GAT.>oVDMlfl]4fMmj;j,hn8jk%.6%jd0<naE)M9U<h
%RbXI!2BY>GB^nYoX&Q3l82N\&%hYalBoM3Z)Q#Sk;3X2&;/H#:X%kGuWD!;VW]C5+E,'f8R(/I'*2YKNWHZg^p#:SGAh.Od"Vk!.
%*N=ka&Fl)W7i%SLJjeYFL[FllI\NjiU8PThMt;)S4rm[BIDB^?A6Fth>0Y7pQ"Im;KS?JNO0`bLB;GpeL(bX@FXY@u'`V=&\U6Id
%1c@'O6Ms7>-eDO&7QunppJ[o.2LQ&"8IaCcBWt^AdR,7n+;t_nps8Ae40,q@^`HXtCK;`S+=`e8P@tdYpX!<%r:<bn^4DfW_f&fa
%I_,S.K4!kq=qc!oU5oW\ad&\+WtSOc05eZA,9LoCVUq@9gY(%+L3_0Bg%4.O`[J#jm>qDDOUMa*N$OZk<SHkCRcIi.VprasBNnTT
%VtVog06,b2!)6Y]I8>.n1-Bg].VLPOJdestUU0hra4!sbmZ^*$l;G`SZq.`M@3]?K&BR7#RMe'#*a4%SqIF_4CrEfo\ZTH(h0@h0
%K%>/7Om%=U)UUN2(9in-oqX=%&5"[7U.Y`00&q)s%Z>U-l=C,\/k<C!UD[*6[Ci-Bna4J-;FOa\[QBg@ol!e!0PE'3c(s'<CS*8"
%\;ANhTj*C-feq5#n+uCsI;0bt5AMK+7kG56UA?sP$hVRlbc^&S)JcT+fVLYR/L2=4-D1ki6<8e0R=fm6E8P$gqqiWX6MC3<74_o<
%06Vt7V34Go8F2"^W#QZ=#V'=\?cboX;:)79H9&Y,RpXjGiS@ii$1.$'L$F'=%O!@;r*!&lVA'D9.VAX]<`\Q(L1>7``O-eRX!dC]
%hl"3_pZ0@c3c]1*qF0\b)N^ar9-kO[+0.,nC7.'^ouo#k6`_co:@54rZDgcmBD@1JknfD"SSq:0Tr=pO./'@u/h45\a#Pe*U86[=
%C;)d2=^hb;ZQaR/ji(+/P7P<H:9-&L30XT'#NW,O/pSp!qUtENe$qe_hkeWQFA"t2JPuG=1+S85NJCWG6rI5;SrO:[5;qJ!kFP.=
%a`:7IX*24%*DiL:Z6A9ZKjl,Uq.d:WemBnrlpU&<`ro^MHJpo3E!A0m&quf7UZBP]`GD:rhh^?E4+YoT3l34N"l@8t#1XHR^Jmn(
%=DuhYc:JDL8pKCBW0J'9=:bB.cn2CK!RYuEDKUl'5s,$SQV+<-o"lfYTE#!@%it%PR3\."#cZN@qQ4M]T+;n1W?&A?Mgg(+=UDj:
%jeFW!8F9TV*h:e@K&iVP\&3M'f-*PH(7CD/W*3')2c!3K.DL>3qrZAtkO1P==6"o\_M9VLUEeO2EU7/*Rtl(>_qFJI?mtN>`:CTe
%RG\sZL$LDNHkcnYgt5BVO8\Y"#i^&Shp52R)"'Y<!ck(6#Sen5Pk&RZbkb%3psR<:EafL>O/;!0,uWZ=NP^Hk+O@YA:D"2O5%80q
%Ws"J71otK'C..EiA"XOj1N55Tk&'Rm=nXMY))%#Q7Nm?Ma'0Kf+0dVeSVG+3$[SomSgE@5rAB@b_%I&PY[UmRC9-?8&1:2/(S6_N
%SBqB8RjHs^?f^%29o`&Pp%CrSL7fta.>qEIR<Ra-e?4b!Yi,d1Q&PG&3jUQ;nu0tLe?;OhXd\QNj*b)T6gFA,rn#a.ODDJ1Xmm>M
%d_IJi.J^3NU4qP</T]ZW\L"LP\7tJhaE<ko,7O,n0SKMf%Tm&@UNiIh0t2KqG:t!pnPGY`$p\s4,dahd)QTZn"`fgdWm^Bg#?2$j
%LU&Q@T0RT8(i2gCm8K-hJb;?$jbQ()^C'gr2X,ZL7L^>\$'B+d`Q`J,=+@W1G5E8:I30Yh!PaHLUlu5)?C;BNQ>>utJC9TL`"ohV
%(3L3&?$-`'3%ANQe%H_^5T@2C.X^R!a)*`(77EE*"KG#<3,Fjoj`Ea-)OkM.>Km<IR7]T1T[M<lb!n8"a7cIoL4mgs/8DC+cIQ53
%+eqG*$Ube'3,#%,9R?%FeN>+cTPS:D,K`OgRiU^K^PQ0qpEb&72ZVGgX(nP_(WF%!77.QRfKD*@\"4>WDCSb/b%!!<Wd"LNbOj\n
%Qb@Ml9RGIMiRk`V_hSJ`jC*tPh=G<n9jWl?\ChkXHF^<K*kAo#Z#t8GT:Zc7S]m'TjXI4oWC:G9cIn/C]lEcZ]AF]7G;o<mJCF=6
%_1gJ)S/I=sGoA?Ff"oc^!TtB*J'AmU\/aB"E]e*o1D&KIfk5/@5]^Uh?EMHj(S'\gIH8=c*@gS]cEbAoY,9MLiXD8_03gL4eG\4+
%Q?Xmogl+nt:3!t6nu%oZHi$/h'0k=0mX!jb)n+KaIdFtpr4u)__.OI[CH'N69^,+8VoE?(:Zq-.LW6qTm^a\af5Das9FSU_=;YuE
%]D_`]qXD!LUebnM7fd,9lSm/EXLG\,G<!%f4`K`erL/B>X3,D;:>;gl2f5`W3&KKp8;b_9F+*pFdH)HNM5tcKkNa.KXg\i=lgkV'
%O3YkjG<%%&e;Ik:n;EE-:mI%b]h'UicuVHXR_WXkFN>'W,3md%^o5%$BsuO'+A#>$"Z5oJT(Hc_@^<(<V=Y=;<\J0L:`Wf2CC*((
%pbJE<d1rP>LrLkr>FYV?LSW1;]S'.)0q@HsbuPH+o<adjIdFAdGCt@RX*nZo*U[==lun0=o.+&@Tr2nsQ0d5d^j%p[h`Yt/ekppE
%PJ;-c:l=;Z*P(8N8s%oL"k]Ek\E@CbVss"mM)psnJR)A?X*Ck9"@_u*D10(5QT$lglX!r<GEW0^g8mmm6@EC%;Fa*^C^C\1asqi8
%UiKTMNe_4B^;6/2)a*iu^W37pPZ@8iQ;i?*X^=sZ=,.JUZh'EZXa"6eC05"'g6<nV<IeRP=Ih+_D8ip.@Sr&Y^lq=QQb-8Wfuh>3
%bYP.X@h<hs!N_5>Z]Z?'1rKocYPf67mUJuf#K=OYrd,V&L9NFZPh&*5:ZFK)WAB7==Tc1ZOs2)MYm+gMr,+ZS:qJV.ep_%N>o-10
%7`D1p*[^E/<V:+<rm[?Z==#l((A&foEO3na-53t!Te#m.ZNl,.]#5Q+.AVlZYR6fRQ$#4igE]+&o]6^+;mN^r@N+&(A6JF7"U.u"
%/@2[?q'kB8*KiC/Me8)Cj>B+o>a^2,N(JGnW,)5:rH=&T!,r3T=)t"X08Z:E=?@A1TDq&DY5/Bn7rBj"RUdRWZ.iSej]*?le6Dk7
%&$@,cGhtF64Ze]a('GEr[n^t=f)e)M-j8bNk?BNE(X4D_F%/=;`X5"cU#N(?oT$^)?)29T"^Hn'7sckpc6-p"#[PR#'37K"TE%+_
%&(#BJX25IqB.170RDnJ=cULd@;'@jrj2X?m7DD_lo/C";mh^\Emp-XIaATo*OVJ(R1TH]kaeGU<Tpu^#`>3^\\&C%jghL\hg+fm%
%kaZYH-M<_OGN9dL*V%,]UMLudgl?amNtN3@#04]`DiJ+*QPIS<4]Oh"\!^`d=is8)]i=!G8i+[tO?5g[a12,AjEW,d:@7WnJuT%8
%ZWHQB%`UWl-uc=E.3q>Nc-UF%L4Z4$m9f/c:EVnJn*$Mp@1Mb8j9Q6TO_L]p8u!,fo.]uXK!o^8L'3[@=9(U]<&6.cT+bc[ao1-l
%T=_cM&9([2&j(+eT6g,QKGg;pUpSS>V3C1aL_37b%]n6W114QIP;Ld`0QZ[On5)IZ9Ej+iLqRTe]@`gaNe(HU/FAnF0bnOHEZ7sj
%H`9:e'Jb*FgF;if?<dm&jmXM0$;Q(<.m?'riKN&p!9E"rjR?6*fjdOmd!6H?LZ@N7J=U'9_kX(gDRLoNd'pq(Bp,E`9*pr"nIs[o
%kC;_r6[:UdMa((@,+q9I7rk=LgR!2LloqrJF$K@/><(bl*TpBr'fZMQ8(X:IT^8W#O&n$<@9m\JYW*@]C#g%?Gm-MX<UD8QDQ%@+
%;XBp5M3*SQS:rMLFX,)j:J!X-Le_/ZCjk-1H@]JG/koIb:9L(>]H"Mq)7:7Ggll5,KEm\;+UV!3XM&_7'Q=X"O@q_2fO)UsgPRH(
%LlK`%pZeL61ER,dQlUN/?E76p[%-GaE!b2_Ej*mL:fkI3L0U.CJ!5J8-cVj_MW8/T"jPl:%d=8+VkKjFr)qp0F/=aFcupnjTSo[r
%R"1"Yh$;&l1s7n!4k;Y2(-VH@s0s];Z^;NPNF_6L=_s;2ZQuQ0QGVq*b"IC\$lZHK2^d0s/mS[$lPB$m]Y$A`p:3i9Y>8lT<!nfN
%R49Bc-hqp<HtD+:Mg*]Dp>0W>7@&g_a/g6]4.U1?8l''?2p-GUZM-To8ScfQb*5+o)\,o1_j+gkqXc2rLbFTVVbEL\G%G]*9MF-b
%LaIB&Q@SJ\0Y/qm<nP_Rl+*kt>!igeL55H^@#6n4Tgpp7EOm5F$TY-oZLT1p\L\FAfUcj$W*N_7_W^?-[hXq1?.9RPU%W8-XM/pd
%ED?!M'Vo*hC,dR8d7^lVS5's)GdGWN=ZD:,W>(*@j=kmTF&_^?C8s[qhM+uk$)(0g-tog)':,Dr7kd+R:V->0IQmD/BrpplPFLML
%d0[.,@LcAXgr2CuOaQjWGBl7N8JhW_G`HP24Xd<aWDo6qRA0o.6h'_g(k'(;7UNd8gZm:<*YF2BCcd#]SN8!=K2BmLI-ltS]ano,
%e!JSqL%(_!JWRtoP:VDi.&?@Gm&bP,>B8uR9!8k]@#uf[HHOYVA+9\#1$p)7Z,C<XmB/h9`OZ`;h6*XSfX'CI>IR\pAPb4K"*/4k
%H1@r#?mai&%G<k_7WNq?DY`YFFUcpHask]\0fRhbDtghElck>N[e!S@O/*n5q`rH_G:WSSIa-'V^?2u$k3VL.[TbBAgatbJ:RcPK
%laG,E,'\Rk,i*eBeqVo9iTH[r]mJ[T!phQ>[V9aU^crljM>-5l2Zta']*8+B6shIi/]p9m(u-7;IBgEM!usrjPrioDW/MRib9S`3
%)hG5F_D5K2UKV"\%tg(n^Dsr&Qi=D%)2mCs5^7(i4EZ2P8"X.LrUt9]_jB23[AhbuCSWJW[s:"#p<1jI5(JmdLVOuAd-qR,pUcqZ
%eC1ClI*/D1V.hiS!NkrMm]:ZSAX6g'^aQ(QmEROmg$c8RV8B6C=7VqCYfdV0,>$:ZR+<R7o$-g[.1rBg1tess>:[fLc;ETGS_3Fh
%2$MEPEH8<Cd9!FH4)k022>7idaq9[*h&R!->O,Q)>P^uh!<<&\)[@3AB(TZ4Kn`/XRA0+LfJrGU&/\8;M(.dbeS_pdp1boJS7E?K
%IYKc$gS;O',L\d)Sa!Re](L+5b5NBT(ETN&(:gV_b]gs?Zg*!&H$ibM6lq]HX\ACVDQcqdbO?84rXM1Soi:=lP@4;jT_-l_EsE0p
%M^5EbXh3Pu]>Lmr5:j#,HYhLKbNftZ@T<Gm]7rF+mXBZQT4@3d]l_ief_UJJIg=Ji&kDk$XS[1RhVlh-1US8og$Mo&`2"#;,DV5>
%p*1S3H`0kNRCWB_iV)bD4)pF:($FPdH7l2Tp1N]^\J-@Y<]dt"]Cs<l1SRkDBR83TEsLeL0%9cIk5`O1Dk3D[]XLcG4ID^MQN2HQ
%]'DB@532X1EW:A@fSdK<($fBfAm&&Cpt^<">:9=,/(U2uJRfU/bDr[5D1`nfr*[cHS:J=)ObG1%R!=Cgdn=)WN/WVultRE];Ka;K
%Hn_Sg#$m<De.@L=8FUqJ65201XI!.,Fg/\BWY.Z=M%EO.PLtd#Q=<1U.'f'59X@T"8nEn'&kAk5Bf=X?5J:5l]Gb%K<U=i%hD3uU
%`',4)Y(,3.",-cWaZ<s0&kOrfRO->BIU5b=b!jFdf*fc0@%,Apkoo$RWiFp3l*c[?;lhY0%uhc`V7gK;@tu?EB48slC?\g$'/D\V
%R`mKN`fQlp-o=ShSt3krY@JBGgg,`_Z\mfTPY%ltGr5UcQJ<3c]64'ieR'TF-cL%p-RjC[-<.+?(OYr>KpB=&=lk?QQ%gcGFBQTY
%OS2PnTPfW'No>E"&9`f*B7`I&VXnq$VU7ENqCO7,c'J>!Y`89B@isoYdmGtP]\L(&=6k=g-XGqU"5[1G65ZQSY'2k6mb`"&6;mUo
%li%A.>EHo*MKSr2f/jsUDoV$O45;^C6G@Ga^N-hP%P?gUWQ.I1pHu.a8A>ef-f`M3nXGA1KPrS_,=NECd$X"KY@g7hp82ii^$Vmf
%3)m#[fq6c9?A<Gsh5I<5H^"$4QDc^Q]<DJ&c8)-@/>$ADN.O7e@#gQd_(;n(D`]k+'n\NTauL`'FR^B+E.E/`MYO21=!h!ITbsgd
%1O574[qj!$MKH6eq*hb#P>eQj`Mf$rcEqN0STWc%flUthHG!GMZg-FI^ZX,]/`DNSoti"D/M-=UJNtnlN1@9r70$CG\fXQ=6Z&O*
%o%fU#m<W1b2d=kYg:&U=/&h+WDcnJ;`7hV9=e(jlBqKQY<ZUiqn$]=2l+1HnXaSA:(T*MsNjW$`)qNQlpT'TIXn'%4$*.;$m=*%O
%.Q2da!q2s@NRnVt`2S%QPeV*<0M!JXFu)B>re[q_Nf<jp8U"0"iAGCe=#<V;ja@s)[@Nq8ZX'\oFH)7FG1C>,rjZiI44A)Zg0)*p
%n^>s?Z#<]*dr)eO=hS)Q+L.sA[L;U7H+*1PgTFA^Dt5`nm>;<`V9E;UX6X`[Dc``n[;s#<D57$UppaTM`>pW3p!`AYs*+K&rU572
%o06N0r-ps0E]U=WhuA`Zs7Fe?r8ktKq=;ufT76O4^\ml9T76S*c[R8IrmUmMs7F4$Iei4]s7]lMq<<[Lr:@]&)]!n0rS[Fbs+gXR
%h`h#,rrYj=\_-~>
%AI9_PrivateDataEnd
